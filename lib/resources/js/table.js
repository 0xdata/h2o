// Generated by CoffeeScript 1.5.0
(function() {
  var tableApp;

  tableApp = angular.module('h2o.table', []);

  tableApp.directive("showHeaderOnHover", function($parse) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var cachedColumnOuterWidths, cachedColumnWidths, createFauxTable, destroyFauxTable, fauxHoveredRow, fauxTable;
        fauxTable = null;
        fauxHoveredRow = null;
        cachedColumnWidths = [];
        cachedColumnOuterWidths = [];
        createFauxTable = function($td, $tr, e) {
          var cellWidth, cellsInRangeOuterWidths, cellsInRangeWidths, cellsToTheLeftOuterWidths, fauxHeader, firstContinousVisibleRange, header, headerCells, i, left, rowCells, trOffset, visibleRange, width, _i, _len;
          trOffset = $tr.offset();
          firstContinousVisibleRange = function($elements) {
            var $el, $window, el, end, i, inRange, isVisible, scrollLeft, scrollTop, start, windowHeight, windowWidth, _i, _len;
            $window = $(window);
            scrollLeft = $window.scrollLeft();
            scrollTop = $window.scrollTop();
            windowWidth = $window.width();
            windowHeight = $window.height();
            i = 0;
            start = 0;
            end = 0;
            inRange = false;
            for (_i = 0, _len = $elements.length; _i < _len; _i++) {
              el = $elements[_i];
              $el = $(el);
              isVisible = $el.isOnScreen(scrollTop, scrollLeft, windowWidth, windowHeight);
              if (isVisible) {
                if (inRange) {
                  end = i + 1;
                } else if ($el.is(':visible')) {
                  start = i;
                  inRange = true;
                }
              } else {
                if (inRange) {
                  end = i;
                  break;
                }
              }
              i += 1;
            }
            return {
              start: start,
              end: end
            };
          };
          if (fauxTable == null) {
            cachedColumnWidths = [];
            cachedColumnOuterWidths = [];
            $tr.children().each(function(i, e) {
              var $e;
              $e = $(e);
              if ($e.is(':visible')) {
                cachedColumnWidths.push($e.width());
                return cachedColumnOuterWidths.push($e.outerWidth());
              } else {
                cachedColumnWidths.push(0);
                return cachedColumnOuterWidths.push(0);
              }
            });
            fauxTable = $('<table></table>');
            fauxTable.addClass('header-hover-table');
            fauxTable.addClass(element.attr('class'));
            fauxTable.css({
              position: "absolute"
            });
            $("body").append(fauxTable);
          }
          fauxTable.empty();
          header = element.find("tr").first();
          headerCells = $(header).children();
          rowCells = $tr.children();
          visibleRange = firstContinousVisibleRange(rowCells);
          if (cachedColumnWidths) {
            cellsInRangeWidths = cachedColumnWidths.slice(visibleRange.start, visibleRange.end);
            cellsInRangeOuterWidths = cachedColumnOuterWidths.slice(visibleRange.start, visibleRange.end);
            cellsToTheLeftOuterWidths = [];
            if (visibleRange.start) {
              cellsToTheLeftOuterWidths = cachedColumnOuterWidths.slice(0, visibleRange.start);
            }
          } else {
            cellsInRangeWidths = [];
            cellsInRangeOuterWidths = [];
            cellsToTheLeftOuterWidths = [];
          }
          left = cellsToTheLeftOuterWidths.sum();
          width = cellsInRangeOuterWidths.sum();
          fauxTable.css({
            top: trOffset.top,
            left: left,
            width: width
          });
          fauxHeader = $("<tr class=\"faux-header-black\"></tr>");
          fauxHoveredRow = $("<tr></tr>");
          fauxHeader.append($(headerCells.slice(visibleRange.start, visibleRange.end)).clone());
          fauxHoveredRow.append($(rowCells.slice(visibleRange.start, visibleRange.end)).clone());
          $(fauxHeader.children()[1]).addClass('first');
          i = 0;
          for (_i = 0, _len = cellsInRangeWidths.length; _i < _len; _i++) {
            cellWidth = cellsInRangeWidths[_i];
            $(fauxHeader.children()[i]).width(cellWidth);
            if (i === cellsInRangeWidths.length - 2) {
              $(fauxHeader.children()[i]).addClass('penultimate');
            }
            i += 1;
          }
          fauxTable.append(fauxHeader);
          return fauxTable.append(fauxHoveredRow);
        };
        destroyFauxTable = function() {
          if (fauxTable) {
            fauxTable.detach();
          }
          return fauxTable = null;
        };
        element.on('mouseover', 'td', function(e) {
          var $td, $tr;
          $td = $(this);
          $tr = $($td.parent());
          if ($tr.data("type") === "data") {
            return createFauxTable($td, $tr, e);
          } else {
            return destroyFauxTable();
          }
        });
        element.bind('didReload', function(e) {
          return destroyFauxTable();
        });
      }
    };
  });

  tableApp.directive("reorderable", function($parse) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var reorderableModel;
        reorderableModel = $parse(attrs.reorderable);
        return element.dragtable({
          boundary: 'drag-boundary',
          topOffset: 200,
          stop: function() {
            var _this = this;
            return scope.$apply(function() {
              return reorderableModel(scope)(element.dragtable("order"));
            });
          }
        });
      }
    };
  });

  tableApp.directive("d3table", function($parse) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var datasetModel, headerClassmapModel, headersModel, reload, summariesModel, tbody, thead, thead_tr, vis;
        datasetModel = $parse(attrs.dataset);
        headersModel = $parse(attrs.headers);
        summariesModel = $parse(attrs.summaries);
        headerClassmapModel = $parse(attrs.headerClassmap);
        vis = d3.select(element[0]);
        thead = vis.append("thead");
        tbody = vis.append("tbody");
        thead_tr = thead.append("tr");
        reload = function() {
          var dataCells, dataCellsFuncs, dataRows, dataRowsFuncs, prepareRowFunction, prepareSummaryFunction, summaryCells, summaryCellsFuncs, summaryRows, summaryRowsFuncs, thFuncs, update,
            _this = this;
          if ((headersModel(scope) == null) || (datasetModel(scope) == null)) {
            return;
          }
          prepareSummaryFunction = function(row) {
            return function(column) {
              var klass, value;
              if (column.name === "row") {
                value = row[1];
              } else {
                value = column[row[0]];
              }
              klass = column.shown ? "" : "hidden";
              return {
                klass: klass,
                value: value
              };
            };
          };
          prepareRowFunction = function(row) {
            return function(column) {
              var klass, value;
              value = row[column.name];
              klass = "";
              if (!column.shown) {
                klass = "hidden";
              } else {
                if (value === "NA") {
                  klass = "na";
                }
              }
              return {
                value: value,
                klass: klass
              };
            };
          };
          update = function(items, funcDict) {
            var added, removed, updated;
            added = items.enter();
            removed = items.exit();
            updated = items;
            funcDict.update(items);
            funcDict.update(funcDict.style(funcDict.add(added)));
            return funcDict.remove(removed);
          };
          thFuncs = {
            add: function(item) {
              return item.append("th");
            },
            remove: function(item) {
              return item.remove();
            },
            update: function(item) {
              return item.html(function(c) {
                return c.visual;
              }).attr("data-header", function(c) {
                return c.name;
              }).attr("class", function(c) {
                var _ref;
                return (_ref = headerClassmapModel(scope)[c.name]) != null ? _ref : "";
              }).style("display", function(c) {
                var _ref;
                if ((_ref = c.shown) != null ? _ref : true) {
                  return "table-cell";
                } else {
                  return "none";
                }
              });
            },
            style: function(item) {
              return item;
            }
          };
          summaryRowsFuncs = {
            add: function(item) {
              return item.append("tr");
            },
            remove: function(item) {
              return item.remove();
            },
            update: function(item) {
              return item;
            },
            style: function(item) {
              return item.attr("data-type", "summary").attr('class', function(c) {
                return "summary " + c[0];
              });
            }
          };
          dataRowsFuncs = {
            add: function(item) {
              return item.append("tr");
            },
            remove: function(item) {
              return item.remove();
            },
            update: function(item) {
              return item;
            },
            style: function(item) {
              return item.attr("data-type", "data").attr('class', function(c) {
                return "row" + c.row;
              });
            }
          };
          summaryCellsFuncs = {
            add: function(item) {
              return item.append("td");
            },
            remove: function(item) {
              return item.remove();
            },
            update: function(item) {
              return item.attr('class', function(item) {
                return item.klass;
              }).html(function(item) {
                return item.value;
              });
            },
            style: function(item) {
              return item;
            }
          };
          dataCellsFuncs = {
            add: function(item) {
              return item.append("td");
            },
            remove: function(item) {
              return item.remove();
            },
            update: function(item) {
              return item.attr('class', function(item) {
                return item.klass;
              }).html(function(item) {
                return item.value;
              });
            },
            style: function(item) {
              return item;
            }
          };
          update(thead_tr.selectAll("th").data(headersModel(scope)), thFuncs);
          summaryRows = tbody.selectAll("tr[data-type=\"summary\"]").data(summariesModel(scope));
          dataRows = tbody.selectAll("tr[data-type=\"data\"]").data(datasetModel(scope));
          update(summaryRows, summaryRowsFuncs);
          update(dataRows, dataRowsFuncs);
          summaryCells = summaryRows.selectAll("td").data(function(row) {
            return headersModel(scope).map(prepareSummaryFunction(row));
          });
          dataCells = dataRows.selectAll("td").data(function(row) {
            return headersModel(scope).map(prepareRowFunction(row));
          });
          update(summaryCells, summaryCellsFuncs);
          update(dataCells, dataCellsFuncs);
          return element.trigger("didReload");
        };
        return scope.$watch(headersModel, function(newVal, oldVal) {
          if (!newVal) {
            return;
          }
          return reload();
        });
      }
    };
  });

}).call(this);
