<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0819.2015                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.3'>
      <aliases enabled='yes' />
      <column caption='H2O Port' datatype='integer' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
        <calculation class='tableau' formula='54321' />
      </column>
      <column caption='H2O IP' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
        <calculation class='tableau' formula='&quot;localhost&quot;' />
      </column>
      <column caption='H2O Max Mem Size' datatype='string' name='[Parameter 3]' param-domain-type='any' role='measure' type='nominal' value='&quot;4g&quot;'>
        <calculation class='tableau' formula='&quot;4g&quot;' />
      </column>
      <column caption='Claims Data File' datatype='string' name='[Parameter 4]' param-domain-type='any' role='measure' type='nominal' value='&quot;d:\\claimsdata.csv&quot;'>
        <calculation class='tableau' formula='&quot;d:\claimsdata.csv&quot;' />
      </column>
    </datasource>
    <datasource caption='claims_coefficients' inline='true' name='textscan.41886.636795671293' version='8.3'>
      <connection class='textscan' directory='D:/' filename='claims_coefficients.csv'>
        <relation name='claims_coefficients#csv' table='[claims_coefficients#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US'>
            <column datatype='string' name='Coefficients' ordinal='0' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Coefficients</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Coefficients]</local-name>
            <parent-name>[claims_coefficients#csv]</parent-name>
            <remote-alias>Coefficients</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[claims_coefficients#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Coefficient Name' datatype='string' name='[Coefficients]' role='dimension' type='nominal'>
      </column>
      <column caption='Normalized Value' datatype='real' name='[Number of Claims Filed (copy) 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;tweedie.vi[.arg1]&#13;&#10;&apos;,&#13;&#10;MAX([Coefficients]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.472789' measure-ordering='alphabetic' measure-percentage='0.309524' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='claims_metadata' inline='true' name='textscan.41885.651995601853' version='8.3'>
      <connection class='textscan' directory='D:/' filename='claims_losscodes.csv'>
        <relation name='claims_metadata#csv' table='[claims_metadata#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='date' name='MonthlyDate' ordinal='0' />
            <column datatype='string' name='StateName' ordinal='1' />
            <column datatype='string' name='LossCode' ordinal='2' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>MonthlyDate</remote-name>
            <remote-type>133</remote-type>
            <local-name>[MonthlyDate]</local-name>
            <parent-name>[claims_metadata#csv]</parent-name>
            <remote-alias>MonthlyDate</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>StateName</remote-name>
            <remote-type>129</remote-type>
            <local-name>[StateName]</local-name>
            <parent-name>[claims_metadata#csv]</parent-name>
            <remote-alias>StateName</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LossCode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LossCode]</local-name>
            <parent-name>[claims_metadata#csv]</parent-name>
            <remote-alias>LossCode</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[claims_metadata#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='H2O Initialization' datatype='boolean' name='[Calculation_1010902082708389]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_BOOL(&#13;&#10;&apos;&#13;&#10;myh2oCleaner &lt;- function(pattern = &quot;Last.value.&quot;)&#13;&#10;{&#13;&#10;  keys &lt;- h2o.ls(h2oHandle, pattern = pattern)$Key&#13;&#10;  if (!is.null(keys))&#13;&#10;    h2o.rm(h2oHandle, keys)&#13;&#10;  invisible(keys)&#13;&#10;}&#13;&#10;&#13;&#10;if (!exists(&quot;h2oHandle&quot;, globalenv()))&#13;&#10;{&#13;&#10;  library(h2o)&#13;&#10;  h2oHandle &lt;- h2o.init(ip = .arg1, port = .arg2, max_mem_size = .arg3)&#13;&#10;}&#13;&#10;&#13;&#10;if (length(h2o.ls(h2oHandle, pattern = &quot;claims.dat&quot;)) == 0L)&#13;&#10;{&#13;&#10;  claims.dat &lt;- h2o.importFile(h2oHandle, path = .arg4, key = &quot;claims.dat&quot;)&#13;&#10;&#13;&#10;  # Create indicator variables for claim payout percentages&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$ClaimPaidRatio &lt;- claims.dat$TotalPaid / claims.dat$TotalClaim)&#13;&#10;  )&#13;&#10;&#13;&#10;  payoutThreshold &lt;- 1&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$HighClaimPaid &lt;- claims.dat$ClaimPaidRatio &gt; payoutThreshold)&#13;&#10;  )&#13;&#10;&#13;&#10;  # Create log transformed variables&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logDeduct &lt;- log(claims.dat$Deduct + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logFees &lt;- log(claims.dat$Fees + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalClaim &lt;- log(claims.dat$TotalClaim + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$NonNegPaid &lt;- ifelse(claims.dat$TotalPaid &lt; 0,&#13;&#10;                                             0, claims.dat$TotalPaid))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalPaid &lt;- log(claims.dat$NonNegPaid + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  # Convert some numeric columns to factor&#13;&#10;  for (j in c(&quot;CallCenterPostalCode&quot;))&#13;&#10;    claims.dat[[j]] &lt;- as.factor(claims.dat[[j]])&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  # Limit analysis to &quot;Claim Complete&quot;&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    claims.dat[claims.dat$ResponseStatus == &quot;Claim Complete&quot;, ]&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    h2o.assign(completed.claims.dat, &quot;completed.claims.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  xvars &lt;- c(&quot;CallCenterPostalCode&quot;, &quot;Demographics_AgeGroup&quot;,&#13;&#10;             &quot;Demographics_Gender&quot;, &quot;FirstClaim&quot;, &quot;INStype&quot;,&#13;&#10;             &quot;LossCode&quot;, &quot;MonthlyDate&quot;, &quot;SourceCode&quot;,&#13;&#10;             &quot;StateName&quot;, &quot;logDeduct&quot;, &quot;logFees&quot;,&#13;&#10;             &quot;logTotalClaim&quot;)&#13;&#10;&#13;&#10;  tweedie.final &lt;- h2o.glm(xvars, &quot;NonNegPaid&quot;, completed.claims.dat,&#13;&#10;                           key = &quot;tweedie.final&quot;, family = &quot;tweedie&quot;,&#13;&#10;                           tweedie.p = 1.75, alpha = 0, lambda = 12,&#13;&#10;                           variable_importances = TRUE)&#13;&#10;&#13;&#10;  tweedie.vi &lt;- sort(abs(tweedie.final@model$normalized_coefficients), decreasing = TRUE)&#13;&#10;  tweedie.vi &lt;- tweedie.vi[names(tweedie.vi) != &quot;Intercept&quot;]&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Job__&quot;)&#13;&#10;&#13;&#10;  completed.claims.dat$predicted &lt;-&#13;&#10;    h2o.predict(tweedie.final,  completed.claims.dat)&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Predict_&quot;)&#13;&#10;&#13;&#10;  library(tweedie)&#13;&#10;  completed.claims.dat$deviance &lt;-&#13;&#10;    tweedie.dev(y  = completed.claims.dat$NonNegPaid,&#13;&#10;                mu = completed.claims.dat$predicted,&#13;&#10;                power = 1.75)&#13;&#10;&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    completed.claims.dat[!is.na(completed.claims.dat$deviance), ]&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    h2o.assign(claims.tweediedev.dat, &quot;claims.tweediedev.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  devAggrFun &lt;- function(x)&#13;&#10;  {&#13;&#10;    cbind(N = nrow(x),&#13;&#10;          SumTotalPaid = sum(x$TotalPaid),&#13;&#10;          SumPredicted = sum(x$predicted),&#13;&#10;          MinDeviance  = min(x$deviance),&#13;&#10;          MeanDeviance = mean(x$deviance),&#13;&#10;          MaxDeviance  = max(x$deviance))&#13;&#10;  }&#13;&#10;  h2o.addFunction(h2oHandle, devAggrFun)&#13;&#10;&#13;&#10;  devAggr &lt;-&#13;&#10;    as.data.frame(ddply(claims.tweediedev.dat,&#13;&#10;                        c(&quot;MonthlyDate&quot;, &quot;StateName&quot;, &quot;LossCode&quot;),&#13;&#10;                        devAggrFun))&#13;&#10;  devAggr[[1L]] &lt;-&#13;&#10;    as.Date(as.character(devAggr[[1L]]), &quot;%m/%d/%Y&quot;)&#13;&#10;  devAggr[[4L]] &lt;- as.integer(devAggr[[4L]])&#13;&#10;  colnames(devAggr)[-(1:3)] &lt;-&#13;&#10;    c(&quot;N&quot;, &quot;SumTotalPaid&quot;, &quot;SumPredicted&quot;,&#13;&#10;      &quot;MinDeviance&quot;, &quot;MeanDeviance&quot;, &quot;MaxDeviance&quot;)&#13;&#10;  print(head(devAggr, 10))&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;}&#13;&#10;&#13;&#10;TRUE&#13;&#10;&apos;,&#13;&#10;[Parameters].[Parameter 2], [Parameters].[Parameter 1], [Parameters].[Parameter 3], [Parameters].[Parameter 4])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Loss Code' datatype='string' name='[LossCode]' role='dimension' type='nominal'>
      </column>
      <column caption='Min Deviance' datatype='real' name='[Max Deviance (copy 2)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MinDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Number of Completed Claims' datatype='integer' name='[Max Deviance (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_INT(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_integer_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;N&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Actual Payout' datatype='real' name='[Mean Deviance (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;SumTotalPaid&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Claim Date' datatype='date' name='[MonthlyDate]' role='dimension' type='ordinal'>
      </column>
      <column caption='Max Deviance' datatype='real' name='[Number of Claims Filed (copy) 1 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MaxDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Mean Deviance' datatype='real' name='[Number of Claims Filed (copy) 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MeanDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='State Name' datatype='string' name='[StateName]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column caption='Predicted Payout' datatype='real' name='[Sum Total Paid (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;SumPredicted&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column-instance column='[LossCode]' derivation='Attribute' name='[attr:LossCode:nk]' pivot='key' type='nominal' />
      <column-instance column='[LossCode]' derivation='None' name='[none:LossCode:nk]' pivot='key' type='nominal' />
      <column-instance column='[Mean Deviance (copy)]' derivation='User' name='[usr:Mean Deviance (copy):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Sum Total Paid (copy)]' derivation='User' name='[usr:Sum Total Paid (copy):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <group caption='Action (Loss Code)' hidden='true' name='[Action (Loss Code)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[LossCode]' />
        </groupfilter>
      </group>
      <group caption='Action (State Name)' hidden='true' name='[Action (State Name)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[StateName]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.472789' measure-ordering='alphabetic' measure-percentage='0.282313' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:LossCode:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;medlr&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;accer&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;nglhr&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;dep&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;pulb&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;hemn&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;flr&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;tort&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;er-mt&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;suit&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;emt&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;pulhr&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;medpa&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;carr&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;nurf&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;inf&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;flrf&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;er-x&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;surmp&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;impay&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;er-&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;revm&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;medh&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;flron&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;flrst&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;cheh&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;obgor&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;er-ag&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;sui&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;dc-&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;oth&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:LossCode:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;medlr&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;accer&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;nglhr&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;dep&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;pulb&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;hemn&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;flr&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;tort&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;er-mt&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;suit&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;emt&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;pulhr&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;medpa&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;carr&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;nurf&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;inf&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;flrf&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;er-x&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;surmp&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;impay&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;er-&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;revm&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;medh&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;flron&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;flrst&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;cheh&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;obgor&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;er-ag&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;sui&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;dc-&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;oth&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='H2O Port' datatype='integer' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
          <calculation class='tableau' formula='54321' />
        </column>
        <column caption='H2O IP' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
          <calculation class='tableau' formula='&quot;localhost&quot;' />
        </column>
        <column caption='H2O Max Mem Size' datatype='string' name='[Parameter 3]' param-domain-type='any' role='measure' type='nominal' value='&quot;4g&quot;'>
          <calculation class='tableau' formula='&quot;4g&quot;' />
        </column>
        <column caption='Claims Data File' datatype='string' name='[Parameter 4]' param-domain-type='any' role='measure' type='nominal' value='&quot;d:\\claimsdata.csv&quot;'>
          <calculation class='tableau' formula='&quot;d:\claimsdata.csv&quot;' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='State Name' name='[Action1]'>
      <activation type='on-select' />
      <source dashboard='Predicted vs Actual' type='sheet' worksheet='Maximum Deviance' />
      <link caption='State Name' delimiter=',' escape='\' expression='tsl:Predicted%20vs%20Actual?%5Btextscan.41885.651995601853%5D.%5BStateName%5D~s0=&lt;[StateName]~na&gt;' include-null='true' multi-select='true' url-escape='true' />
      <command command='tsc:tsl-filter'>
        <param name='exclude' value='Maximum Deviance' />
        <param name='target' value='Predicted vs Actual' />
      </command>
    </action>
    <action caption='Filter by Loss Code' name='[Action2]'>
      <activation type='on-select' />
      <source dashboard='Predicted vs Actual' type='sheet' worksheet='Payments by Loss Code' />
      <link caption='Filter by Loss Code' delimiter=',' escape='\' expression='tsl:Predicted%20vs%20Actual?%5Btextscan.41885.651995601853%5D.%5BLossCode%5D~s0=&lt;[LossCode]~na&gt;' include-null='true' multi-select='true' url-escape='true' />
      <command command='tsc:tsl-filter'>
        <param name='exclude' value='Payments by Loss Code' />
        <param name='single-select' value='' />
        <param name='special-fields' value='all' />
        <param name='target' value='Predicted vs Actual' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Maximum Deviance'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>Sheet Name</run>
            <run fontsize='13'>&gt;</run>
            <run fontsize='13'> for Loss Code </run>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>[textscan.41885.651995601853].[attr:LossCode:nk]</run>
            <run fontsize='13'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='claims_metadata' name='textscan.41885.651995601853' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='textscan.41885.651995601853'>
            <column caption='H2O Initialization' datatype='boolean' name='[Calculation_1010902082708389]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_BOOL(&#13;&#10;&apos;&#13;&#10;myh2oCleaner &lt;- function(pattern = &quot;Last.value.&quot;)&#13;&#10;{&#13;&#10;  keys &lt;- h2o.ls(h2oHandle, pattern = pattern)$Key&#13;&#10;  if (!is.null(keys))&#13;&#10;    h2o.rm(h2oHandle, keys)&#13;&#10;  invisible(keys)&#13;&#10;}&#13;&#10;&#13;&#10;if (!exists(&quot;h2oHandle&quot;, globalenv()))&#13;&#10;{&#13;&#10;  library(h2o)&#13;&#10;  h2oHandle &lt;- h2o.init(ip = .arg1, port = .arg2, max_mem_size = .arg3)&#13;&#10;}&#13;&#10;&#13;&#10;if (length(h2o.ls(h2oHandle, pattern = &quot;claims.dat&quot;)) == 0L)&#13;&#10;{&#13;&#10;  claims.dat &lt;- h2o.importFile(h2oHandle, path = .arg4, key = &quot;claims.dat&quot;)&#13;&#10;&#13;&#10;  # Create indicator variables for claim payout percentages&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$ClaimPaidRatio &lt;- claims.dat$TotalPaid / claims.dat$TotalClaim)&#13;&#10;  )&#13;&#10;&#13;&#10;  payoutThreshold &lt;- 1&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$HighClaimPaid &lt;- claims.dat$ClaimPaidRatio &gt; payoutThreshold)&#13;&#10;  )&#13;&#10;&#13;&#10;  # Create log transformed variables&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logDeduct &lt;- log(claims.dat$Deduct + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logFees &lt;- log(claims.dat$Fees + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalClaim &lt;- log(claims.dat$TotalClaim + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$NonNegPaid &lt;- ifelse(claims.dat$TotalPaid &lt; 0,&#13;&#10;                                             0, claims.dat$TotalPaid))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalPaid &lt;- log(claims.dat$NonNegPaid + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  # Convert some numeric columns to factor&#13;&#10;  for (j in c(&quot;CallCenterPostalCode&quot;))&#13;&#10;    claims.dat[[j]] &lt;- as.factor(claims.dat[[j]])&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  # Limit analysis to &quot;Claim Complete&quot;&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    claims.dat[claims.dat$ResponseStatus == &quot;Claim Complete&quot;, ]&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    h2o.assign(completed.claims.dat, &quot;completed.claims.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  xvars &lt;- c(&quot;CallCenterPostalCode&quot;, &quot;Demographics_AgeGroup&quot;,&#13;&#10;             &quot;Demographics_Gender&quot;, &quot;FirstClaim&quot;, &quot;INStype&quot;,&#13;&#10;             &quot;LossCode&quot;, &quot;MonthlyDate&quot;, &quot;SourceCode&quot;,&#13;&#10;             &quot;StateName&quot;, &quot;logDeduct&quot;, &quot;logFees&quot;,&#13;&#10;             &quot;logTotalClaim&quot;)&#13;&#10;&#13;&#10;  tweedie.final &lt;- h2o.glm(xvars, &quot;NonNegPaid&quot;, completed.claims.dat,&#13;&#10;                           key = &quot;tweedie.final&quot;, family = &quot;tweedie&quot;,&#13;&#10;                           tweedie.p = 1.75, alpha = 0, lambda = 12,&#13;&#10;                           variable_importances = TRUE)&#13;&#10;&#13;&#10;  tweedie.vi &lt;- sort(abs(tweedie.final@model$normalized_coefficients), decreasing = TRUE)&#13;&#10;  tweedie.vi &lt;- tweedie.vi[names(tweedie.vi) != &quot;Intercept&quot;]&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Job__&quot;)&#13;&#10;&#13;&#10;  completed.claims.dat$predicted &lt;-&#13;&#10;    h2o.predict(tweedie.final,  completed.claims.dat)&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Predict_&quot;)&#13;&#10;&#13;&#10;  library(tweedie)&#13;&#10;  completed.claims.dat$deviance &lt;-&#13;&#10;    tweedie.dev(y  = completed.claims.dat$NonNegPaid,&#13;&#10;                mu = completed.claims.dat$predicted,&#13;&#10;                power = 1.75)&#13;&#10;&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    completed.claims.dat[!is.na(completed.claims.dat$deviance), ]&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    h2o.assign(claims.tweediedev.dat, &quot;claims.tweediedev.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  devAggrFun &lt;- function(x)&#13;&#10;  {&#13;&#10;    cbind(N = nrow(x),&#13;&#10;          SumTotalPaid = sum(x$TotalPaid),&#13;&#10;          SumPredicted = sum(x$predicted),&#13;&#10;          MinDeviance  = min(x$deviance),&#13;&#10;          MeanDeviance = mean(x$deviance),&#13;&#10;          MaxDeviance  = max(x$deviance))&#13;&#10;  }&#13;&#10;  h2o.addFunction(h2oHandle, devAggrFun)&#13;&#10;&#13;&#10;  devAggr &lt;-&#13;&#10;    as.data.frame(ddply(claims.tweediedev.dat,&#13;&#10;                        c(&quot;MonthlyDate&quot;, &quot;StateName&quot;, &quot;LossCode&quot;),&#13;&#10;                        devAggrFun))&#13;&#10;  devAggr[[1L]] &lt;-&#13;&#10;    as.Date(as.character(devAggr[[1L]]), &quot;%m/%d/%Y&quot;)&#13;&#10;  devAggr[[4L]] &lt;- as.integer(devAggr[[4L]])&#13;&#10;  colnames(devAggr)[-(1:3)] &lt;-&#13;&#10;    c(&quot;N&quot;, &quot;SumTotalPaid&quot;, &quot;SumPredicted&quot;,&#13;&#10;      &quot;MinDeviance&quot;, &quot;MeanDeviance&quot;, &quot;MaxDeviance&quot;)&#13;&#10;  print(head(devAggr, 10))&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;}&#13;&#10;&#13;&#10;TRUE&#13;&#10;&apos;,&#13;&#10;[Parameters].[Parameter 2], [Parameters].[Parameter 1], [Parameters].[Parameter 3], [Parameters].[Parameter 4])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Loss Code' datatype='string' name='[LossCode]' role='dimension' type='nominal'>
            </column>
            <column caption='Number of Completed Claims' datatype='integer' name='[Max Deviance (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_INT(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_integer_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;N&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Claim Date' datatype='date' name='[MonthlyDate]' role='dimension' type='ordinal'>
            </column>
            <column caption='Max Deviance' datatype='real' name='[Number of Claims Filed (copy) 1 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MaxDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Mean Deviance' datatype='real' name='[Number of Claims Filed (copy) 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MeanDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='State Name' datatype='string' name='[StateName]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column-instance column='[LossCode]' derivation='Attribute' name='[attr:LossCode:nk]' pivot='key' type='nominal' />
            <column-instance column='[MonthlyDate]' derivation='MY' name='[my:MonthlyDate:ok]' pivot='key' type='ordinal' />
            <column-instance column='[LossCode]' derivation='None' name='[none:LossCode:nk]' pivot='key' type='nominal' />
            <column-instance column='[StateName]' derivation='None' name='[none:StateName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1010902082708389]' derivation='User' name='[usr:Calculation_1010902082708389:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Max Deviance (copy)]' derivation='User' name='[usr:Max Deviance (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Number of Claims Filed (copy) 1 1]' derivation='User' name='[usr:Number of Claims Filed (copy) 1 1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Number of Claims Filed (copy) 1]' derivation='User' name='[usr:Number of Claims Filed (copy) 1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41885.651995601853].[Action (Loss Code)]'>
            <groupfilter function='member' level='[LossCode]' member='&quot;dep&quot;' user:ui-action-filter='[Action2]' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.41885.651995601853].[my:MonthlyDate:ok]'>
            <groupfilter function='member' level='[my:MonthlyDate:ok]' member='201005' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.41885.651995601853].[none:LossCode:nk]'>
            <groupfilter function='level-members' level='[none:LossCode:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.41885.651995601853].[my:MonthlyDate:ok]</column>
            <column>[textscan.41885.651995601853].[none:LossCode:nk]</column>
            <column>[textscan.41885.651995601853].[Action (Loss Code)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' max='156.0' min='0.0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[textscan.41885.651995601853].[my:MonthlyDate:ok]' value='Claim Date'>
              <formatted-text>
                <run>Claim Date</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' />
              <lod column='[textscan.41885.651995601853].[none:StateName:nk]' />
              <tooltip column='[textscan.41885.651995601853].[attr:LossCode:nk]' />
              <lod column='[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]' />
              <tooltip column='[textscan.41885.651995601853].[usr:Max Deviance (copy):qk]' />
              <tooltip column='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1:qk]' />
              <geometry column='[textscan.41885.651995601853].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[textscan.41885.651995601853].[Latitude (generated)]</rows>
        <cols>[textscan.41885.651995601853].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Payments by Loss Code'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>[textscan.41885.651995601853].[my:MonthlyDate:ok]</run>
            <run fontsize='13'>&gt;</run>
            <run fontsize='13'>Æ </run>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>Sheet Name</run>
            <run fontsize='13'>&gt;</run>
            <run fontsize='13'> for </run>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>[textscan.41885.651995601853].[attr:StateName:nk]</run>
            <run fontsize='13'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='claims_metadata' name='textscan.41885.651995601853' />
          </datasources>
          <datasource-dependencies datasource='textscan.41885.651995601853'>
            <column caption='Loss Code' datatype='string' name='[LossCode]' role='dimension' type='nominal'>
            </column>
            <column caption='Actual Payout' datatype='real' name='[Mean Deviance (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;SumTotalPaid&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Claim Date' datatype='date' name='[MonthlyDate]' role='dimension' type='ordinal'>
            </column>
            <column caption='State Name' datatype='string' name='[StateName]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column caption='Predicted Payout' datatype='real' name='[Sum Total Paid (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;SumPredicted&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[StateName]' derivation='Attribute' name='[attr:StateName:nk]' pivot='key' type='nominal' />
            <column-instance column='[MonthlyDate]' derivation='MY' name='[my:MonthlyDate:ok]' pivot='key' type='ordinal' />
            <column-instance column='[LossCode]' derivation='None' name='[none:LossCode:nk]' pivot='key' type='nominal' />
            <column-instance column='[StateName]' derivation='None' name='[none:StateName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Mean Deviance (copy)]' derivation='User' name='[usr:Mean Deviance (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Sum Total Paid (copy)]' derivation='User' name='[usr:Sum Total Paid (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41885.651995601853].[Action (State Name)]'>
            <groupfilter function='member' level='[StateName]' member='&quot;Wisconsin&quot;' user:ui-action-filter='[Action1]' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.41885.651995601853].[my:MonthlyDate:ok]'>
            <groupfilter function='member' level='[my:MonthlyDate:ok]' member='201005' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.41885.651995601853].[none:StateName:nk]'>
            <groupfilter function='level-members' level='[none:StateName:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.41885.651995601853].[my:MonthlyDate:ok]</column>
            <column>[textscan.41885.651995601853].[none:StateName:nk]</column>
            <column>[textscan.41885.651995601853].[Action (State Name)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]' scope='rows' value='false' />
            <encoding attr='space' class='0' field='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='title' class='0' field='[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]' scope='rows' value='Payment ($)' />
            <format attr='subtitle' class='0' field='[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[textscan.41885.651995601853].[:Measure Names]' value='Total Payments'>
              <formatted-text>
                <run>Total Payments</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[textscan.41885.651995601853].[:Measure Names]' />
              <tooltip column='[textscan.41885.651995601853].[attr:StateName:nk]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[textscan.41885.651995601853].[:Measure Names]' />
              <tooltip column='[textscan.41885.651995601853].[attr:StateName:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[textscan.41885.651995601853].[:Measure Names]' />
              <tooltip column='[textscan.41885.651995601853].[attr:StateName:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([textscan.41885.651995601853].[usr:Mean Deviance (copy):qk] + [textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk])</rows>
        <cols>[textscan.41885.651995601853].[none:LossCode:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Variable Importance'>
      <table>
        <view>
          <datasources>
            <datasource caption='claims_coefficients' name='textscan.41886.636795671293' />
            <datasource name='Parameters' />
            <datasource caption='claims_metadata' name='textscan.41885.651995601853' />
          </datasources>
          <datasource-dependencies datasource='textscan.41885.651995601853'>
            <column caption='H2O Initialization' datatype='boolean' name='[Calculation_1010902082708389]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_BOOL(&#13;&#10;&apos;&#13;&#10;myh2oCleaner &lt;- function(pattern = &quot;Last.value.&quot;)&#13;&#10;{&#13;&#10;  keys &lt;- h2o.ls(h2oHandle, pattern = pattern)$Key&#13;&#10;  if (!is.null(keys))&#13;&#10;    h2o.rm(h2oHandle, keys)&#13;&#10;  invisible(keys)&#13;&#10;}&#13;&#10;&#13;&#10;if (!exists(&quot;h2oHandle&quot;, globalenv()))&#13;&#10;{&#13;&#10;  library(h2o)&#13;&#10;  h2oHandle &lt;- h2o.init(ip = .arg1, port = .arg2, max_mem_size = .arg3)&#13;&#10;}&#13;&#10;&#13;&#10;if (length(h2o.ls(h2oHandle, pattern = &quot;claims.dat&quot;)) == 0L)&#13;&#10;{&#13;&#10;  claims.dat &lt;- h2o.importFile(h2oHandle, path = .arg4, key = &quot;claims.dat&quot;)&#13;&#10;&#13;&#10;  # Create indicator variables for claim payout percentages&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$ClaimPaidRatio &lt;- claims.dat$TotalPaid / claims.dat$TotalClaim)&#13;&#10;  )&#13;&#10;&#13;&#10;  payoutThreshold &lt;- 1&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$HighClaimPaid &lt;- claims.dat$ClaimPaidRatio &gt; payoutThreshold)&#13;&#10;  )&#13;&#10;&#13;&#10;  # Create log transformed variables&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logDeduct &lt;- log(claims.dat$Deduct + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logFees &lt;- log(claims.dat$Fees + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalClaim &lt;- log(claims.dat$TotalClaim + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$NonNegPaid &lt;- ifelse(claims.dat$TotalPaid &lt; 0,&#13;&#10;                                             0, claims.dat$TotalPaid))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalPaid &lt;- log(claims.dat$NonNegPaid + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  # Convert some numeric columns to factor&#13;&#10;  for (j in c(&quot;CallCenterPostalCode&quot;))&#13;&#10;    claims.dat[[j]] &lt;- as.factor(claims.dat[[j]])&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  # Limit analysis to &quot;Claim Complete&quot;&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    claims.dat[claims.dat$ResponseStatus == &quot;Claim Complete&quot;, ]&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    h2o.assign(completed.claims.dat, &quot;completed.claims.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  xvars &lt;- c(&quot;CallCenterPostalCode&quot;, &quot;Demographics_AgeGroup&quot;,&#13;&#10;             &quot;Demographics_Gender&quot;, &quot;FirstClaim&quot;, &quot;INStype&quot;,&#13;&#10;             &quot;LossCode&quot;, &quot;MonthlyDate&quot;, &quot;SourceCode&quot;,&#13;&#10;             &quot;StateName&quot;, &quot;logDeduct&quot;, &quot;logFees&quot;,&#13;&#10;             &quot;logTotalClaim&quot;)&#13;&#10;&#13;&#10;  tweedie.final &lt;- h2o.glm(xvars, &quot;NonNegPaid&quot;, completed.claims.dat,&#13;&#10;                           key = &quot;tweedie.final&quot;, family = &quot;tweedie&quot;,&#13;&#10;                           tweedie.p = 1.75, alpha = 0, lambda = 12,&#13;&#10;                           variable_importances = TRUE)&#13;&#10;&#13;&#10;  tweedie.vi &lt;- sort(abs(tweedie.final@model$normalized_coefficients), decreasing = TRUE)&#13;&#10;  tweedie.vi &lt;- tweedie.vi[names(tweedie.vi) != &quot;Intercept&quot;]&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Job__&quot;)&#13;&#10;&#13;&#10;  completed.claims.dat$predicted &lt;-&#13;&#10;    h2o.predict(tweedie.final,  completed.claims.dat)&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Predict_&quot;)&#13;&#10;&#13;&#10;  library(tweedie)&#13;&#10;  completed.claims.dat$deviance &lt;-&#13;&#10;    tweedie.dev(y  = completed.claims.dat$NonNegPaid,&#13;&#10;                mu = completed.claims.dat$predicted,&#13;&#10;                power = 1.75)&#13;&#10;&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    completed.claims.dat[!is.na(completed.claims.dat$deviance), ]&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    h2o.assign(claims.tweediedev.dat, &quot;claims.tweediedev.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  devAggrFun &lt;- function(x)&#13;&#10;  {&#13;&#10;    cbind(N = nrow(x),&#13;&#10;          SumTotalPaid = sum(x$TotalPaid),&#13;&#10;          SumPredicted = sum(x$predicted),&#13;&#10;          MinDeviance  = min(x$deviance),&#13;&#10;          MeanDeviance = mean(x$deviance),&#13;&#10;          MaxDeviance  = max(x$deviance))&#13;&#10;  }&#13;&#10;  h2o.addFunction(h2oHandle, devAggrFun)&#13;&#10;&#13;&#10;  devAggr &lt;-&#13;&#10;    as.data.frame(ddply(claims.tweediedev.dat,&#13;&#10;                        c(&quot;MonthlyDate&quot;, &quot;StateName&quot;, &quot;LossCode&quot;),&#13;&#10;                        devAggrFun))&#13;&#10;  devAggr[[1L]] &lt;-&#13;&#10;    as.Date(as.character(devAggr[[1L]]), &quot;%m/%d/%Y&quot;)&#13;&#10;  devAggr[[4L]] &lt;- as.integer(devAggr[[4L]])&#13;&#10;  colnames(devAggr)[-(1:3)] &lt;-&#13;&#10;    c(&quot;N&quot;, &quot;SumTotalPaid&quot;, &quot;SumPredicted&quot;,&#13;&#10;      &quot;MinDeviance&quot;, &quot;MeanDeviance&quot;, &quot;MaxDeviance&quot;)&#13;&#10;  print(head(devAggr, 10))&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;}&#13;&#10;&#13;&#10;TRUE&#13;&#10;&apos;,&#13;&#10;[Parameters].[Parameter 2], [Parameters].[Parameter 1], [Parameters].[Parameter 3], [Parameters].[Parameter 4])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_1010902082708389]' derivation='User' name='[usr:Calculation_1010902082708389:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='textscan.41886.636795671293'>
            <column caption='Coefficient Name' datatype='string' name='[Coefficients]' role='dimension' type='nominal'>
            </column>
            <column caption='Normalized Value' datatype='real' name='[Number of Claims Filed (copy) 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;tweedie.vi[.arg1]&#13;&#10;&apos;,&#13;&#10;MAX([Coefficients]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Coefficients]' derivation='None' name='[none:Coefficients:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Claims Filed (copy) 1]' derivation='User' name='[usr:Number of Claims Filed (copy) 1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <sort class='natural' column='[textscan.41886.636795671293].[none:Coefficients:nk]' direction='ASC' />
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[textscan.41886.636795671293].[usr:Number of Claims Filed (copy) 1:qk]</rows>
        <cols>[textscan.41886.636795671293].[none:Coefficients:nk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Predicted vs Actual'>
      <style>
      </style>
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='84000' x='0' y='0'>
              <zone h='50000' id='16' name='Maximum Deviance' show-title='true' w='84000' x='0' y='0'>
              </zone>
              <zone h='50000' id='24' name='Payments by Loss Code' show-title='true' w='84000' x='0' y='50000'>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='14' is-fixed='true' type='layout-basic' w='16000' x='84000' y='0'>
              <zone h='100000' id='27' type='layout-basic' w='16000' x='84000' y='0'>
                <zone h='58125' id='15' param='vert' type='layout-flow' w='16000' x='84000' y='0'>
                  <zone h='7375' id='17' mode='dropdown' name='Maximum Deviance' param='[textscan.41885.651995601853].[my:MonthlyDate:ok]' show-all='false' type='filter' w='16000' x='84000' y='0'>
                  </zone>
                  <zone fixed-size='133' h='17625' id='19' is-fixed='true' name='Maximum Deviance' pane-specification-id='0' param='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' type='color' w='16000' x='84000' y='7375'>
                  </zone>
                  <zone h='6375' id='20' mode='type_in' param='[Parameters].[Parameter 4]' type='paramctrl' w='16000' x='84000' y='25000'>
                  </zone>
                  <zone h='6375' id='21' mode='type_in' param='[Parameters].[Parameter 2]' type='paramctrl' w='16000' x='84000' y='31375'>
                  </zone>
                  <zone h='6375' id='22' mode='type_in' param='[Parameters].[Parameter 3]' type='paramctrl' w='16000' x='84000' y='37750'>
                  </zone>
                  <zone fixed-size='76' h='10500' id='23' is-fixed='true' mode='type_in' param='[Parameters].[Parameter 1]' type='paramctrl' w='16000' x='84000' y='44125'>
                  </zone>
                </zone>
                <zone h='41875' id='28' param='vert' type='layout-flow' w='16000' x='84000' y='58125'>
                  <zone h='8250' id='26' name='Payments by Loss Code' pane-specification-id='1' param='[textscan.41885.651995601853].[:Measure Names]' type='color' w='16000' x='84000' y='58125'>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='dashboard' maximized='1' name='Predicted vs Actual'>
      <zones>
        <zone name='Maximum Deviance'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Payments by Loss Code'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='dropdown' name='Maximum Deviance' param='[textscan.41885.651995601853].[my:MonthlyDate:ok]' show-all='false' type='filter' />
        <zone name='Maximum Deviance' pane-specification-id='0' param='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' type='color' />
        <zone mode='type_in' name='' param='[Parameters].[Parameter 4]' type='paramctrl' />
        <zone mode='type_in' name='' param='[Parameters].[Parameter 2]' type='paramctrl' />
        <zone mode='type_in' name='' param='[Parameters].[Parameter 3]' type='paramctrl' />
        <zone mode='type_in' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone name='Payments by Loss Code' pane-specification-id='1' param='[textscan.41885.651995601853].[:Measure Names]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Variable Importance'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]</field>
          <field>[textscan.41886.636795671293].[none:Coefficients:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window class='hidden-worksheet' name='Maximum Deviance'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[textscan.41885.651995601853].[my:MonthlyDate:ok]' show-all='false' type='filter' />
            <card mode='dropdown' param='[textscan.41885.651995601853].[none:LossCode:nk]' show-all='false' type='filter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[textscan.41885.651995601853].[attr:LossCode:nk]</field>
          <field>[textscan.41885.651995601853].[my:MonthlyDate:ok]</field>
          <field>[textscan.41885.651995601853].[none:LossCode:nk]</field>
          <field>[textscan.41885.651995601853].[none:Region:nk]</field>
          <field>[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]</field>
          <field>[textscan.41885.651995601853].[yr:MonthlyDate:ok]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
      </selection-collection>
    </window>
    <window class='hidden-worksheet' name='Payments by Loss Code'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[textscan.41885.651995601853].[my:MonthlyDate:ok]' show-all='false' type='filter' />
            <card mode='dropdown' param='[textscan.41885.651995601853].[none:StateName:nk]' show-all='false' type='filter' />
            <card pane-specification-id='1' param='[textscan.41885.651995601853].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[textscan.41885.651995601853].[my:MonthlyDate:ok]</field>
          <field>[textscan.41885.651995601853].[none:LossCode:nk]</field>
          <field>[textscan.41885.651995601853].[none:StateName:nk]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
      </selection-collection>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Predicted vs Actual' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9d5gkR33w/+me6clhZ3Pevdvdi5IuK57CKZ0QIIQwIAMGg0myjV9jghP4
      J2zD+xqwDTY4EYRkUAIhCeUsneIpXI6bb3OcnHum+/fHXPfOzM5suLu9O0nzeR49p+1QXd1T
      36pvqipBVVWVEiXepYhnugIlSpxJSgJQ4l2NLgCpRAR/OIYix/AGo0VvCPmnCMWSJ/zAqfFh
      Dh46RDASn/O60dHRE36GIsd47KEHGPNGil4TCXiZ8ocWVa6qKvR2HWV4bKrg+aGeQ4zO8cz5
      zpc4/RhuvfXWWwF6973C07uHsEYH2HFwnJYqK739gzjLPAwPHsPlLqO//xhH97xK0lyNHJ5i
      eGSMlJzAF4xhlVQmfBGQI0QSaabHRxkeGyeVjBMIJ3A57QA8ff//EhQreO6RX9O0agPE/Rwb
      mcJhMTDpj2A3QU/fMZ55/iXWrlzGkc4eTDYHibCP8ckpwjEZl8OOb3KMwdEpPJ4yhgd6iMoC
      DrsVgBceuYe+iJ1LN6+it6sTwWQjFQswNDxKTFZxOWx07d7B3uE4q1rrAJWB3m4SihGrWaSz
      swu7q4zp0UFCCQXn8XLv/Om/k7ZWMjkxwbLmBr1sq1liZLCP5554GGvdaoxJH1P+KGUuh/6h
      s8+bUgHGvSHcViPdvf1MeQOUl3sQhNP745cAo/Y/fb29HO6KI3kVxuIORLWDfTuf55mdh7i0
      zcTd99zLis1XIkyOIDUnufcnP+aiLeexfySFMXiMa65/Lzs7vWysTjBpbmTHA7/hgg3t9ARN
      JMe6+NzXv0W5JfOs1o7VNJm8vPbyi/R197K+zcOB7lq6Dxzgqk3NjAt19B/rx2gQ6es6yF33
      P857tzRx2GfB37ub93zwJh57didbz9/ArhcP0uUz4eu9jxs+9SUay61EIhHsjiae+PUvUGvX
      sv++33HpBat4ozfMB667ctZHePPZB+kK2Zno/A3tK9oY8ClciczPf/Eb3v/BD1BXVQ4pPwM+
      Ix/fegEAj93zM73s91y9hZ1H/RCPM9azl53DU3jwMXHxDWxZ1cjRt55jx+HM+enBI7zc1U+9
      NU5v/TKe3XmIK8+tYVfnML//3ktPz69eQkdXgXqHfJzfUca44kFM+Ljvrjtp7FhJwOtl+cpz
      6e/uYe3qNsrKygCwuso5Z2U7dU3LaKp2EY6lABXNqeQoq2TNiuU0tLRRX2Ehksh98OjoKJKa
      ZNLnYzom0lBTw/oWB/c8f5SrL92CVRJ5+anfETVWoibDACxfsZqmagdHj3bTvnYD52/ZyFB/
      H9MTo1Q2tCIoKQDKy8tpaGhgaGiSLRddgMekEE3DqrXraG2snfURhoaGWLfpApqrHbScdzkV
      qpd9x0J87KYrefqZF1AADFbUZJi0CpFIJKfsIz39nLvpfJrrqxke6Mfnm0Z0VOIwZbr0gf6Z
      86OD/fh8XtLmMtwWAxXVdVywcR0Tk5On+KctsRB0Fair7xjXXXEh1vJmrMkA7rpaBoensNrt
      TA728NFPfYYdz+2gub4Ce0UjseA0K9paCKdNuKQUzas30LtvJ2PTflo7VpOOxehY1kBCsGEV
      YjR2nIfdBFPjI+w/eAiDu4kbrr+SwNgAqTRsungrK5c3INkq6WitZ2BggDWrOujs6gJBoqOj
      Fau7BkMyyJrzt9H55vPsP9LLZduu4FhfH/byWs5ftwqAoHcSk6uG9WtaePyRR/G0rqGj1olg
      q6ChOiPA0aCX3Xv30dfTxYaLLueV5x5HsdWxqt5Kz9Akre3tDHQdwVlZx3lrVyIIRqpcAo89
      9QLdQxNcffn5etnXXLKF5556HF8wyiVXvYfI1AgY7Wzdej4GASorK/XzF195HXHvKIpo4sKN
      q3josWeY8oW4dvt2PE7bGWsI71aEUhzgzBGf6OY/freLv/jsR850Vd61lASgxLsa3Qj2+/1I
      kjTnxclkElEUUVV13mvfCaRSKdLpNGazGQBZlkmn04iiSDqdBkAQBFQ1Y/to36YY2rWpVAqj
      0VjwnPb/QE5ZqqrqxxVFQRQXH8JRFAWDwYDFYkFRFFKpFCaTCYB0Ok0ymdTrof2bTqcxGo2z
      3iu7Ptn1z36PQhgMBv2Z2cRiMQBEUUQURVKp1Jxlzfe9tG8siiIGgwFZlguWo/8KkiRht9tn
      XaAVmkwmMRqNSJJ0Qh//7UgymSQWi2G1WhFFEUVRiMfjyLKc87Gzf4x8IchuJFoDkSSJRCKB
      JEkYDAb9nHZ/oXIFQdDL0oRwsaTTaSRJwmQyYTAY9MYtCAKKouD3+3PqnEwm9caa/fzsxp/d
      8DW0uhX6DpIkoSgKRqMRq9Wqv0s8Hp8l4Iqi5Dw3G+2ZhYRQE57s9y72veb8ilovoVXcbDa/
      axo/gMlkQhRFkslM4E8URaxWq95oNLIb6UI1SrPZrH9bjez7F1LOYrRXRVFm1TUSiejvJghC
      TsOVZTmnp9ZGufxeV2ukC0UbddLptD4iaZ1C/rsV+sb5FPpegiAgy7L+bhqRSGTWN5/VmrUL
      tAIlScr5OO82HI5MMCv7h7dYLJjNZr0H13qi/N46v2HkHzMYDCQSM/7h/B9Ta7SFGpjW8OZq
      GNnntN8vlUoRDAZ1FS4ajeplWSyWnOdl1zf7nfJ73WLvV+h6rVN1OBz6aFlIpc4fcYq9Y6Hv
      pY0u2c/VRgVtxNW/S36hmm76bm702QiCoPdYGtl6rHa80I9USG/OFhKj0YjRaNSFIL+xiKKY
      0wgK9cCFnplvOxS6T1N7VFXVhUDT9fMblnZtMbKfkf/sQtclEgni8ZlUmFQqpdcl/9rs+uaT
      3/EU+l7RaFS3ZTTbQpZl/T/jrFJLzEIzzLLJbizZP0R+D5htsBbSWw0Gg64DWyyWWWVkl6X9
      O1/DyL8uf7TQVAS32008HieRSCDLMi6XC0mSdIMxuzFpvXUhnTufuXps7f5oNIooikiSpAsF
      MO/3KlRmoY5aEATdeZFMJlFVVR/hsil18SeBzWbL0YXze8JCxmGhRqOpH5rOWqgX1jgR3Thf
      eLSeMRQK6UKnqirJZFJvJPm9eXa589kp2ceze/bsxqwoCrFYjEQigc/ny/kW2r/ZgjCXvZP/
      7fMxmUw575VNSQBOEFVVURRFV4W0UWKhPXQhCvW+cz2/EAvR1TUURcnxkGQ31Gx1opg+Xqx3
      1srLLyf7fs2VHIlEZo2khd5zrpFuvm81l61UEoATRFEUwuEwqVQKs9k8q6fXftCFemq0H1LT
      Uwvp0sVGg0I931w9eDaJRAKn06n/rdk0+V6jYg2xmMqWf28h/T77vYvVeT4Vb77nFqpr9nNK
      NsAJYjAYcDgcRKNR3aDTDGYtoASFG8hcP6rRaMxx32WPKHN5g/J1/Px7s92V+d4RzfOnvUe+
      8BZzdWrXaf78RCJRdOTL1tXnGr0KPavY98rX/bMbt8FgQJKkHJe1dk4bfVKpVEkATgYtoBQK
      hXQ9VBRFXQhg9o+kUWiE0P7WgkDZLrtivXmxxpLd+LV/DQYDqVQqJ1inqiqRSCSnTE1tsdvt
      xGKxHA9Qfi+qRZZTqZRuyBYSxHyK1ftEvlehsp1OZ060XZZlYrEYkiTpMS0oqUAnjTYSaI0m
      Ho8jiiJ2u32WzzmfQkO1pgbN5V7VrsvXrbNdm9o1hVSN/HLyr4VM0EiWZSwWS869+W5HRVF0
      L1KhcgsZzfOpTMWOFXMu5KP1/Nn3S5KEzWYjFovh9/uJxWKoqloaAU4FRqMRt9ut2wSxWAyT
      yYTP52NsfIRkKg4F2rEK6D+jImAwGmlqbEFV1ZweFXJ79GKh/dmNOMy0LzN9U3uO5mZUVRUE
      AbIak5ySEQ2Z/49FEyTl5TTUN86pl2sjiBY1z/fn59c9u/HOZSPkfKe8DkI7li8ERqMRh8Oh
      e7kSiYR+r8ViwWaz4fF4SCaTpNPpkgCcSrRhNxaLEY1GkWWZcDjE0GQ3DetUBLF4j5VOKSgT
      dtKKiN2+Ri9vPrJ7/UI5SGPjIzR0FApgacfUnH+P9PRR0ZxxF4rxNP3eCcZ9ddilcuRUko62
      VTnlQ2YUsFgsOW7GZDKpB6C0Y/O9Q/6x7ChxsVEqG5PJhM1mIxqNzkqBgIx9o0WHNfUHSkbw
      KcdisfD4c7+ltrwVu91JcCpOVcKI2Vr8UyuKmhkNsozZ/J4y23+e3wPPl4W6UFRlpgyTxYCp
      HmCCaHwE0SDy0p5umqvWYJFsiGJm1HO5XPgDfvBDTU0NoihiNpuJRmcvrFBIj9e8XtkUMugL
      lZN93mQyEQwGi347h8NRsKySAJxiBEHAWS2gVHcxFUuRNPiYHrFT3+YqfpOqYhAFLBYTkWgE
      u80+ywOj/ZCFIrL5zz9RjIK54HGTJdNMaldBMLofn6wix9J4DwusX3kJk9OTXHLRVnw+H5Ik
      4XK5cLvdKIpCKBSaZThne4S0OheKM+SPBIWuh0xioZbolp2yYjab9VyuYsZ1SQCWgCpbOzHD
      EWwOEy3nlBXU//NRVJXyKgfDx3roWH6ufjy/p8seAQqpBzkNZZH1dtodJONBvcEXwmKTSEYE
      mqybuOaGlYiiyGqgq/cwHncVFouFqakpHA6HnjCYnT4+l/GeHynPF5Ls/882bmVZpv9YLxXl
      VYiimBOhD4VCGAwGPB5PznvoXrtFfqMSC6C+ehnesYxr0VFmoqxqdg5KDlkt1V4eZ2T0WE7D
      zg+yZTeAYm5BVVVRFqkWGUSRZCI15zWxgEq7+wqWNXUgiiKJRILXDzzNyHQv5Z5yTCYTlZWV
      pFIpvF5vzmSaYqNTId9/IaO4kLdMVVVGRoaJKH30j73OsfE3SCZnnAeiKBac0AMZD15pBFgC
      KisqCb6RprwWJNPcrtAMMz++w2nBL4/T259kWUtHUc9JPvk9rNZAFoPVbsYbSBc9PzLgZWjA
      zyP+r3PNyo/jKjfhl/vx1FiIJWO8tPd3bF55Lf6Al9HpPsKRIG0N63RDuVBdi9U/m/wYQbZK
      lUqlGPd30tye6eHDwRiBYJDqqhmjXJZlEokE6XRaHx20MksCsAQIgoCakBjvD1PZaMNgnLsh
      igYBOUt3LSu3MhmLzmr080V4Z7HIEcDhsKJOFlecJqYm2R96Hgzwm67/R5NpDW0N7TgrqvDU
      WIEQL3ffiWQWsXokjA6FPcMPY083sXHtVn02mKarayqbJEm6IawF7PIppOoJgsDo6AhllVnX
      CxljPt9OSqVSGAwGAoEAiqLoNkpJAJaIFW0duKtUDvd0U9lswT8Zw+42EfTGIWnEiIl0UtN1
      BdJyHEVREY+7S9Opmal8+T15flpDMb95WlHo6RxBFARUVTNFVITjI45K5qCiqghkzgejcSoa
      Zy/PEvTFODpyELS2JqgMygcZ7DuI+YiHxrJlXHLxBkRBJO414VHbsBjK6Ol/nuoONz293Wzc
      sIlkMondnjHyQ6GQHkDTAlfatNP8rNRiapQvMEl9x0x9M6GN3MavBeu0GX2CIOgpICUBWEJE
      UaTKWUVkOEZteSPRYJzlNQ1YLLMnhY+N+EgmklisGU9MWg1zqPN1zll1Yc51+a7SfPJ7yLYV
      9QuubyyWIDEULHguHIoSVn2zTwiQsPjojvko31XLhWuuZ9m57UgmiUOHD9C0zkQyOU1dxXom
      JyfxeDz6OzgcDsLhcI7nRnOjZkeWFUXBarXmvG8qlWJwaBDMXqBMP26zWxgY7qa2NrMAmsFg
      0MtLpVI5aR+CIJQEYKmQU0nATHWtB8jop+6y2YsOaCQTst74ARpaXUTCcbzeacrLK4BMQyg2
      M6tQtHSxWK1mLGLhOooYwVDcQBYESCUlJqbGOXfNenbteZ3h0H6ql5uAIEdHX+aqTb9PIBDA
      7XYDM40zO2agCbA2FXdkdBhvcBRBFEklU1jMZkBgenqaeHqa9VuW5dVDwFWhMuUdZ1lLOwaD
      gVgsNivDVssHKgnAEpFKx4HCfvV8fN4wTtdstcPusDDQc4CkvIJoNIwvMMmm9RcXDQ5p/86o
      R4uvd7GItcNtxpGuJmycKHjekLIwER7kExu+yPjEGD5pP+66GdUtRUy3WSATmTUYDEVHMUEQ
      6Bvoxm88gKM5M184cCxKc2tb5n4liTFuydXz5TTJZIpUwoSn2oPRaNR1fsioWWazWU/bgFIy
      3JKgqiqCWHwObT7pVJpkovCS803LPWAdprI5TnmtqgeW8v/L9pTkxw4WW/dCONwWbtp+A43S
      6oJxjbQxjtNjxel0Mubtx1Fmyol+l1ubiUTCCIJAIpEgFosRCoV0lUR7B7PZjNPp5NhQNwHT
      ARyemcnySjrzTUcGp/F4nBilGePX740QHHVjTrVx4Yb3UFVZSzwe141ts9mM2+3GYrHk2FQl
      AVgCgsEgljlSH/KpqHKRKOJ/FwQBm92s/38hN2GhDMkTTo2Y4zbJZODqbVupMrQWPL+6YQsA
      Udmbczw0nSIVhx2H7pqVXq0ZptrqGrIs4/f7MZus2Fx53/B43VKygtvjwGAwEI/JeEegzr2R
      LZsvZEXHTL6SNt/abDZjsxVed7WkAi0BYxPDuD2O+S/MQlhA3FbzcGR7RPLTCrI5ERnwTURR
      5CyvCjPeIy1e4THUMan059eOloqVABixkj3+OSuMKMooZaqZ0dGRnBlokiQRCAQYnOgGUcZu
      LiOVkpmSO7HnCXpcPj7f4HjhgiAgR2xsXndZwdHOZDLpq8MVoyQAS0AoMkG5+8RzcuZirrTh
      bLQks8G+SQThuKtTc5keb8uCIGR85qgoaQVJMlJd46Z5efWcdZgIjdKZv4GPOhOoqnQ2M64O
      5kWwBVAhLczMHdB66HQ6zXTyCJ46MyGGACjmLhg6NoWcTBMMRImG46xZtmpOVW++YGBJAJYA
      i8UBLG77pYWgNeJ833+x/HuDwUD9srkbc/b9cjLFgX198wrAlvPW4Z0Mo5jimZQLFFBnplQq
      auFo8lSfyrplzXrOfiQSIRwO0ze6H2fl/GvNSqIJt9uB3ZYiGolRWVl+0mvUlgRgCbBbyjh0
      eC8GSTw+XGsemkyUUkgbMZmMqMz0ygFvhERiZplCVVVJyWkkk1HX78OhGFVrZwzcQvOBTwQ9
      pdgs0dRcTSgYLeiV0jCZJa6+4iImp/zUN1Xox5PeTMMfDR5BqsztlWPhFGuarqCysopgMBNr
      6B/spnt0FwarDKHjClbWbaqi4vRYKKvKpC/EQym805l7Q4E4y9prCQb9xOMJ6urqTujdSwKw
      BNTVNnLEn8RRMbt3SqfSqJM2mlqr5i2n5+gYTcsqmZ6IUtvowjs1M6oUyg/KD4KJeS5NbcXk
      dDqdsyhvth1RVVPG4YN9rFxbXACSiRRjIz7Ka3LtnJGpTqbeOsZUcBjBd1ywp2N4qmwYBQtj
      9n4S8TgpMcpodC8+X5Bl6yqKPCXDYJcXm8uM2WLEU+GkpS0zOu3ccZR9bw1itwZZ1XFuSQDO
      JkwmEym5SMCKhbsnBQEkyYh/Io27PIkoCoyOjhIKBWcyPbOMYvG4Xz1TvsrU1BRJMaEfc7kt
      OJx2fXlAzWWaPcUyM7LMPZqMDnupa/FgNObm7MhKnLJalebamUY92DVNY3v58b+GmIz3Y7IY
      cdkl/LnOooK4y60EBxWwhAlPiPQmowRDITavu5rmphYikQiKUjyBbz5KArAEDI8OYS8r/mkX
      oq7o3h4BGpbbEAQo8zhI2PyAH1GAg52dVLVaZ9QGNatsQcC6AmRmRofhYyY6VllzUom13l+W
      Zd0VaZIkBvom9RFEVVUUJbMQmCQZSSZlDIbZxmXh98oV9uy5BunU/N8h4k2xelUzr714BMki
      YTALXLjyMhrqmwAKLne4GEoCsAQk5Mi8GaALQeuVnWUzEWWzZUatMkoiknkh6dYZksbMCGEy
      mXIaa/YSLIIgUF3rYTDQR1mNBdTc6LBvPEqFp7bgKFbI4zKXsCup+b+RzWNkeiLIqrbzuGDj
      7B0+T5aSACwB7a2rGd/bi1peeLPvk5i1eFKMDk+DqiKZJD3ukD0bK4OKqoIp6WZqyEtVU66e
      7ygzkwwU3m1lMYZ4LCxjSpczPZgkEs5EgxMJGYtF0kenaDiJ2+mkeZUT2eecp8QToyQAS4Rd
      qiRMAQHI61HnZJ7LFuv4qax20bK8BsjdySZ/mRVRFEmnVA4d888qQzIbCAp+/F4zZeW5wlHo
      vQrVMTSZxmNYwTkXZaK2O998gerKBgZHe7EIKVavbWagd4rekREsHgfxkEB78+rFvewCKaVC
      LBFVZfXI8RlDWM/VMYgEIwuLEajzGKOLdX3me36yF8eVZVkfCWRZxmyRsCruguW4qswMT4ww
      OR7IOZ7f/gPTUVJ+I4NHAsSjMpFAgvB0Go+6hmUNa3QX7sZ1FzEVGaDy3Ah4QnR3DTJ0zEtr
      WzVuWz31Zev1ye2nmpIALBEN9U1UqRtIp3Pns4qigKNR5dCRnnnLmM9btFhVSmAm316baGM2
      m/XlDbX93/StkeYQMHuFESkrGS0lp5GRj9+WcX9akh4u3LqW9WvXIEXcCCE7xmgNy1ra9fcb
      mxjhjaNP4FgWQDQIGCSB6fEwZrMJWU4zMjpIdfXszc1PFSUBWEJWLd+Ar9tEYCKRc9woiZS1
      iBw62k06VTxrdL4GPt/SiwVK1GdeaYvHalMQtf+0XRVh7sUszDYjw6MTpOTjwa8hL35vhNGe
      ID1v+jDE7DQ2Z2IdoihQW19OfUMlFa7MBB1t9BkO76W8La0Lu91twtGawmQzQ9pOQ+2ywhU4
      RZRsgCXEaDSyZfVVvNZzH+68uQGCKOBpNXKws5NVbW2YzIVC+qfWCJhPoPIzSucagYySSFW7
      RF/vCG0dDYT8cbZeuHHOnR0lk5GB6UOoioBkNDE40YmlOUb2e6qqSlmVFa9PIRwPcfXlNyzq
      HRdLSQCWmJqaWionmkinpwr6zqvaLHQN9tLeuAxz3lTJ0bFJ0kISQcwEp0RB0POBAKYnwqRF
      bTL5TJYkefNi5biC1WImEUhyrG9Mb28CAiqZechqVgxBQEAQwTsdwLm8eERYEARC0SB9hydo
      ac2oKXMln/V0D6F4QgwrLyMqYFsmkS/kgiCQiKVIxmXOP++KJd+nriQAS4zRaKS1fCO9qSco
      prGUN5npGztGc2UTNvtMYMdWKeBuLq7mhGUL9a1lRc9rdO2axGY0YXNDKB5GEMAkSbpHqBhe
      f4CpvuN7BmgH1eMpF6hY3SK+yShlTZUMHpsgEAgjCgIIGZsgnVb0qHI8lkBWE5iTRsamphFs
      aURRQDSIOcKrG/ZG6Onvormpdd73OxlKAnAaqK9voOeACyojRa9x10ocGz1Gk9KMKIp09Qzg
      qF7YlMr5MNky6ko20wOxee+zWMys6OgoqM7EY0le2bmbjuWtLO9YmJE6MjzFwOQIak0Ck9NA
      RqyObwV7/BqBzGF/t0LfZB/bLl1Q0SdMyQg+DUiSxMbl20kE5u5vyurMDE4PEA5FsZYLuCuK
      qx+QaT4LTasodO9819jsZiLhwoJisZqocFYsKKnP6w3y5qFDHAweRK4OYXbOY7wL4GiGurby
      WfsOnGpKI8BposxdTlvwUnpjT2OyFm8AZXVm/FOTREMpymuKryIBGb1/IYl1+VmhwCwJKFSO
      0Xh8qcTjQdhsu8LvC6Oi4pvOzFGORRJYHebMpJe0giynEBCQTAZ6BodQrDI1ZdUY48f3VybF
      gHcEg0nAXiHlpkGrKpbxRlaft+mk0rwXQkkATiN11Y307qsk6Pdjq0xjlAoPwM5KE5FQIhMI
      m7ORLywQUKgNiSboOTrKso6aooZmOq1izMo1yk6/Hjo2wXmbZlyU/b3jVNTMpCskEzJT40Gq
      6t1U1bsJh2KEfHGals+MGG3VLaTTCkeH+4iVZaLOxqiD1WWXUH9BM3U1C1/T6EQpCcBpxGw2
      01G7hVA4hCSqDEztw1QRKdrA55rve/yCBT23UC9aXmclnVLo7OkllQQJCyaTEbfHTiIuE4sk
      MEpGypyzn9/fM0ZdU3nOsWQiV1UxmSXi8ZljDmfmeT5vGM/xFAqbI2Pwb3Kt4bV9+4iT5H0b
      P0llxfxq1amiJACnmaamZj3lwGxw4Q0P45MOIJmzlvJLK5nJ3AXcpidCMQEzGEVqlmV6bVVR
      iYSSBOQ4FpeRshojo70+Ij0x1q1fkXPf1ESAlvaqWWVBrpok5j3X7bEzPREk4I/kLBKWiMtc
      vuYmmhqWNuhViJIAnAGSyWRmgSbJxPrVF/HGgTgJ80xqRDqtoqSXVvfNRxAFHO5cr1N9m5vB
      wwH6ezJJffouNnMk881nk1RUu+jvGsfusGA0GpCTKdRYBU2rTn/jh5IAnBG0SRza+pWNlSs4
      2D+NJNogbSARkUnRi6rOE709DWnVkmSguS13knzAH0ZOppBMMzsxyvLsdY1sDjOxaBKrLTfA
      19BawfDAFBUV5TiMraxatTSZnhpz7U9QEoCzgLraBhz27TmbuyWTm+gf7CKQHka0h3BVWGfd
      pyrHPS7HF9XyT8aOe3cykVzImAnZEej8dId5EdW8+QKZVaezV2VTFBWLdfaCv+rxVafzkSQj
      sqxQV7aB6qqlS3TLptg7lwTgLCF7c22j0Yjdbsfh2EAisYZgMMCxwUNEGUc0zfS0YX+CoUMR
      1jRenllt2RzDa9iHq6r4z7rY5RLLG6wMD07R1JIZBfy+MB6PI8cjVKxIOZnGbC28bElT7eoz
      3vihJABnDWazOWcVY23rUS1D0+2+WF/nXt8hpUrFaDTq6cuCIFAeKKdrdEfOwrQng8lsZDIW
      AjICEI1knj/YP0k8lmRZRy1Go4F0WmF8xI+cTOkLbgX8UcqrnPrSjhpT40E6ajeckvqdLCUB
      OIuwWq3HVzlQ9EZuMpmIx+N62rK2xmWxAJHL6eYc07XsH3qKssZTYySYDDMNuL5xZsWHqYlA
      ZoEsBcYHI9iccaprPRhEkfIqB83LRPq7xzIp34KAyWxgfNSP02nF0HB2NL2zo1sZzp0AACAA
      SURBVBYlgJntPgFkWdbXtjQYDDmbSEDuwljZaJNc7GojMAxkhCXsT6ACdqdpwRP2VVVFTioY
      BBPpVBqD0UAykcJkzjQbu8PKYKfM9qvfx4Xnqfh8PlwuFwaDgYGhXgLRLpwuByYqMdiC2Bwm
      GluqARWvb4qKirnXBDodlATgLMPpdOpLBlqtViRJwmKxEA6H9Wuy9wjL/htmtk9qa17D3v4x
      nPVJosEUbfarMBol+scOoNZMFI1CayiKSv/rMmvXrKOqtYFEMk7YP03QH8fsDuHySESCSSzm
      mWVWKisr9fuXtXQwPu7E1ejCarXR23+EhNx/3HgWCCfGgZWn/PstFkE9/uUikQh2+9y5JyVO
      LfnelezjwWAQRVFwuVwoiqKrRjB7XzBNGPJXigPoG+hCNCq0NqzSz7115FlcrbN3ctfOK4pK
      2utiU8d27PbZc3GnpqcIBn04nW6mp8doqF+Ws+JzMfbsfx1blR9BEAj4orTXXU6Ze/507qWk
      JABnGdkrNQSDQURRxOVykU6n9c0xYPYWo/kjQrFyBUFgYmKcofSLOMpyjdN0WqH3NZk1HRvY
      uH7zCW+1VIy+vh4S5m7dLZvweThn1eZT+ozFUkqHPgvRli7U5s2mUikkScLhcOSMGNnbImXv
      DJN/HnKFoqqqGnOkNSfarCgqA3uSvO+a32PThi2nvPED+ALTBH0z6dWxxOxlV043JQE4y9C8
      PYlEQm+E0WhUX9FN22I0f1uk/O1EofAWo9rfq5dvxNc/YwJGg0na6tbj8eQmuZ1KGupaMEgz
      alpKCOTYNmeCkgCchWT8/jP7WWk2gCYEZWVleuPP3m5IGwkKbZmkoRmsoihSZmnU991KRlXK
      3J4lfa+amhrCkyYURWViJEwyDkPD/QD6Xl753q6lpiQAZymCIGC323G73UiSRDKZzNlUWlso
      ShOQfBug2MoM2SNEW/MqwkMOwv4E9jIjSTkx6/pTzar2DQR9SWoanNQ1OwtuprHUs8CyKSgA
      Sz0Lp8TCEUVRd04kk8kcd2d2T1+ssecfz96qVJIkNq28kuXWqzAHVuB0Lb0TpKamFo+ljXAw
      QTqlYDU79N1sILNekbZ20emgoADMNUGjxOlH+z2SyaSuIlgsFn10yO/xs4UjP1iWbxgLgkBZ
      mYcVy9fS3Hh6UpLbl69GDtnpPjhFTc3MxhbZG4GnUsU35T6VlNygZxmFem0tLpBOp7FYLNhs
      Nv2aVCpFKBSaZQsUWuAqf8TQc4rUzD66S7X+Zv77HRs4RnVVFSDkpHYEAgFcLldOfZd6XaCS
      ALxNUBSFeDxOMpnEYDDkBJ6yA2fFjN/sxp49UmhGs81mw2qdnXK9FBSrYzKZRBAEJEmapW0s
      hVsWTpERXFKNlh5RFLHZbFgsFpLJZM7cAS1YpqH9HlqDkmU5RyXS/s3uXZeqgRWiUBAP0Bfn
      1dDqupScEmtjoQZYiZPHYrHoKdPZiKKI0+nUo8WqqjIwMIDL5SIQCOjCo12bTmcWpK2oqNBd
      o0uJLMukUind3am5Yk0mU87uNPn/ry3fvlTtacneutT4lw6Hw4HZPHvVOEmSctRYbedEbV6B
      FllWVZVUKqXbDSeqa+cH3gqhqWfBYFCPY6TTaRKJBNFolEAgQCKR2Tw7PwageYe0ESvbSD5V
      nBZ/09DwEP3Huth68bbT8bh3Laqq6l4hTa/Pt+vyG6z2t7aF6mJYSCenbb5ns9lQFAWTyaTv
      Yp9KpUgmk3o0WLtO358g6znZS8Fro9epGLVOixGcrW8e7TqIQTTS3LRs1ouWODm0/X+j0Six
      WO6ShrlTGGeySbW4gMViWbQXKJ1Ok06ndfVG8+EX27kxHo/rI1e2Ia7dr+00b7FYsFqtsxp4
      djZs/nudKGfEC6QoCs88+xRl5U5WtK3BfYZTYt9pRCIREolMVFdrNPmNSVNfso+73e4Fb7qR
      3XNnC5UkSTkG+ULQUiAikYiuommz4TT1DTICZLFYTql6fcbcoKqqMjg4gMlkorKy6rRG/97J
      KIpCIBDQA2BzLQmSb1gaDIYcP/xcxGKxgqOM3W4/oZE9Ow08EAjkjFiSJOF0OpfErjzjcYA3
      9jyNgsz61VcWNOxKLJ5wOKzPI873/c+HFmibj2AwOCtaazabF92G8uumZcFq9U4kEtjtdkRR
      JJFIkEgkMBqNxGIxJEnCZDLpdsWJcMa7XVE0IgCJZLwkAAtgIY05P3dooY1fa3DaxnnFkGVZ
      T1jLHmUWqj5lq1/5dctvA9mjiclkQpZlYrEYU1NTVFZW6oa0zWbTd7pfDGd8BIhEIjmh/RLF
      mUudKYQ2i2wxrkNFUZAkSTdmNfep5rUxGAyz5ien02mSySQVFRWYzeYT/i21EUWLEcCMfZBK
      pXRh83q9JJNJ3dbIFsCysjJUVWV0dASj0YjbXYbJZMpJFc+u3xkfAUrpF7OZK5d/MWgpE4lE
      gmQyOStfqNBcYs1FqTVqg8Ggxwyyr9NckalUimAwiNvtPqnGD+iGsBb11np/rQ5anT0eD9PT
      07qAatdp1wQCfvZ3voDNbiYekljZvo6mpmb9GqPROJM6fqZHgBKnj1QqRTgczskZmktFKpaP
      4/V6dVUlEolQVVWlR5pPNitgrl0m899lLpUnnU7ro1mhGXHafQsaAUppDe8MMiqBm2QySTwe
      L5pynN9gso9pq9O53W59tNCuLdZGFtN2FmrMzuc11PY9zn9+/soZC3paqfG/cxAEAbPZjNvt
      pqysrOCor0VZtaiydkyLyNbV1eH1enOuzzZWT0cS28mgvUsqlTrzNkCJM4fWS2reFW01CkmS
      9EhsOp0mHA7rmaU+ny/H3anp06FQSF/HVGtcWi5PoajumSB/2qgoiiUboMT8qKpKOBxmcnIS
      t9udoxHIskw4HJ51PBtNMBYbIV5qZFkujQAl5kcQBBwOB8FgEMg1jv1+v74kYrarESAUCuk2
      gsViWbJo7okiSVJpBCixcFRVJRKJ6BNsAoGA7m3RVqrQ1jQKh8NIkoTb7QYyqtLZJgBwFsQB
      Srx90EYCIMfFqAlENBollUphMpkoLy/P8biYTKZZGan5/3+6UVW1JAAlTgxtBhqgT7SxWq2M
      j48XzCUqlsJ8pkeEkgCUOGm01AWDwUBVVZU+XznfhbqQ4NtC0PJ/tJXztJlkWpkL9Tipqlpa
      Ga7EqUMURRwOhx5ws1gsORPeswXiREkmk/h8Pvx+v/53PB7X3a/Z0d5sY71YXEI3gv1+P5JU
      eEOzEiUWgzaHVzOIYXaW52LR5gPLskwikaCsLDOJSotdADkT7BeKLgAlSrwbKalAJd7VlASg
      xLsaXQBSiQj+cAxFjuENFt4/KpvA9ATdfYOogJJKcPTIERKpTL55OhnFH8rMFx0bOsbYpE+/
      L+id4ODBQ0z5Qqf4VXJJx0Ps3n+06PlkLMTohLfo+cKoDB/rpffYMIX0xunRfnqHJgveuevV
      59l9qKdoyUHvJL5QlGQ0RDieIhyYZtrrY3R8apF1nME7OUYiVdJw58Jw66233grQu+8Vnt49
      hDU6wI6D47RUWentH8RZVsbI8DBut5uBgYHjkT2F5599lpGevYwlXbz46L3Y3S4efepV1rSU
      8Z3vfAdr7UrwHuXpN3vZ+8pTtJ57PnaTgV07HuXwWIJXn/gNde3nMnysF4PJRmBqDLPDjXd8
      iEg0zuTkJMFIlInRYSyOMoxCis7OTix2N2HfFJNTk8RkCI4c4Wf3PsGKFe2MDfUhmOxYTBJJ
      7yB3/O55aqsqcVqNTPjCOEwCQ+Ne3E4708cO8vCrXWxc2w7A+PAAvnACt8NKT9dRjBYHYf8E
      U/4oblcm+PPcg3dyZCpNyDvJ8vZlDPV2k1CM2G0WJseGeG3H0/gFDzUOgWMjU5SXlyEAkwMH
      ue03z/P+916Lf2IEXziB0yzS2z/AdCBMhcdNcKSTB186QnL0AAdGkxx76ykCaYnDPcO01Lgy
      5XnceCdGGB73Ul7m4lhvF7JgQkzFGB2bwBuM4HHZ6evpRDBZefGJ3+Gub8c/Oc7o+CSecg/i
      WRaJPdPoAvDWy8/yxtExlMgko94Im9cu56Vnn+DF/UN0v7WDtlXLufuB57hw8zpAoH3FSna/
      8jyNa9az56293HzzzTzz5MNcevmVmNUIir2OwQOvsHbr+7AnRghL1TRWuRjqOYRPNhPzjXHe
      lovp2f8md9z7O6pMEUbiDp558F7MYoxXD43w/P13Ud5QzaPP7aL7rRewVdTw69/8DsXfS9c0
      PPvQfSzvaGZv1yiNtjj3PvUG1RXl1FZXkop4eXbnIcoFL7v7p9nx3A6qLTH2jyRYtayeiHeU
      o6NRNq5tZ7jzTX777B6GD+9kcHSUF946SlW5m9v/5z+xltfS1toEwN33P8IXPvNJOtqXs+vZ
      B9kzGGXn0w/idDt44IlXsApxkCw89fSL2NJT7B2KsXp5A8Gxfnb3TdLqgYd37Gf48E7SooGf
      3/0I685ZTXVlOXZPJc889iiBSISgz8vYVIgrNi7n5YPD7N3xCCnRilkI8evHXqHK46J334t0
      TcGLj92HzWLgsZf3M3LwFfyRKI/u2EV1hYfOXS/TtHIN//Gft1NlibFnMMqatsYz19rOQnQV
      qHfIx/kdZYwrHsSEj/vuupPGjpUEvF62nr+W//nv29l00Vb9xv4DrzKYqmZDWz2QRlWTGCUb
      ktmC4XgvY7fbiUajRKMx3K6sbTQFkY9/7ktMHtzBcNSIVU2ybuvlvPLY3UgVy7GI0LJ8BTUV
      1Wy6YD3xUIj+Y8cY7Oujra0NBVix+lyqHUaMVhfu8mrWbN7KRSsqePH1ffpjyqvruGDTesa9
      UZqcKe5/bg+XXLBu1kcYGx6iY+061nQ0Y61qZ12jhVd2HeUTH7+ZV597iuDxdWhtBpVwIjNt
      b2hoiHWbLqC52sHBQ520rdlAW0sj/vFhJn0+pmMi9RWZkcPjKcflqSLsHdefMz7hpbG1jbUr
      245/E4nlVRKKq4VqcwRn4yo8x119H/34Jzi0+1XefGs/q87bzJbNGxgZGmLDlouo95jwR9M0
      LmunvbUOa3XH8e9wgLKyTPZleVUd69auwu8PnHSDeaehR4JdNfVcfekFHJ4UmDy8E6PTRk/v
      MDVVbs7Zcgk/ufsZtpyjbaCg8MKLr1Jhr+bF1/dz3WWbuOOOu7nm/TdmyvJUITusrLxiO/c+
      +DhWdxOrGlz6ubXLOqj0uJAbWkl3vY7H4yFtqsGhBNl8ySU4wt2kJDsNzc0YRRPNTXWct7Wd
      3Z2jrOhoQQwoOKwm6pqaKa9rwRJ/iVdeeZURf5K21kyDEk1WTKkA9z31Oh+4/kaEyUP87ImD
      VNoyr2yyOohOvsG9997L5gsu5PDzzzIiSLznKhdP9agsb26gp6eH5uUdHN8YnY985Cbuu+uX
      iAYT11x9A088+VskWwsfeu9WfnXnfUyqKc656CpsxteQ5RTL22fq0lRXzXkXrueeex9gRJD4
      wPZNRN/szfkxLrxkK16xlnKllYDUgGhK0FRXTW9PDzUNzWy9cjtPPfIwdw52c9X1N/LYI3di
      rlzNquYquv0SZXINSjpE9/HvYIuB1WymuakOk9VBXfXp2XTi7cSC4gC7XnmO4bDI+6+9fMkq
      Mtp/lEdf2M2nPnkzxiVQUx+59xfUnLONzWtaTn3hJd62lAJhJd7VlOIAJd7VlATgrCDCwYP9
      Rc9OT3vZvXsXx0ZmYgL9Bw8SOQ01e6dTUoHOCgK8+uoQ7bXwxpEBBIMRJCeJiSOsufB6nGUG
      6twVTA8c4vUDx0gZLKgBP4ZyE5NTSf7w5g+e6Rd421KaD3BWYCQSnCToqcRqsVHT0IjX62PZ
      mnXI8TCSXMau3buxSiJWqxWXpwKvkqaivobmhtJ6qidDaQQo8a5GHwEikYVplCeylU6JEmcr
      ix4BotHogtaPL1Hi7UDJC1TiXU1JAEq8q0geO4Y8MaH/XRKAEu8qJr7/zwzd8sfEj3YCJQEo
      8S4i5fWiRKM0/ujfGfvWt4i88srcRvCet3ZS1dCGf3oUWVZZv/68khFc4m2L9/Y7EN0uym68
      kXQoxPBXvjr3CBCPx5mYmOCNZx9GdNfqa7CUKPF2JPjkk7iuvRYAg9NJ049/NLcAVFZUIhpE
      tlx5A/L0ANLxjYtLlHi7ET98GFNLC2KW9iJI0typEO2r1i55xUqUOB34f3s/ZTfNzpkqGcEl
      3vGoskx83z6smzbxvSeOcser/fq5Uk5DiXc8oeefx3755Yz44+w65sNkFDmn3s3GFk9pBCjx
      zifwwIOU3fgB/uWpTr5y7Qr++SPr+PuHDzEdSZRGgBLvbFJTU6jJBD2ig3BilM2t5QB8472r
      +eq9e0vJcCXe2UzfdhvGikq+6qvj69etpKNmZnmen73UV1KBSryDUVVCTz3NofaNeOymnMYP
      8JlLWksCUOLtQWzffhK9vfNfmH3PwUOYli/n314a5MvXdMw6LwhCSQBKnP2En3+e73/7dm5/
      fWhR9wXuv5/XVlzEuiY3dW5rwWvmFAA1Fae7b5DBwUH6+/sX9fASJU4F/gcewHvX3byxeTtP
      d/vmv+E4SjJJeN9+fhl2c8vl7UWvm1MAurp6GRkdYsfj9xFWrMiyXMoFKnHamP7Zz4m8/DKD
      X76V89c04KmrZqjI8vP5hJ97jsfKVrB9bS1uW/Gtv+YUgEQiSiAQorHjHMb6DmOUpFIuUIkl
      R1VVxr/7PeTxMer/6Z+4Z/coN29p5vq11TxyaGL+AoCJx57kyZYL+NTFrXNeN2cc4Nz1mzl3
      /YLrrRMem8DqcWM4yY3RSpx9pNIKclrFalrcZnQLRU2lGP3mNzG1tlL5+c/ji8lMhxO0Vzuo
      NcOnf/oqX7h27hy1dCjE3YMpPvHxdVikuet5yo1gNZnkqz9+knteLr4bSom3J6qq8pe/3c+3
      Hz28ZM+Y/unPMHesoPILXwBB4P5dw3xwYwMADreDCjFF/2R4zjJ8zzzHq2sv56bj983FKReA
      0dvuYMRRyd07jyGnlZMqK/zii6R8Czd8SiwtP3ymC+fLz7JnVyfKEiwnpSaThJ57lvJP/kHm
      b1Xl0f2jXH9unX7Ne1eU8/D+0TnLeWjvMO+7ch2SYf7mfUoFIDkwwJMPvcS1W9q4rtHMb94c
      POGy1FSKsX/8NlM//vEprGGJEyHl9XLnPc9z9MkX+dJ5btq7drF7wH/KnxN49DFc125HOL7u
      1J5BPytrndhMM5r6FWtqefatvuJ1nfZyf8DGxy5oXtAzc2yAwPQ4Xb0DGEwW1p6zFtMCJEhD
      VVXGv/0dXjv/er5+bh0VTSIf/9VuPrSpCZNx8XIWeuppym68kdj+fcQ7O7GsWLHoMkrMT6Kn
      h8BDD2GsqkaqqcZYffy/ykqSg4N4f/ELXtrdz+Pv/Tw//fanMElGrjn8bZ44OMamFs8pq4eq
      qvh//Wua/vM/9GN3vzHIJy7I3c/B2dpMzdTTdI2HZkV2AXa81c2mKzbjti5s0/eclukNRqmr
      9lDmKScWmX+nyGyCjzwKrcuYrm5keZUDd0cbV8sj/PoERwH/r39N2Yd/j5qvf52J73636Fb3
      JU6ceGcnI3/zt9g2bMRY7iE5NEzw8SeY+P4/M/DZzzL5gx8yfuFV3P2eL/CjT56PScr0lxdu
      aue1t7pP6W8Sff11LKtXY3BldhIKJ1L0TUY4p8Gde6EgcH17GQ/tK6wG3X7Ay6cvXvgmKDkj
      wL43X0a0lBGRBW6+6b0LLiQdDOL93zs4+rX/x2XBmW14PnZBC595bBcf3ry4USDe2Ymhohxj
      ZSVUVmJZtYrQ44/jes97FlxGibmJHz7M2K3fovEH/4pUV1fwmolgnFv/9y1+/LENuLJ6VNeV
      26h/8MccHr2cNfWuU1If7x3/S81ffl3/+6G9I7xvXR2FNrW8bE09P32hmy9f3YGQdUHnsB+b
      zUpzpWPBz81ples2XcT267ZzzaWbF7WP78S//CuVX7yFx7v9vDfLYKm89iou73yJu98YWHBZ
      AL5f3YnnYx+fKeeWW5j+xe0osdiiyilRmNj+A4x96+9p+LcfYqipJZJIMRVOMOiN0jkeYu+g
      n9d6p/nTu3bzDzeeQ4MnN41Aqq7mqmqRxw+OzfssVVVRlbmdIYn+fgRRxNQ8o7c/uGeEG9cX
      9uI4t2yioXsvh0aDOcd/9soxPn3u4tSynBGgqbGBI0ePYHNXsqxptn5ViNievaR9PkxbL2X4
      ZztZXjUjfaLFws3r67jlsV18dEsTZuP8vuN0KESipwfb+pndHEW7nfKPf4zpn/yEqj/7s4W+
      W4ks9g35+YeHD0EsRmp8HOmSLyI80Iso9GGRDFhNBqx5/35t+0rOzVdBjnPp+lb+eE8ff3HN
      3LbZQ0+8xYH9vfz1n38QQSqsl/vuuIPyT35S//vIWJD6MkvOqJONaDLxnmYbD+0dZW19pn6T
      oQTdr+1m8z9+dCGfQydHAEb6OxmZ9FOuGFjWVMfU2BCSoxLSCVRVpez4tp0aairF+Pe+R8M/
      f5/nuia5bEXVrAdUf/gmLv8//8Rdr2/kD+eJykEmgansgzcyEojzrYcOsaXVw2cuWYbr/e9n
      4NOfITk0hKmxtNftYlAUle88epjvtKeRbruNxn//N4zl5SdVZvlV23D99e30TW1lWaW94DVy
      MsVP90zR0tzOr378az7+ZzcjiLmqcDoQIN7ZRe03N+nH7n59kJu3NM35/IvPaeR/3jiKet1K
      BEHgjlf7ubkORGvhpLdi5NSmqbkJJZXGbM6kOyhKmj179vLKc4/TOzw16+bAAw/i2r4dqbaW
      R/eN5qg/Gubly7mpRuW+5w8Sl9NzVkZVFIKPPsYz9ev50l27ueWK5STTCn/w8530TUWo/tpX
      mfju9xb1giXg7jcHOe/wq5hu/wlNP/7RSTd+AFNzM1e6kjx+oLgadM/Oft57bi3f/8g6HjE2
      sOO/fgV5hrPvnnvxfPQjaMp+Qk6zb8jPlta56+i67FJaD+5kz6CfWDLNs8+8xbWbWhf9HrMs
      03RaxXhcVTHb3YiqTCKZJBQMzFoYy33D+/H8wSdIyGmG/bEc9Sebqptu5Orendy5c25bYPTN
      vfydcwuHpxP86rMXsL7Jwx9f0c7f33AO33jgALdPWcDlJvzyy4t+0XcjSjRK/y/v4e4n9vLZ
      i1to+tlPMeSN4ifDtvOaeH5fYS9fXE5zzwtH+OTWNsxGA//+qQv53oSTw7+4S79GlWVCTz+N
      67rrgEyaxfeeOMr159blGLeFkKqrudYt89DeUe7bNcSV/W/gvOTiRb9DrgCIBrzBMOl4JtSc
      jIY5Z/0mtm2/gfNWLpu1MJZgMiEIAjuKqD8azmuu4T3+Izy4e4g3+r0MTEeJJXNHg6cPj/O5
      B7u55asf4xvvW5OTw9FW7eCXf3QBJoPIn7suYuePf4GaOns2fU5NLixD8XShRCJM/eQnDHz6
      M/zrrmm+8tELqf7whxBNplP6nKptl2F4ayejgdnOidtf6edDLWas7owtWek0893PX8lf7o4x
      eu99AAQffxzn1VchSBI9k2E+8bOdNJbb+MzWZbPKK8QF57bw+uuH+fWzB7lpleeE3i83Gc5o
      Rg2NM+qtZS1QVafp2nPrVffvHuZvrl9d9LwgSZRffRVfUgd5ubsmfxQkkUoj9vfxg/ReOlZ+
      uGAZoijwma3LuHpNDd/8jQvPszvZeO0l873fkpPo66P/wx9h2YMPYGqYP/fkhJ6RSi/IgQAQ
      27+f6Z/fhnPbNo79f/+K/cgUl8/ROZ0M5pUruc4a4oHdI9xyRZt+fMgX5YWn3uDnf7ot5/o1
      9S7+8s8+wF//4G7+IXwHyo7nsH77n/ju40eIJNN854PnFtUiCuHefi1b/vo/sYhQ87efOrGX
      ULOJT6sP/O5x9Uh3v1qMSCSS87c3nFA/+bOdRa/XSAUCav8n/qDo+aGvfk2NHTkybzmqqqo7
      e6fVv/zKj1VFURZ0/VIy8IUvqhP//iN16rbblqb86Yh683+/uuDrB//kT9XEwIAajsvqjT96
      SY3E5SWpl8boT3+ufvC7j+cc+/O7dqkv/NedRe957si4evOnv6fe+VffVz/wo5fU13qmTvj5
      fR+9We27+fdV9QTbQq4KlEqRTC8uuvfEoTGuXVsz73UGlwvzihUM3vLHTP3P/xB5bSfp4/uS
      paanSU1PYVm5ckHP3NTi4YCpgsirry6qrqeayMsvY6ytpfyTf0DkpVNvl6iqyrceOki1y8xk
      KDHv9fLwCKqSxtTUxA+f6eKzly7HZl7alW88V23Dved1+qYyv+WRsSCTTz3LRe+/vOg9V6ys
      5rrP/h77t1zLL//oAi5YXnHCz7duWI9961YKRswWQO7XMTlobaggEY+TVlQM4vyFPnFgjO9/
      eN281wHUfvMbpKanie3bR+S115j+6U9RYjFUOUnFpz+94EobRIHzNq/hzUce5oqLF2/4nApU
      RWHyP/6Txh/+gL64iJROk45EMNgLuwRPhEf3j9FSYeeaNTU8vG+ET18yt27su+duPB+9ma6J
      EJ3jIf76PatOWV2KYW5tZZs9zuMHxrjlijb+5Ykj/HGzilRfP+d9801UWSiVX/yinjx3IuR5
      gQREUcRuMzM6Nv/MG18kiaKqVDgWPvHFWFGBc9s2qv/8/9D805/Q8r93UP/d7+Lcvn1RFb/u
      nFqeODqNPDp3auxSEXjgARxbt3JnZ5jf+69X6G5aTfQUjkihuMxPXuzly9uW07z3ZZ48OD7n
      9UoiQXTn69gv3co/PnyYb7x3zbyelFPFtnVNPL9vgF0DPtJPPs7G37v+tDwXwOB2I55Ep5Mr
      AEqcrp4BRsenaayfX6158tA4166pPeGHAwiiiLm1dVaAZD4uaqvgwLL1+O6996SefyIosRi+
      u+/hl00Xc2g0yL1fuIhfCs2EX9hxyp7xvSeO8seXLSPwzb8h9fDvcPomI0KRlwAAEYdJREFU
      ODZdfCvb0OOP49x+Lc91TtFR7aC9euHG5MmieYNu/e1ePu8OYFm75rQ9+2TJaXXTvgCNdTW4
      ygqHv/O5uK1Cn61zupEMIh1bzuHA06+iynLR69RUiuG/+Arh5184Zc+e/sXt/Kj6QuIGE//3
      pnNZUePEtqKDQ/t7TkmG5J5BPxOBGOfc+SOsmzdT+3ff5OKX7ud3e0aK3uP/7W8pu+kmbnu5
      j89dtvyk67AYzKtXs41pWl57irUf/cBpffbJkiMAvQNjmKxmzltVfBmJbJrKbTmTFU43162t
      5aXyDoJPPlX0mol//QGdrnpG7rqH6dtumxWJXCyJaS9/szvCig/fwF+9Z5WuZtxyRRu/sq8i
      cfToSZWfSit8+5FDfH7P/Zjb2yj/2McwtbRw9dY1PPNGd8Hqxw4cRGpsZF9Qpb7MSo3r9C5c
      IAgCN6yu4Muxg9gvu/S0PvtkyREAUUkRCQU5cDSzAtf4yAC+UJRAIIDff+pnAJ0sl62oYu/q
      iwjcd1/B88Enn2RqYITvlm3hL8/9fd7Y08vIN76Jmkye0PPicpo/+c1BrvrUjXzh8racc+c0
      uOHKa+h+88AJla1x28v9bH7xAZqW1VPxR3+kH6/7k1toHOnh0Ghg1j2+O+/E87GP8T87evn8
      pae399co+9CHqP7aV0+b3XGqyBGATRduZdu2bZyzMvMRLXY3B/bsKpoLdKaxSAZqm2oZNdiI
      d3bmnEv09eH9xe38+rKP89XtK/nvT23ht5s+wI8CHnq+cAspr3dRz1JVlVv+902uGtnDzZe0
      Fbzmi1d2cNvwiTeAYV+Mh37zLJ9cX03Vn/5JzjmDw8FHPrqN+1/uyjme9vuRh4cZrW5BJRM1
      PxOYOzpwbN16Rp59MsxpeQ71HmHF2vVFc4HOBravreH187bhu2smx0SJRhn9m79F/uo36A2l
      uHJVNdVOC//9B5tY/4cf4cuV23jmc38xS2jm4pH9o1Q+9ls++PHi3qotrRWMmNyMeedetaAQ
      qgq3PrCPr7aJ1H71KwX92pdctIbXDg4R655ZccN/328p+9BNZ7T3fzszpwBY7E7isXDRXKCz
      gW2ranjNUk+is4t0OIyqqoz+3d9R8bnP8oPDMb62fUZPFwSBj2xu4r/+9kP8avvn+L9/91Mm
      fvhvc648oabTjP7qbv77gTf5q29+cs65yYIAf7jKyc9eXdwEIIBH3uilNhnk0i/9YVE1wiAK
      XLhlBf9/e2caHNV1puGn91ZvaklNq1v7YhCLQCIIGUIEhgEhLzHYHi/jmfGPSZVJ+U8yNYVr
      amrKQ1LDzHhJSCVlbNckcSoO5dhxVRgnNoKw2MgsQuwgBNqF0K6W1Jt6v3d+EKS+3S0hUOy4
      pH5/dX19+txz+57vfOece773PfLmexOJJq5Dh/Cve4hboz6+8RfM0Z0vUOzatWvXVF+mZyzA
      bDKg1WpJSUlBBoRCIVRTJDb8NaBRyjlwtY81+WYUbS34L15EplTRsa6Gxl4XL6wtiPuNSati
      2zdyOWPI5XLbAHm/eYtASyvakkWSPWXf5cv07nyZnzt0bH12C6vK7745kKsK8+N9x3l4Qykp
      dyFlugNHdx+vfHyNPS9uQKOe/r9N06l5f/8pqlQuwoODyOQKfhW08egK+z2do0niNuaEQkz1
      UhunPUbW/Wgnqqwsct7ay/d/2cDr07yhlstkvFyzmBcHvfT9wzZKe67Rs/NlNIWFmJ99htEP
      PiQyPIzwb7u4cWKIV1bObLtXU1DAk64b/OpEJ/98l2wpgIjHww/fquX7LzyCQXf36FqabaLv
      wY0MvLcXjV6H8T9+SMPBW+ysmdkxkiSkmBP06JuXZnK004Vlxw6y/ue/OXBtkLJcM9nm6U+x
      ymUy3nh6Ba/W3sBbXkn+u7/EWFPD8NvvYKiqIudnP+WNC07+tWYx8nvY3ahZmMaRoxfwBqY/
      si0KAodeewextIxNi+/+4hFuT+MeWpbFtU1PoTCn8rvuEM9V5t1T+5KYxJxwgHS9GkEQEf+m
      GsFk5ufH23npocQ7NbEw69T8YNsy/uXDS4QFEf2DleT8ZA/GTRs52TaMXqOgLPfekkiM66t4
      pP8i++q7pi3X987/8qYvk1e+fW96zI+XZ3MkbSHWH+3hwNV+tpVPf+4miakxJxwAbkeBw02D
      vHe6i+0rszFqZ75OWZFj5uHlNl6tnXyJFRYEfnyomZ1b7/1AmW71aqoD3ey/0MuJ1sTbx+5j
      x/jZ4Ru88OwGLMZ7IxEutOgZdAXYV9/FYyvsM6IATCIx5sw/V73Uxkfnuvnkcu+MafGi8Xxl
      Pg5vYCLHdd/pm2wttbHgHjsngFyjQWNO5d1txfz+Qg/f++0FBl2T28eBjg7qX99Lz9a/5elV
      95fgX73MxpvHWnmu8t7vNYlJzIlFMIAtVUsgJLBjQ/F9jYgyGezevpx//EU9VqOG/7vYwwc7
      1t53ewzrq5Cdr+eNp5+goWOEl/ad55ElFh5tPILn8J94u+J5Xn+y7L7fnD5elkWaToXhSz7v
      P9cxp2RSR71BzDrVrF7Htw95eGLvSX763Eo2lNx/KmGot5eB117H8t3v4j54EFf9GT558AmO
      DguUly/Emm7gpY0zO3OVxJeHOeUAfyn0O/3YUmf/wu/miztQWq2YtlajX7MGmUpFn9PHvtM3
      +d7mhcm5+9cA0zpAV+Mp+sghNNQEmnSq1lbMCwdIYv5g2iEoPycHEehsuY7enPG1PAuURBKz
      wfRTIL+TbhcQcBEMBikqLsaXjABJzCEk1wBJzGskV2FJzGskHSCJeY2kAyQxr5F0gCTmNZIO
      kMS8RtIBkpjXmPYk1ZULDSj1FoSQh1BIpLx8xVfVriSS+EowbQTwhUTcY0M0HP0j8tTZUSAm
      kcTXEdM6QIpKhtG8gNWbHifkuElSqjqJuYaJN8Fe79TEq9EIBAJoNLeTRARBQP5nUtvk57n7
      +a99/S/zM3GSGXdBrELMHXg8nqR9jtqneuZzwT4tL1AiRHMCDQwMYDDc5qJRRwmUTWU/8unv
      aWwfoOSBAokd/AwMeDEYtFH2CJ8dqqXfGSDHbp2wu0b7uXqtjeHRMTKtlhnU4+eDX7/PhStX
      kGlM5NqtAAzdaqW5a5Axp5MFGekT5cPeEb5ouEjPgIPcbNuEPeIbw+GTof9zBtYde0PdYXpH
      vIQFEbPJMFl+3MFH+w/g8gvkZk22v/NGIz0jY7hcXtLTUifva6CLjw8dJYwG24K0Cbvb0Ufd
      qbMssGWhUSlRq9WM9HTScO0GHqcTjd6EVq2cKN/SeJ7jJ05jsmRj0msm7NHPJLr9TedPUnv4
      ODkLl6JTyROWv/PMb7a3cL25FafTidFsQadN/Myj+8ipzw5x9sINipYsJCXKfvnsSc43tlNU
      XIBmij4VXU/DiWNcvNJK/qLiiXram5q4ev0y589fl9Tv8zi5fKWRvsERsmxWST31dUdoueWg
      MC8blUo1u23Qs3WH+PAPh+Ps9XWH+cPBzyS2q+dO0etIRBko0tc3zNhYbPK4n46OPi6e+YJL
      Te0TVqVCzqnjh2lqi5XnDDIw4EKvj83hlWMw6rHl5hDxTaoZKmUiR/90gM5e6XVFUWSov4dY
      SeOu9hZ+sXcPH30qvS+7xYjLL6BUSEmwRCFCKBRPi6Igwo3Gy3jDMYLR4SDhBDLKoigy7nVT
      +0ktdw6ip2XaUYXGaW5uxjM+SfTrGuqh/nxjXB1e5whfHPmUV197jT6nlEpe1GjRiiHCgjSL
      rvXSKf5z9256xybrt2dlMTY2hkqlimNubLt0gn//wX8x6p285/amS7R2xwt7tDdd4tS5K/S0
      tRN7uP7s8Vp2795D7ITc4YgnFyhasgQN8dP31tYWjtV+zBcNl+J+09nZwY0r5zh17jaJ8awc
      IOxz4g3GL41lxKcklq5aS0muhYzMWDHtAA0nz9HefSvGriXXbuNbW7ZQtmSS81JnMpFmzsBm
      jdWVEjn6yR+pO3shxi5HiAQJhhSsLJ9UsjSZdKQtyMaSZpKUVhky+PamNRSXSEUeGupPY88t
      JNMipR+05S9irLeVmz3SBy1XajAadMhjZKa0ShnNfSP4RqQKPCqNDn2KBkVMlphSIcftclK5
      /iHu5KjJlBoURFAqVchiZaxkEAn6GI+SoXWNDiGoDBQVFqJRSsuHvONoUs2ooi7rdY7QNzpO
      eVkZOvXkFyqtHnu6gcbGRnxBQVKPoDGzfcNKPFE+n5ufh0wUCQYCcRsoVquVjMxMyT78mGMA
      dxDKypbF7c+nTKMAr9ZI5VGXl1dQUVFBQU68cLvdnkXBolLWrioFZukA1rwSbOb41EGf18Ng
      AvZlj9NBW4d05D5TdwJvwIMoj6UxiTAy3M/N3ljPjyAIiXJ+RbyjPiKK2FFXQKnUxAlXCOFI
      QgLasKuf+uZh8EtpyKs2VlNeVkZRnpSDZ//v3sc/Df+VIEivK1elsLlqHfmFUr2vgGsUTzA+
      BIQDAYypeoJRISkw7kajNxEOhxCj6jctyKaybCkpeh3qKFlVU9oClAoZJpWAJ0ZLxO/3Me5x
      c+zzugmbe8yBQp1CKBSK0yOQy+X4xoZwxQx8tgwjjT1uZL5JnlWVLo2liwpIs2USHZeLlpSR
      bTHFjdwjg/1odKaEkdNgMBCKROI6rFqjwjGcmOnb44mfcQwPS/vTrBzA5fES8I/H2UuWLMaU
      QLdJVOkx66S+XVlVhU6thYhUBfFM3XECKjVBT2ww1GIxp5KaHsuDqWXd5kpK8mITzVXUbNvC
      0mIpdaDSnMuz1RVYswskdrnWSGdzI4ND0hE6q7CEstLFZNukifJZWdkJBQrD3hH64liiAxyv
      O8HBj/dz6Xqb5BuZWotGkaAiGUQEOZooIRJRFEhNt7Jo0SIMOunoZzCa0OmMpETNz/Wp6ax4
      IIdulwJb6mQ9/V0tNHfdpoGpqvpWVPk0UvVawuEwjgQDWUp6FhaDdMp3q3eITL1I7ednJHbP
      uI/xEQeJNC5jR25zhhWdWkE4HI6LGCH/OBn27LjIIAoiK1dXxNntWXaMRhOxiI0ks3KA3IIH
      KMqL57UZ9YRIN0hvbuo1gJqaxx5m88b1Emtl1XrSDXr0cck3EdxOB70D8YzOS8pWszA/Nux5
      efft39LRI2Vpi7gHON/hRBGStkkMuBh2+xkZmZoxOhrf3LKN5595aiKk3sHJs1exxiXWi6Rl
      ZPPY9u2ULZZSmSuVKiIKOWJA2lUioSDjXi91Rz+f6ERafSoFBQUsW7aMVL30GuM+L93dnfh8
      UhGQ/hE3Ms8tht2TkcSWv5DlJYXodHqJIqjRbEGOiFEl8NnJBkk9brcLhBDBmClQQY6VDofA
      tmqpaue69ZvY+kg1sf9ERBBQq9WSyXK61Y4lPRWvcwwhprwn4OH6uStxjrRyzQbWVCwnlob4
      +tUrqBMMws6xUUmEmRWpzHDfTdyinhXLpfbiwlx8MerypavWEpJrb++9xkCjTZRhpubRJ55M
      aH/mn76TwD4VUsjLtpOZJV0zyLWpKCLtBEPSjqIw2vnO80+SYpyZTtpUcI8O4pXFUipqycm1
      ElSpkMfM9bUGIwq/H7XRKLGLoojWYOab69YzE4ouv89HhsWGWiWNJjlZNm4NOtHHzDQVCjmC
      EImb6hTlZ3OsoYmaLWskdr3BAKPSqO91jnDxehdFFjk+mbT9CqWKlAS9zOcbx+1ycbzuDJur
      KifvNxLEYM8mtkcU5pdgsinjHGkqbPu7xLK7NpsdZ1QfnJUD9Pfcwq22xNlzCxOzIgt+F27x
      q6bwvr2WCPZaKC2e5AsV/aOcudrBqohAUZ6U+dlknj3P/qNP/T1B1GhV0o7+wLLE56ncjkGC
      yPH7pPsiYjhEINH20BQI+P0ICV7Zd3XdxKBPiVsL6fUGQqISnUbazrbOLjLMBgwxA8GKinWs
      qJDWLYgCNms6Ld0OqnQzm1RsqkkspjfiHAeXj+buXhblTq63Ojs6cAXUBMqXzWggmA7Ra4P/
      ByyGJ891ALb8AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Variable Importance' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
