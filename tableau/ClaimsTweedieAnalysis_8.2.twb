<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0819.2015                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.3'>
      <aliases enabled='yes' />
      <column caption='H2O Port' datatype='integer' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
        <calculation class='tableau' formula='54321' />
      </column>
      <column caption='H2O IP' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
        <calculation class='tableau' formula='&quot;localhost&quot;' />
      </column>
      <column caption='H2O Max Mem Size' datatype='string' name='[Parameter 3]' param-domain-type='any' role='measure' type='nominal' value='&quot;4g&quot;'>
        <calculation class='tableau' formula='&quot;4g&quot;' />
      </column>
      <column caption='Claims Data File' datatype='string' name='[Parameter 4]' param-domain-type='any' role='measure' type='nominal' value='&quot;d:\\claimsdata.csv&quot;'>
        <calculation class='tableau' formula='&quot;d:\claimsdata.csv&quot;' />
      </column>
    </datasource>
    <datasource caption='claims_coefficients' inline='true' name='textscan.41886.636795671293' version='8.3'>
      <connection class='textscan' directory='D:/' filename='claims_coefficients.csv'>
        <relation name='claims_coefficients#csv' table='[claims_coefficients#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US'>
            <column datatype='string' name='Coefficients' ordinal='0' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Coefficients</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Coefficients]</local-name>
            <parent-name>[claims_coefficients#csv]</parent-name>
            <remote-alias>Coefficients</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[claims_coefficients#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Coefficient Name' datatype='string' name='[Coefficients]' role='dimension' type='nominal'>
      </column>
      <column caption='Normalized Value' datatype='real' name='[Number of Claims Filed (copy) 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;tweedie.vi[.arg1]&#13;&#10;&apos;,&#13;&#10;MAX([Coefficients]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.472789' measure-ordering='alphabetic' measure-percentage='0.309524' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='claims_metadata' inline='true' name='textscan.41885.651995601853' version='8.3'>
      <connection class='textscan' directory='D:/' filename='claims_losscodes.csv'>
        <relation name='claims_metadata#csv' table='[claims_metadata#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='date' name='MonthlyDate' ordinal='0' />
            <column datatype='string' name='StateName' ordinal='1' />
            <column datatype='string' name='LossCode' ordinal='2' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>MonthlyDate</remote-name>
            <remote-type>133</remote-type>
            <local-name>[MonthlyDate]</local-name>
            <parent-name>[claims_metadata#csv]</parent-name>
            <remote-alias>MonthlyDate</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>StateName</remote-name>
            <remote-type>129</remote-type>
            <local-name>[StateName]</local-name>
            <parent-name>[claims_metadata#csv]</parent-name>
            <remote-alias>StateName</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LossCode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LossCode]</local-name>
            <parent-name>[claims_metadata#csv]</parent-name>
            <remote-alias>LossCode</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[claims_metadata#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='H2O Initialization' datatype='boolean' name='[Calculation_1010902082708389]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_BOOL(&#13;&#10;&apos;&#13;&#10;myh2oCleaner &lt;- function(pattern = &quot;Last.value.&quot;)&#13;&#10;{&#13;&#10;  keys &lt;- h2o.ls(h2oHandle, pattern = pattern)$Key&#13;&#10;  if (!is.null(keys))&#13;&#10;    h2o.rm(h2oHandle, keys)&#13;&#10;  invisible(keys)&#13;&#10;}&#13;&#10;&#13;&#10;if (!exists(&quot;h2oHandle&quot;, globalenv()))&#13;&#10;{&#13;&#10;  library(h2o)&#13;&#10;  h2oHandle &lt;- h2o.init(ip = .arg1, port = .arg2, max_mem_size = .arg3)&#13;&#10;}&#13;&#10;&#13;&#10;if (length(h2o.ls(h2oHandle, pattern = &quot;claims.dat&quot;)) == 0L)&#13;&#10;{&#13;&#10;  claims.dat &lt;- h2o.importFile(h2oHandle, path = .arg4, key = &quot;claims.dat&quot;)&#13;&#10;&#13;&#10;  # Create indicator variables for claim payout percentages&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$ClaimPaidRatio &lt;- claims.dat$TotalPaid / claims.dat$TotalClaim)&#13;&#10;  )&#13;&#10;&#13;&#10;  payoutThreshold &lt;- 1&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$HighClaimPaid &lt;- claims.dat$ClaimPaidRatio &gt; payoutThreshold)&#13;&#10;  )&#13;&#10;&#13;&#10;  # Create log transformed variables&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logDeduct &lt;- log(claims.dat$Deduct + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logFees &lt;- log(claims.dat$Fees + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalClaim &lt;- log(claims.dat$TotalClaim + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$NonNegPaid &lt;- ifelse(claims.dat$TotalPaid &lt; 0,&#13;&#10;                                             0, claims.dat$TotalPaid))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalPaid &lt;- log(claims.dat$NonNegPaid + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  # Convert some numeric columns to factor&#13;&#10;  for (j in c(&quot;CallCenterPostalCode&quot;))&#13;&#10;    claims.dat[[j]] &lt;- as.factor(claims.dat[[j]])&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  # Limit analysis to &quot;Claim Complete&quot;&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    claims.dat[claims.dat$ResponseStatus == &quot;Claim Complete&quot;, ]&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    h2o.assign(completed.claims.dat, &quot;completed.claims.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  xvars &lt;- c(&quot;CallCenterPostalCode&quot;, &quot;Demographics_AgeGroup&quot;,&#13;&#10;             &quot;Demographics_Gender&quot;, &quot;FirstClaim&quot;, &quot;INStype&quot;,&#13;&#10;             &quot;LossCode&quot;, &quot;MonthlyDate&quot;, &quot;SourceCode&quot;,&#13;&#10;             &quot;StateName&quot;, &quot;logDeduct&quot;, &quot;logFees&quot;,&#13;&#10;             &quot;logTotalClaim&quot;)&#13;&#10;&#13;&#10;  tweedie.final &lt;- h2o.glm(xvars, &quot;NonNegPaid&quot;, completed.claims.dat,&#13;&#10;                           key = &quot;tweedie.final&quot;, family = &quot;tweedie&quot;,&#13;&#10;                           tweedie.p = 1.75, alpha = 0, lambda = 12,&#13;&#10;                           variable_importances = TRUE)&#13;&#10;&#13;&#10;  tweedie.vi &lt;- sort(abs(tweedie.final@model$normalized_coefficients), decreasing = TRUE)&#13;&#10;  tweedie.vi &lt;- tweedie.vi[names(tweedie.vi) != &quot;Intercept&quot;]&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Job__&quot;)&#13;&#10;&#13;&#10;  completed.claims.dat$predicted &lt;-&#13;&#10;    h2o.predict(tweedie.final,  completed.claims.dat)&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Predict_&quot;)&#13;&#10;&#13;&#10;  library(tweedie)&#13;&#10;  completed.claims.dat$deviance &lt;-&#13;&#10;    tweedie.dev(y  = completed.claims.dat$NonNegPaid,&#13;&#10;                mu = completed.claims.dat$predicted,&#13;&#10;                power = 1.75)&#13;&#10;&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    completed.claims.dat[!is.na(completed.claims.dat$deviance), ]&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    h2o.assign(claims.tweediedev.dat, &quot;claims.tweediedev.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  devAggrFun &lt;- function(x)&#13;&#10;  {&#13;&#10;    cbind(N = nrow(x),&#13;&#10;          SumTotalPaid = sum(x$TotalPaid),&#13;&#10;          SumPredicted = sum(x$predicted),&#13;&#10;          MinDeviance  = min(x$deviance),&#13;&#10;          MeanDeviance = mean(x$deviance),&#13;&#10;          MaxDeviance  = max(x$deviance))&#13;&#10;  }&#13;&#10;  h2o.addFunction(h2oHandle, devAggrFun)&#13;&#10;&#13;&#10;  devAggr &lt;-&#13;&#10;    as.data.frame(h2o.ddply(claims.tweediedev.dat,&#13;&#10;                            c(&quot;MonthlyDate&quot;, &quot;StateName&quot;, &quot;LossCode&quot;),&#13;&#10;                            devAggrFun))&#13;&#10;  devAggr[[1L]] &lt;-&#13;&#10;    as.Date(as.character(devAggr[[1L]]), &quot;%m/%d/%Y&quot;)&#13;&#10;  devAggr[[4L]] &lt;- as.integer(devAggr[[4L]])&#13;&#10;  colnames(devAggr)[-(1:3)] &lt;-&#13;&#10;    c(&quot;N&quot;, &quot;SumTotalPaid&quot;, &quot;SumPredicted&quot;,&#13;&#10;      &quot;MinDeviance&quot;, &quot;MeanDeviance&quot;, &quot;MaxDeviance&quot;)&#13;&#10;  print(head(devAggr, 10))&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;}&#13;&#10;&#13;&#10;TRUE&#13;&#10;&apos;,&#13;&#10;[Parameters].[Parameter 2], [Parameters].[Parameter 1], [Parameters].[Parameter 3], [Parameters].[Parameter 4])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Loss Code' datatype='string' name='[LossCode]' role='dimension' type='nominal'>
      </column>
      <column caption='Min Deviance' datatype='real' name='[Max Deviance (copy 2)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MinDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Number of Completed Claims' datatype='integer' name='[Max Deviance (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_INT(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_integer_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;N&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Actual Payout' datatype='real' name='[Mean Deviance (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;SumTotalPaid&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Claim Date' datatype='date' name='[MonthlyDate]' role='dimension' type='ordinal'>
      </column>
      <column caption='Max Deviance' datatype='real' name='[Number of Claims Filed (copy) 1 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MaxDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Mean Deviance' datatype='real' name='[Number of Claims Filed (copy) 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MeanDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='State Name' datatype='string' name='[StateName]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column caption='Predicted Payout' datatype='real' name='[Sum Total Paid (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;SumPredicted&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column-instance column='[LossCode]' derivation='Attribute' name='[attr:LossCode:nk]' pivot='key' type='nominal' />
      <column-instance column='[LossCode]' derivation='None' name='[none:LossCode:nk]' pivot='key' type='nominal' />
      <column-instance column='[Mean Deviance (copy)]' derivation='User' name='[usr:Mean Deviance (copy):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Sum Total Paid (copy)]' derivation='User' name='[usr:Sum Total Paid (copy):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <group caption='Action (Loss Code)' hidden='true' name='[Action (Loss Code)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[LossCode]' />
        </groupfilter>
      </group>
      <group caption='Action (State Name)' hidden='true' name='[Action (State Name)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[StateName]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.472789' measure-ordering='alphabetic' measure-percentage='0.282313' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:LossCode:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;medlr&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;accer&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;nglhr&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;dep&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;pulb&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;hemn&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;flr&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;tort&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;er-mt&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;suit&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;emt&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;pulhr&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;medpa&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;carr&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;nurf&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;inf&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;flrf&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;er-x&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;surmp&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;impay&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;er-&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;revm&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;medh&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;flron&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;flrst&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;cheh&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;obgor&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;er-ag&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;sui&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;dc-&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;oth&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:LossCode:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;medlr&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;accer&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;nglhr&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;dep&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;pulb&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;hemn&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;flr&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;tort&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;er-mt&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;suit&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;emt&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;pulhr&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;medpa&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;carr&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;nurf&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;inf&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;flrf&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;er-x&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;surmp&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;impay&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;er-&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;revm&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;medh&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;flron&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;flrst&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;cheh&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;obgor&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;er-ag&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;sui&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;dc-&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;oth&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='H2O Port' datatype='integer' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
          <calculation class='tableau' formula='54321' />
        </column>
        <column caption='H2O IP' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
          <calculation class='tableau' formula='&quot;localhost&quot;' />
        </column>
        <column caption='H2O Max Mem Size' datatype='string' name='[Parameter 3]' param-domain-type='any' role='measure' type='nominal' value='&quot;4g&quot;'>
          <calculation class='tableau' formula='&quot;4g&quot;' />
        </column>
        <column caption='Claims Data File' datatype='string' name='[Parameter 4]' param-domain-type='any' role='measure' type='nominal' value='&quot;d:\\claimsdata.csv&quot;'>
          <calculation class='tableau' formula='&quot;d:\claimsdata.csv&quot;' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='State Name' name='[Action1]'>
      <activation type='on-select' />
      <source dashboard='Predicted vs Actual' type='sheet' worksheet='Maximum Deviance' />
      <link caption='State Name' delimiter=',' escape='\' expression='tsl:Predicted%20vs%20Actual?%5Btextscan.41885.651995601853%5D.%5BStateName%5D~s0=&lt;[StateName]~na&gt;' include-null='true' multi-select='true' url-escape='true' />
      <command command='tsc:tsl-filter'>
        <param name='exclude' value='Maximum Deviance' />
        <param name='target' value='Predicted vs Actual' />
      </command>
    </action>
    <action caption='Filter by Loss Code' name='[Action2]'>
      <activation type='on-select' />
      <source dashboard='Predicted vs Actual' type='sheet' worksheet='Payments by Loss Code' />
      <link caption='Filter by Loss Code' expression='tsl:Predicted%20vs%20Actual?%5Btextscan.41885.651995601853%5D.%5BLossCode%5D~s0=&lt;[LossCode]~na&gt;' include-null='true' url-escape='true' />
      <command command='tsc:tsl-filter'>
        <param name='exclude' value='Payments by Loss Code' />
        <param name='single-select' value='' />
        <param name='special-fields' value='all' />
        <param name='target' value='Predicted vs Actual' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Maximum Deviance'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>Sheet Name</run>
            <run fontsize='13'>&gt;</run>
            <run fontsize='13'> for Loss Code </run>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>[textscan.41885.651995601853].[attr:LossCode:nk]</run>
            <run fontsize='13'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='claims_metadata' name='textscan.41885.651995601853' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='textscan.41885.651995601853'>
            <column caption='H2O Initialization' datatype='boolean' name='[Calculation_1010902082708389]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_BOOL(&#13;&#10;&apos;&#13;&#10;myh2oCleaner &lt;- function(pattern = &quot;Last.value.&quot;)&#13;&#10;{&#13;&#10;  keys &lt;- h2o.ls(h2oHandle, pattern = pattern)$Key&#13;&#10;  if (!is.null(keys))&#13;&#10;    h2o.rm(h2oHandle, keys)&#13;&#10;  invisible(keys)&#13;&#10;}&#13;&#10;&#13;&#10;if (!exists(&quot;h2oHandle&quot;, globalenv()))&#13;&#10;{&#13;&#10;  library(h2o)&#13;&#10;  h2oHandle &lt;- h2o.init(ip = .arg1, port = .arg2, max_mem_size = .arg3)&#13;&#10;}&#13;&#10;&#13;&#10;if (length(h2o.ls(h2oHandle, pattern = &quot;claims.dat&quot;)) == 0L)&#13;&#10;{&#13;&#10;  claims.dat &lt;- h2o.importFile(h2oHandle, path = .arg4, key = &quot;claims.dat&quot;)&#13;&#10;&#13;&#10;  # Create indicator variables for claim payout percentages&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$ClaimPaidRatio &lt;- claims.dat$TotalPaid / claims.dat$TotalClaim)&#13;&#10;  )&#13;&#10;&#13;&#10;  payoutThreshold &lt;- 1&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$HighClaimPaid &lt;- claims.dat$ClaimPaidRatio &gt; payoutThreshold)&#13;&#10;  )&#13;&#10;&#13;&#10;  # Create log transformed variables&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logDeduct &lt;- log(claims.dat$Deduct + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logFees &lt;- log(claims.dat$Fees + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalClaim &lt;- log(claims.dat$TotalClaim + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$NonNegPaid &lt;- ifelse(claims.dat$TotalPaid &lt; 0,&#13;&#10;                                             0, claims.dat$TotalPaid))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalPaid &lt;- log(claims.dat$NonNegPaid + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  # Convert some numeric columns to factor&#13;&#10;  for (j in c(&quot;CallCenterPostalCode&quot;))&#13;&#10;    claims.dat[[j]] &lt;- as.factor(claims.dat[[j]])&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  # Limit analysis to &quot;Claim Complete&quot;&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    claims.dat[claims.dat$ResponseStatus == &quot;Claim Complete&quot;, ]&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    h2o.assign(completed.claims.dat, &quot;completed.claims.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  xvars &lt;- c(&quot;CallCenterPostalCode&quot;, &quot;Demographics_AgeGroup&quot;,&#13;&#10;             &quot;Demographics_Gender&quot;, &quot;FirstClaim&quot;, &quot;INStype&quot;,&#13;&#10;             &quot;LossCode&quot;, &quot;MonthlyDate&quot;, &quot;SourceCode&quot;,&#13;&#10;             &quot;StateName&quot;, &quot;logDeduct&quot;, &quot;logFees&quot;,&#13;&#10;             &quot;logTotalClaim&quot;)&#13;&#10;&#13;&#10;  tweedie.final &lt;- h2o.glm(xvars, &quot;NonNegPaid&quot;, completed.claims.dat,&#13;&#10;                           key = &quot;tweedie.final&quot;, family = &quot;tweedie&quot;,&#13;&#10;                           tweedie.p = 1.75, alpha = 0, lambda = 12,&#13;&#10;                           variable_importances = TRUE)&#13;&#10;&#13;&#10;  tweedie.vi &lt;- sort(abs(tweedie.final@model$normalized_coefficients), decreasing = TRUE)&#13;&#10;  tweedie.vi &lt;- tweedie.vi[names(tweedie.vi) != &quot;Intercept&quot;]&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Job__&quot;)&#13;&#10;&#13;&#10;  completed.claims.dat$predicted &lt;-&#13;&#10;    h2o.predict(tweedie.final,  completed.claims.dat)&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Predict_&quot;)&#13;&#10;&#13;&#10;  library(tweedie)&#13;&#10;  completed.claims.dat$deviance &lt;-&#13;&#10;    tweedie.dev(y  = completed.claims.dat$NonNegPaid,&#13;&#10;                mu = completed.claims.dat$predicted,&#13;&#10;                power = 1.75)&#13;&#10;&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    completed.claims.dat[!is.na(completed.claims.dat$deviance), ]&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    h2o.assign(claims.tweediedev.dat, &quot;claims.tweediedev.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  devAggrFun &lt;- function(x)&#13;&#10;  {&#13;&#10;    cbind(N = nrow(x),&#13;&#10;          SumTotalPaid = sum(x$TotalPaid),&#13;&#10;          SumPredicted = sum(x$predicted),&#13;&#10;          MinDeviance  = min(x$deviance),&#13;&#10;          MeanDeviance = mean(x$deviance),&#13;&#10;          MaxDeviance  = max(x$deviance))&#13;&#10;  }&#13;&#10;  h2o.addFunction(h2oHandle, devAggrFun)&#13;&#10;&#13;&#10;  devAggr &lt;-&#13;&#10;    as.data.frame(h2o.ddply(claims.tweediedev.dat,&#13;&#10;                            c(&quot;MonthlyDate&quot;, &quot;StateName&quot;, &quot;LossCode&quot;),&#13;&#10;                            devAggrFun))&#13;&#10;  devAggr[[1L]] &lt;-&#13;&#10;    as.Date(as.character(devAggr[[1L]]), &quot;%m/%d/%Y&quot;)&#13;&#10;  devAggr[[4L]] &lt;- as.integer(devAggr[[4L]])&#13;&#10;  colnames(devAggr)[-(1:3)] &lt;-&#13;&#10;    c(&quot;N&quot;, &quot;SumTotalPaid&quot;, &quot;SumPredicted&quot;,&#13;&#10;      &quot;MinDeviance&quot;, &quot;MeanDeviance&quot;, &quot;MaxDeviance&quot;)&#13;&#10;  print(head(devAggr, 10))&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;}&#13;&#10;&#13;&#10;TRUE&#13;&#10;&apos;,&#13;&#10;[Parameters].[Parameter 2], [Parameters].[Parameter 1], [Parameters].[Parameter 3], [Parameters].[Parameter 4])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Loss Code' datatype='string' name='[LossCode]' role='dimension' type='nominal'>
            </column>
            <column caption='Number of Completed Claims' datatype='integer' name='[Max Deviance (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_INT(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_integer_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;N&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Claim Date' datatype='date' name='[MonthlyDate]' role='dimension' type='ordinal'>
            </column>
            <column caption='Max Deviance' datatype='real' name='[Number of Claims Filed (copy) 1 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MaxDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Mean Deviance' datatype='real' name='[Number of Claims Filed (copy) 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;MeanDeviance&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='State Name' datatype='string' name='[StateName]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column-instance column='[LossCode]' derivation='Attribute' name='[attr:LossCode:nk]' pivot='key' type='nominal' />
            <column-instance column='[MonthlyDate]' derivation='MY' name='[my:MonthlyDate:ok]' pivot='key' type='ordinal' />
            <column-instance column='[LossCode]' derivation='None' name='[none:LossCode:nk]' pivot='key' type='nominal' />
            <column-instance column='[StateName]' derivation='None' name='[none:StateName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1010902082708389]' derivation='User' name='[usr:Calculation_1010902082708389:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Max Deviance (copy)]' derivation='User' name='[usr:Max Deviance (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Number of Claims Filed (copy) 1 1]' derivation='User' name='[usr:Number of Claims Filed (copy) 1 1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Number of Claims Filed (copy) 1]' derivation='User' name='[usr:Number of Claims Filed (copy) 1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41885.651995601853].[Action (Loss Code)]'>
            <groupfilter function='member' level='[LossCode]' member='&quot;dep&quot;' user:ui-action-filter='[Action2]' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.41885.651995601853].[my:MonthlyDate:ok]'>
            <groupfilter function='member' level='[my:MonthlyDate:ok]' member='201005' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.41885.651995601853].[none:LossCode:nk]'>
            <groupfilter function='level-members' level='[none:LossCode:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.41885.651995601853].[my:MonthlyDate:ok]</column>
            <column>[textscan.41885.651995601853].[none:LossCode:nk]</column>
            <column>[textscan.41885.651995601853].[Action (Loss Code)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' max='156.0' min='0.0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[textscan.41885.651995601853].[my:MonthlyDate:ok]' value='Claim Date'>
              <formatted-text>
                <run>Claim Date</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' />
              <lod column='[textscan.41885.651995601853].[none:StateName:nk]' />
              <tooltip column='[textscan.41885.651995601853].[attr:LossCode:nk]' />
              <lod column='[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]' />
              <tooltip column='[textscan.41885.651995601853].[usr:Max Deviance (copy):qk]' />
              <tooltip column='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1:qk]' />
              <geometry column='[textscan.41885.651995601853].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[textscan.41885.651995601853].[Latitude (generated)]</rows>
        <cols>[textscan.41885.651995601853].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Payments by Loss Code'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>[textscan.41885.651995601853].[my:MonthlyDate:ok]</run>
            <run fontsize='13'>&gt;</run>
            <run fontsize='13'>Æ </run>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>Sheet Name</run>
            <run fontsize='13'>&gt;</run>
            <run fontsize='13'> for </run>
            <run fontsize='13'>&lt;</run>
            <run fontsize='13'>[textscan.41885.651995601853].[attr:StateName:nk]</run>
            <run fontsize='13'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='claims_metadata' name='textscan.41885.651995601853' />
          </datasources>
          <datasource-dependencies datasource='textscan.41885.651995601853'>
            <column caption='Loss Code' datatype='string' name='[LossCode]' role='dimension' type='nominal'>
            </column>
            <column caption='Actual Payout' datatype='real' name='[Mean Deviance (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;SumTotalPaid&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Claim Date' datatype='date' name='[MonthlyDate]' role='dimension' type='ordinal'>
            </column>
            <column caption='State Name' datatype='string' name='[StateName]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column caption='Predicted Payout' datatype='real' name='[Sum Total Paid (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;args &lt;- data.frame(MonthlyDate =  as.Date(.arg1, &quot;%Y-%m-%d&quot;),&#13;&#10;                   StateName   = .arg2,&#13;&#10;                   LossCode    = .arg3,&#13;&#10;                   stringsAsFactors = FALSE)&#13;&#10;ans &lt;- rep(NA_real_, nrow(args))&#13;&#10;for (i in seq_along(ans))&#13;&#10;{&#13;&#10;  val &lt;- &#13;&#10;    subset(devAggr,&#13;&#10;           MonthlyDate == args[i, 1L] &amp; StateName == args[i, 2L] &amp; LossCode == args[i, 3L],&#13;&#10;           &quot;SumPredicted&quot;,&#13;&#10;           drop = TRUE)&#13;&#10;  if (length(val) == 1L)&#13;&#10;    ans[i] &lt;- val&#13;&#10;}&#13;&#10;ans&#13;&#10;&apos;,&#13;&#10;MAX([MonthlyDate]), MAX([StateName]), MAX([LossCode]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[StateName]' derivation='Attribute' name='[attr:StateName:nk]' pivot='key' type='nominal' />
            <column-instance column='[MonthlyDate]' derivation='MY' name='[my:MonthlyDate:ok]' pivot='key' type='ordinal' />
            <column-instance column='[LossCode]' derivation='None' name='[none:LossCode:nk]' pivot='key' type='nominal' />
            <column-instance column='[StateName]' derivation='None' name='[none:StateName:nk]' pivot='key' type='nominal' />
            <column-instance column='[Mean Deviance (copy)]' derivation='User' name='[usr:Mean Deviance (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Sum Total Paid (copy)]' derivation='User' name='[usr:Sum Total Paid (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41885.651995601853].[Action (State Name)]'>
            <groupfilter function='member' level='[StateName]' member='&quot;Wisconsin&quot;' user:ui-action-filter='[Action1]' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.41885.651995601853].[my:MonthlyDate:ok]'>
            <groupfilter function='member' level='[my:MonthlyDate:ok]' member='201005' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.41885.651995601853].[none:StateName:nk]'>
            <groupfilter function='level-members' level='[none:StateName:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.41885.651995601853].[my:MonthlyDate:ok]</column>
            <column>[textscan.41885.651995601853].[none:StateName:nk]</column>
            <column>[textscan.41885.651995601853].[Action (State Name)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]' scope='rows' value='false' />
            <encoding attr='space' class='0' field='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='title' class='0' field='[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]' scope='rows' value='Payment ($)' />
            <format attr='subtitle' class='0' field='[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[textscan.41885.651995601853].[:Measure Names]' value='Total Payments'>
              <formatted-text>
                <run>Total Payments</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[textscan.41885.651995601853].[:Measure Names]' />
              <tooltip column='[textscan.41885.651995601853].[attr:StateName:nk]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[textscan.41885.651995601853].[usr:Mean Deviance (copy):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[textscan.41885.651995601853].[:Measure Names]' />
              <tooltip column='[textscan.41885.651995601853].[attr:StateName:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[textscan.41885.651995601853].[:Measure Names]' />
              <tooltip column='[textscan.41885.651995601853].[attr:StateName:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([textscan.41885.651995601853].[usr:Mean Deviance (copy):qk] + [textscan.41885.651995601853].[usr:Sum Total Paid (copy):qk])</rows>
        <cols>[textscan.41885.651995601853].[none:LossCode:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Variable Importance'>
      <table>
        <view>
          <datasources>
            <datasource caption='claims_coefficients' name='textscan.41886.636795671293' />
            <datasource name='Parameters' />
            <datasource caption='claims_metadata' name='textscan.41885.651995601853' />
          </datasources>
          <datasource-dependencies datasource='textscan.41885.651995601853'>
            <column caption='H2O Initialization' datatype='boolean' name='[Calculation_1010902082708389]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_BOOL(&#13;&#10;&apos;&#13;&#10;myh2oCleaner &lt;- function(pattern = &quot;Last.value.&quot;)&#13;&#10;{&#13;&#10;  keys &lt;- h2o.ls(h2oHandle, pattern = pattern)$Key&#13;&#10;  if (!is.null(keys))&#13;&#10;    h2o.rm(h2oHandle, keys)&#13;&#10;  invisible(keys)&#13;&#10;}&#13;&#10;&#13;&#10;if (!exists(&quot;h2oHandle&quot;, globalenv()))&#13;&#10;{&#13;&#10;  library(h2o)&#13;&#10;  h2oHandle &lt;- h2o.init(ip = .arg1, port = .arg2, max_mem_size = .arg3)&#13;&#10;}&#13;&#10;&#13;&#10;if (length(h2o.ls(h2oHandle, pattern = &quot;claims.dat&quot;)) == 0L)&#13;&#10;{&#13;&#10;  claims.dat &lt;- h2o.importFile(h2oHandle, path = .arg4, key = &quot;claims.dat&quot;)&#13;&#10;&#13;&#10;  # Create indicator variables for claim payout percentages&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$ClaimPaidRatio &lt;- claims.dat$TotalPaid / claims.dat$TotalClaim)&#13;&#10;  )&#13;&#10;&#13;&#10;  payoutThreshold &lt;- 1&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$HighClaimPaid &lt;- claims.dat$ClaimPaidRatio &gt; payoutThreshold)&#13;&#10;  )&#13;&#10;&#13;&#10;  # Create log transformed variables&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logDeduct &lt;- log(claims.dat$Deduct + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logFees &lt;- log(claims.dat$Fees + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalClaim &lt;- log(claims.dat$TotalClaim + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$NonNegPaid &lt;- ifelse(claims.dat$TotalPaid &lt; 0,&#13;&#10;                                             0, claims.dat$TotalPaid))&#13;&#10;  )&#13;&#10;&#13;&#10;  invisible(&#13;&#10;    h2o.exec(claims.dat$logTotalPaid &lt;- log(claims.dat$NonNegPaid + 1))&#13;&#10;  )&#13;&#10;&#13;&#10;  # Convert some numeric columns to factor&#13;&#10;  for (j in c(&quot;CallCenterPostalCode&quot;))&#13;&#10;    claims.dat[[j]] &lt;- as.factor(claims.dat[[j]])&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  # Limit analysis to &quot;Claim Complete&quot;&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    claims.dat[claims.dat$ResponseStatus == &quot;Claim Complete&quot;, ]&#13;&#10;  completed.claims.dat &lt;-&#13;&#10;    h2o.assign(completed.claims.dat, &quot;completed.claims.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  xvars &lt;- c(&quot;CallCenterPostalCode&quot;, &quot;Demographics_AgeGroup&quot;,&#13;&#10;             &quot;Demographics_Gender&quot;, &quot;FirstClaim&quot;, &quot;INStype&quot;,&#13;&#10;             &quot;LossCode&quot;, &quot;MonthlyDate&quot;, &quot;SourceCode&quot;,&#13;&#10;             &quot;StateName&quot;, &quot;logDeduct&quot;, &quot;logFees&quot;,&#13;&#10;             &quot;logTotalClaim&quot;)&#13;&#10;&#13;&#10;  tweedie.final &lt;- h2o.glm(xvars, &quot;NonNegPaid&quot;, completed.claims.dat,&#13;&#10;                           key = &quot;tweedie.final&quot;, family = &quot;tweedie&quot;,&#13;&#10;                           tweedie.p = 1.75, alpha = 0, lambda = 12,&#13;&#10;                           variable_importances = TRUE)&#13;&#10;&#13;&#10;  tweedie.vi &lt;- sort(abs(tweedie.final@model$normalized_coefficients), decreasing = TRUE)&#13;&#10;  tweedie.vi &lt;- tweedie.vi[names(tweedie.vi) != &quot;Intercept&quot;]&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Job__&quot;)&#13;&#10;&#13;&#10;  completed.claims.dat$predicted &lt;-&#13;&#10;    h2o.predict(tweedie.final,  completed.claims.dat)&#13;&#10;&#13;&#10;  myh2oCleaner(pattern = &quot;GLM2Predict_&quot;)&#13;&#10;&#13;&#10;  library(tweedie)&#13;&#10;  completed.claims.dat$deviance &lt;-&#13;&#10;    tweedie.dev(y  = completed.claims.dat$NonNegPaid,&#13;&#10;                mu = completed.claims.dat$predicted,&#13;&#10;                power = 1.75)&#13;&#10;&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    completed.claims.dat[!is.na(completed.claims.dat$deviance), ]&#13;&#10;  claims.tweediedev.dat &lt;-&#13;&#10;    h2o.assign(claims.tweediedev.dat, &quot;claims.tweediedev.dat&quot;)&#13;&#10;  myh2oCleaner()&#13;&#10;&#13;&#10;  devAggrFun &lt;- function(x)&#13;&#10;  {&#13;&#10;    cbind(N = nrow(x),&#13;&#10;          SumTotalPaid = sum(x$TotalPaid),&#13;&#10;          SumPredicted = sum(x$predicted),&#13;&#10;          MinDeviance  = min(x$deviance),&#13;&#10;          MeanDeviance = mean(x$deviance),&#13;&#10;          MaxDeviance  = max(x$deviance))&#13;&#10;  }&#13;&#10;  h2o.addFunction(h2oHandle, devAggrFun)&#13;&#10;&#13;&#10;  devAggr &lt;-&#13;&#10;    as.data.frame(h2o.ddply(claims.tweediedev.dat,&#13;&#10;                            c(&quot;MonthlyDate&quot;, &quot;StateName&quot;, &quot;LossCode&quot;),&#13;&#10;                            devAggrFun))&#13;&#10;  devAggr[[1L]] &lt;-&#13;&#10;    as.Date(as.character(devAggr[[1L]]), &quot;%m/%d/%Y&quot;)&#13;&#10;  devAggr[[4L]] &lt;- as.integer(devAggr[[4L]])&#13;&#10;  colnames(devAggr)[-(1:3)] &lt;-&#13;&#10;    c(&quot;N&quot;, &quot;SumTotalPaid&quot;, &quot;SumPredicted&quot;,&#13;&#10;      &quot;MinDeviance&quot;, &quot;MeanDeviance&quot;, &quot;MaxDeviance&quot;)&#13;&#10;  print(head(devAggr, 10))&#13;&#10;&#13;&#10;  myh2oCleaner()&#13;&#10;}&#13;&#10;&#13;&#10;TRUE&#13;&#10;&apos;,&#13;&#10;[Parameters].[Parameter 2], [Parameters].[Parameter 1], [Parameters].[Parameter 3], [Parameters].[Parameter 4])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_1010902082708389]' derivation='User' name='[usr:Calculation_1010902082708389:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='textscan.41886.636795671293'>
            <column caption='Coefficient Name' datatype='string' name='[Coefficients]' role='dimension' type='nominal'>
            </column>
            <column caption='Normalized Value' datatype='real' name='[Number of Claims Filed (copy) 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;tweedie.vi[.arg1]&#13;&#10;&apos;,&#13;&#10;MAX([Coefficients]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Coefficients]' derivation='None' name='[none:Coefficients:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Claims Filed (copy) 1]' derivation='User' name='[usr:Number of Claims Filed (copy) 1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <sort class='natural' column='[textscan.41886.636795671293].[none:Coefficients:nk]' direction='ASC' />
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[textscan.41886.636795671293].[usr:Number of Claims Filed (copy) 1:qk]</rows>
        <cols>[textscan.41886.636795671293].[none:Coefficients:nk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Predicted vs Actual'>
      <style>
      </style>
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='84000' x='0' y='0'>
              <zone h='50000' id='16' name='Maximum Deviance' show-title='true' w='84000' x='0' y='0'>
              </zone>
              <zone h='50000' id='24' name='Payments by Loss Code' show-title='true' w='84000' x='0' y='50000'>
              </zone>
            </zone>
            <zone fixed-size='160' h='100000' id='14' is-fixed='true' type='layout-basic' w='16000' x='84000' y='0'>
              <zone h='100000' id='27' type='layout-basic' w='16000' x='84000' y='0'>
                <zone h='58125' id='15' param='vert' type='layout-flow' w='16000' x='84000' y='0'>
                  <zone h='7375' id='17' mode='dropdown' name='Maximum Deviance' param='[textscan.41885.651995601853].[my:MonthlyDate:ok]' show-all='false' type='filter' w='16000' x='84000' y='0'>
                  </zone>
                  <zone fixed-size='133' h='17625' id='19' is-fixed='true' name='Maximum Deviance' pane-specification-id='0' param='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' type='color' w='16000' x='84000' y='7375'>
                  </zone>
                  <zone h='6375' id='20' mode='type_in' param='[Parameters].[Parameter 4]' type='paramctrl' w='16000' x='84000' y='25000'>
                  </zone>
                  <zone h='6375' id='21' mode='type_in' param='[Parameters].[Parameter 2]' type='paramctrl' w='16000' x='84000' y='31375'>
                  </zone>
                  <zone h='6375' id='22' mode='type_in' param='[Parameters].[Parameter 3]' type='paramctrl' w='16000' x='84000' y='37750'>
                  </zone>
                  <zone fixed-size='76' h='10500' id='23' is-fixed='true' mode='type_in' param='[Parameters].[Parameter 1]' type='paramctrl' w='16000' x='84000' y='44125'>
                  </zone>
                </zone>
                <zone h='41875' id='28' param='vert' type='layout-flow' w='16000' x='84000' y='58125'>
                  <zone h='8250' id='26' name='Payments by Loss Code' pane-specification-id='1' param='[textscan.41885.651995601853].[:Measure Names]' type='color' w='16000' x='84000' y='58125'>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='dashboard' maximized='1' name='Predicted vs Actual'>
      <zones>
        <zone name='Maximum Deviance'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Payments by Loss Code'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone mode='dropdown' name='Maximum Deviance' param='[textscan.41885.651995601853].[my:MonthlyDate:ok]' show-all='false' type='filter' />
        <zone name='Maximum Deviance' pane-specification-id='0' param='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' type='color' />
        <zone mode='type_in' name='' param='[Parameters].[Parameter 4]' type='paramctrl' />
        <zone mode='type_in' name='' param='[Parameters].[Parameter 2]' type='paramctrl' />
        <zone mode='type_in' name='' param='[Parameters].[Parameter 3]' type='paramctrl' />
        <zone mode='type_in' name='' param='[Parameters].[Parameter 1]' type='paramctrl' />
        <zone name='Payments by Loss Code' pane-specification-id='1' param='[textscan.41885.651995601853].[:Measure Names]' type='color' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Variable Importance'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]</field>
          <field>[textscan.41886.636795671293].[none:Coefficients:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window class='hidden-worksheet' name='Maximum Deviance'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[textscan.41885.651995601853].[usr:Number of Claims Filed (copy) 1 1:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[textscan.41885.651995601853].[my:MonthlyDate:ok]' show-all='false' type='filter' />
            <card mode='dropdown' param='[textscan.41885.651995601853].[none:LossCode:nk]' show-all='false' type='filter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[textscan.41885.651995601853].[attr:LossCode:nk]</field>
          <field>[textscan.41885.651995601853].[my:MonthlyDate:ok]</field>
          <field>[textscan.41885.651995601853].[none:LossCode:nk]</field>
          <field>[textscan.41885.651995601853].[none:Region:nk]</field>
          <field>[textscan.41885.651995601853].[usr:Calculation_1010902082708389:nk]</field>
          <field>[textscan.41885.651995601853].[yr:MonthlyDate:ok]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
      </selection-collection>
    </window>
    <window class='hidden-worksheet' name='Payments by Loss Code'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[textscan.41885.651995601853].[my:MonthlyDate:ok]' show-all='false' type='filter' />
            <card mode='dropdown' param='[textscan.41885.651995601853].[none:StateName:nk]' show-all='false' type='filter' />
            <card pane-specification-id='1' param='[textscan.41885.651995601853].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[textscan.41885.651995601853].[my:MonthlyDate:ok]</field>
          <field>[textscan.41885.651995601853].[none:LossCode:nk]</field>
          <field>[textscan.41885.651995601853].[none:StateName:nk]</field>
        </color-one-way>
      </highlight>
      <selection-collection>
      </selection-collection>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Predicted vs Actual' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9d5gbx33w/9kFFr0crvc7XmE5iiLFokoVqlCWqyzHlmLFduw4tpX2xonj
      vEns/JTi5I3tJE5ip7nIclG1JdmyJKp3iaQKe7vjFV6v6B2L3d8f4O4BOOAKySMpC5/n4XPE
      Ynd2djHfmW+bGUFVVZUSJd6liOe6AiVKnEtKAlDiXY0uAHIiQiAcR0nF8AWjRS8I+6cJx1Kn
      fMPpiREOHT5MMBKf97zx8fFTvoeSivPEo48w7iv+HJGgl2l/aEnlqqpCf88xRiamC34/3HuE
      cV+k6PULfV/i7GO488477wToP/A6z+wdwhYd4qVD47RUWukdGMJVVs7o0AmcbjcnBk5wbN/r
      JCzVyOEphkfHScsJvKEYVqPKpC8CqQiRZBrvxBgjYxOkk3H84QQupx2AZx75CUGxghce+xlN
      qzdAPMDg2BROs4FJfxS7CXr7T/DMCy+zduUKjnb3YrY5SIZ9TEzNEI6lcDls+KcnGBybptxT
      xuhgH1EZHDYrAC8+fh/9EQdXblpFX083gsmGHAswMjpOLKngdNjo2fMy+0firGqtA1QG+4+T
      UI3YTAZ6unuwucqYGR8inFBx2DPl3vv9byPbKpmenGRFS4NettUsMTY0wAtPPoalbg1S0s9U
      IEqZy6G/6OzvzXKQCW8Yl9XI8b4Bpr1Byss9CMLZ/fFLgFH7T19fH0ePx5G8CuNxO4K6kv27
      X+S53Ue4ss3EfQ88wMrN1yJMjiE1JXnwp//JZZsv5NExGWPwBNvf+z52HZvhopoEU+ZGXnnk
      51x8UQfHAyZSEz189st3Um7O3Ku1cw3NJi+7Xn+F/p4+NrSVcbCnnt7DB7j2oiYmhHpOnDiB
      0SAy0HOI+x55kvdtaeSwz4K/by/vveUWnnh2F1u3bODt0cN0e034+/fwgU/9IY0eC9FIBIej
      mad+djdqTRcHHvoVV16ykjf6Inzoxm1zXsJbz/+S7pCdqe6H6FzZxgmfwrWCzA9++DM+8OEP
      UVvlATnAoM/Ix6+4GIAdD/xAL/um6zez65gP4jEm+vaze3iSMvxMXf4BNq9qpPutF3jpaOZ7
      79BRXusZoN4Sp69hBc/tOsS162rZ0z3Cbe/benZ+9RI6ugrUP+zj4g4PE4oHQzLAQ/fdQ1Pn
      KvxeLytWX8DA8V7Wrm6jrKwMAJurnAtWdVDftIKmaheRuJwp6KRTyVFWSVdnGw0t7dRXWIgm
      cm88NjaGSUky6fUyHROpr6lifbOD+1/s5rorN2M1ibz2zKNEpCqUVBiA9s4umqoddB/rpX3t
      BrZs2cjwQD8zk2NU1LcgKpk6lJeX01DfwPDwFFsuuwSPSSGWhlVrL6SlsXbOSxgeHmbDpkto
      rrLTfOHVlKte9g+E+Pgt1/LMsy+iABiskAqTViEaieaUfax3gHUbL6G5vpqRwQG83hlEewV2
      U+b1Dg7Mfj82fAKfz4tsduO2GqmoruPijeuZnJo8k79riUWiq0A9Ayd4z9WXYClvwpLw466r
      ZWhkGqvdzuRQH7d96tO89MLLNNdXYK9oJB6cYWV7C+G0hFOSaV6zkd79OxmfDtC6cg3pWJT2
      FfUkBBtWIUZj5zrsEsxMjHLg4CEMZU184KZtBCeGSSuw6bKtrGyrR7JX0tlSx+DQIF2rO+np
      7gHBRGdHC5ayGgzJAGu2XEPPmy9y8Fg/V227hsH+fuzl9Wy5cBUAQe8UkruGDV3N7HjsCTyt
      XXTWuBBsFTRUZQQ4GvTy9t799Pf2sPHya3jt+R2otjpW1VvpHZ6ktaODwZ6jOCvruLBrFYJg
      oMop8vjTL9E3Msn1V2/Ry77his08//QOvKEoV1x7E7GZUZDsbL1iCwYBKqsq9O8v2/Ye4t5R
      VNHCpRtX8egTzzHjC3HDjTficdrOWUN4tyKU4gDnjsRUL//5y7f44u987FxX5V1LSQBKvKvR
      jWC/348kSfOenEwmEUURVVUXPPfXAVmWSafTmM0Z6z2VSpFOpxFFkXQ6DYAgCKiqiqqq+rsp
      hnauLMsYjcaC32n/B3LKUlVVP64oCqK49BCOoigYDAYsFguKoiDLMiaTCYB0Ok0ymdTrof1N
      p9MYjcY5z5Vdn+z6Zz9HIQwGg37PbGKxGACiKCKKIrIsz1vWQu9Le8eiKGIwGEilCrvu9V9B
      kiTsdvucE7RCk8kkRqMRSZJO6eW/E0kmk8RiMaxWK6IooigK8XicVCqV87Kzf4x8IchuJFoD
      kSSJRCKBJEkYDAb9O+36QuUKgqCXpQnhUkmn00iShMlkwmAw6I1bEAQURcHv9+fUOZlM6o01
      +/7ZjT+74WtodSv0HiRJQlEUjEYjVqtVf5Z4PD5HwBVFyblvNto9CwmhJjzZz13sfc37FrVe
      Qqu42Wx+1zR+AJPJhCiKJJNJIPPDWq1WvdFoZDfSxWqUZrNZf7ca2dcvppylaK+KosypayQS
      0Z9NEISchptKpXJ6am2Uy+91tUa6WLRRJ51O6yOS1inkP1uhd5xPofclCAKpVEp/No1IJDLn
      nc9pzdoJWoGSJOW8nHcbDkcmmJX9w1ssFsxms96Daz1Rfm+d3zDyjxkMBhKJWf9w/o+pNdpC
      DUxrePM1jOzvtN9PlmWCwaCuwkWjUb0si8WSc7/s+mY/U36vW+z5Cp2vdaoOh0MfLQup1Pkj
      TrFnLPS+tNEl+77aqKCNuPp7yS9U003fzY0+G0EQ9B5LI1uP1Y4X+pEK6c3ZQmI0GjEajboQ
      5DcWURRzGkGhHrjQPfNth0LXaWqPqqq6EGi6fn7D0s4tRvY98u9d6LxEIkE8PpsKI8uyXpf8
      c7Prm09+x1PofUWjUd2W0WyLVCql/zPOKbXEHDTDLJvsxpL9Q+T3gNkGayG91WAw6DqwxWKZ
      U0Z2WdrfhRpG/nn5o4WmIrjdbuLxOIlEglQqhcvlQpIk3WDMbkxab11I585nvh5buz4ajSKK
      IpIk6UIBLPi+CpVZqKMWBEF3XiSTSVRV1Ue4bEpd/Glgs9lydOH8nrCQcVio0Wjqh6azFuqF
      NU5FN84XHq1nDIVCutCpqkoymdQbSX5vnl3uQnZK9vHsnj27MSuKQiwWI5FI4PP5ct6F9jdb
      EOazd/LffT4mkynnubIpCcApoqoqiqLoqpA2Siy2hy5Eod53vvsXYjG6uoaiKDkekuyGmq1O
      FNPHi/XOWnn55WRfr7mSI5HInJG00HPON9It9K7ms5VKAnCKKIpCOBxGlmXMZvOcnl77QRfr
      qdF+SE1PLaRLFxsNCvV88/Xg2SQSCZxOp/5Zs2nyvUbFGmIxlS3/2kL6ffZzF6vzQireQvct
      VNfs+5RsgFPEYDDgcDiIRqO6QacZzFpACQo3kPl+VKPRmOO+yx5R5vMG5ev4+ddmuyvzvSOa
      5097jnzhLebq1M7T/PmJRKLoyJetq883ehW6V7H3la/7Zzdug8GAJEk5LmvtO230kWW5JACn
      gxZQCoVCuh4qiqIuBDD3R9IoNEJon7UgULbLrlhvXqyxZDd+7a/BYECW5ZxgnaqqRCKRnDI1
      tcVutxOLxXI8QPm9qBZZlmVZN2QLCWI+xep9Ku+rUNlOpzMn2p5KpYjFYkiSpMe0oKQCnTba
      SKA1mng8jiiK2O32OT7nfAoN1ZoaNJ97VTsvX7fOdm1q5xRSNfLLyT8XMkGjVCqFxWLJuTbf
      7agoiu5FKlRuIaN5IZWp2LFizoV8tJ4/+3pJkrDZbMRiMfx+P7FYDFVVSyPAmcBoNOJ2u3Wb
      IBaLYTKZ8Pl8jE+MkpTjUKAdq4D+MyoCBqORpsYWVFXN6VEht0cvFtqf24jDzPgy0ze1+2hu
      RlVVQRAgqzGl5BSiIfP/WDRBMtVGQ33jvHq5NoJoUfN8f35+3bMb73w2Qs57yusgtGP5QmA0
      GnE4HLqXK5FI6NdaLBZsNhsej4dkMkk6nS4JwJlEG3ZjsRjRaJRUKkU4HGJ46jgN61UEsXiP
      lZYVlEk7aUXEbu/Sy1uI7F6/UA7S+MQoDZ2FAljaMTXn79HefiqaM+5CMZ5mwDvJhK8Ou1RO
      Sk7S2b46p3zIjAIWiyXHzZhMJvUAlHZsoWfIP5YdJS42SmVjMpmw2WxEo9E5KRCQsW+06LCm
      /kDJCD7jWCwWdjz/ELXlrdjtToLTcaoSRszW4q9aUdTMaJBlzOb3lNn+8/weeKEs1MWiKrNl
      mCwGTPUAk0Tjo4gGkVf2Hqe5qguLZEMUM6Oey+XCH/CDH2pqahBFEbPZTDQ6d0GCQnq85vXK
      ppBBX6ic7O9NJhPBYLDou3M4HAXLKgnAGUYQBJzVAkp1D9MxmaTBx8yonfp2V/GLVBWDKGCx
      mIhEI9ht9jkeGO2HLBSRzb//qWIUzAWPmyyZZlK7GoLRA/hSKqlYGu8RgQ2rrmBqZoorLtuK
      z+dDkiRcLhdutxtFUQiFQnMM52yPkFbnQnGG/JGg0PmQSSzUEt2yU1bMZrOey1XMuC4JwDJQ
      ZesgZjiKzWGi5YKygvp/PoqqUl7lYOREL51t6/Tj+T1d9ghQSD3IaShLrLfT7iAZD+oNvhAW
      m0QyItBk3cQNH1yFKIqsAXr6juBxV2GxWJiensbhcOgJg9np4/MZ7/mR8nwhyf5/tnGbSqUY
      ONFHRXkVoijmROhDoRAGgwGPx5PzHLrXbonvqMQiqK9egXc841p0lJkoq5qbg5JDVku1l8cZ
      HTuR07Dzg2zZDaCYW1BVVZQlqkUGUSSZkOc9JxZQ6XBfw4qmTkRRJJFIsPvgM4zO9FHuKcdk
      MlFZWYksy3i93pzJNMVGp0K+/0JGcSFvmaqqjI6OEFH6GRjfzYmJN0gmZ50HoigWnNADGQ9e
      aQRYBiorKgm+kaa8FiTT/K7QDLM/vsNpwZ+aoG8gyYqWzqKek3zye1itgSwFq92MN5Au+v3o
      oJfhQT+P+b/MDatux1Vuwp8awFNjIZaM8cq+X7J51Xb8AS9jM/2EI0HaG9brhnKhuharfzb5
      MYJslUqWZSb83TR3ZHr4cDBGIBikumrWKE+lUiQSCdLptD46aGWWBGAZEAQBNSExMRCmstGG
      wTh/QxQNAqks3bWs3MpULDqn0S8U4Z3DEkcAh8OKOlVccZqcnuJA6AUwwM96/h9Npi7aGzpw
      VlThqbECIV49fg+SWcTqkTA6FPaO/Ap7uomNa7fqs8E0XV1T2SRJ0g1hLWCXTyFVTxAExsZG
      KavMOl/IGPP5dpIsyxgMBgKBAIqi6DZKSQCWiZXtnbirVI70Hqey2YJ/KobdbSLojUPSiBET
      6aSm6wqkU3EURUU86S5Ny7NT+fJ78vy0hmJ+87Si0Ns9iigIqKpmiqgIJ0cclcxBRVURyHwf
      jMapaJy7PEvQF+PY6CHQ2pqgMpQ6xFD/IcxHPTSWreCKyy9CFETiXhMetR2LoYzegReo7nTT
      23ecjRdtIplMYrdnjPxQKKQH0LTAlTbtND8rtZga5QtMUd85W99MaCO38WvBOm1GnyAIegpI
      SQCWEVEUqXJWERmJUVveSDQYp62mAYtl7qTw8VEfyUQSizXjiUmrYQ537+aC1ZfmnJfvKs0n
      v4dsX1m/6PrGYgkSw8GC34VDUcKqb+4XAiQsPo7HfJS/XculXe9lxboOJJPE4SMHaVpvIpmc
      oa5iA1NTU3g8Hv0ZHA4H4XA4x3OjuVGzI8uKomC1WnOeV5ZlhoaHwOwFyvTjNruFwZHj1NZm
      FkAzGAx6ebIs56R9CIJQEoDlIiUnATPVtR4go5+6y+YuOqCRTKT0xg/Q0OoiEo7j9c5QXl4B
      ZBpCsZlZhaKlS8VqNWMRC9dRxAiG4gayIICclJicnmBd1wbe3rubkdABqttMQJBjY69y3abf
      JBAI4Ha7gdnGmR0z0ARYm4o7OjaCNziGIIrISRmL2QwIzMzMEE/PsGHLirx6CLgqVKa9E6xo
      6cBgMBCLxeZk2Gr5QCUBWCbkdBwo7FfPx+cN43TNVTvsDguDvQdJplYSjYbxBabYtOHyosEh
      7e+serT0eheLWDvcZhzpasLGwks4GmQLk+EhfuuiLzAxOY5POoC7blZ1k4npNgtkIrMGg6Ho
      KCYIAv2Dx/EbD+JozswXDpyI0tzanrleSWKMW3L1/FSaZFJGTpjwVHswGo26zg8ZNctsNutp
      G1BKhlsWVFVFEIvPoc0nLadJJuaG7wGa2jxgHaGyOU55raoHlvL/ZXtK8mMHS617IRxuC7fc
      +EEapTUF4xppYxynx4rT6WTcO4CjzJQT/S63NhOJhBEEgUQiQSwWIxQK6SqJ9gxmsxmn08mJ
      4eMETAdxeGYnyyvpzDsdHZrB43FilGaNX783QnDMjVlu59KLbqKqspZ4PK4b22azGbfbjcVi
      ybGpSgKwDASDQSzzpD7kU1HlIlHE/y4IAja7Wf9/ITdhoQzJU06NmOcyyWTg+m1bqTK0Fvx+
      TcMWAKIpb87x0IyMHIeXDt87J71aM0y11TVSqRR+vx+zyYrNlfcOT9ZNTim4PQ4MBgPxWArv
      KNS5N7Jl86Ws7JzNV9LmW5vNZmy2wuuullSgZWB8cgS3x7HwiVkIi4jbah6ObI9IflpBNqci
      A77JKEoqy6vCrPdIi1d4DHVMKQP5taOlIrM4sREr2eOfs8KIooxRppoZGxvNmYEmSRKBQICh
      yeMgprCby5DlFNOpbux5gh5PnZxvcLJwQRBIRWxsXn9VwdHOZDLpq8MVoyQAy0AoMkm5+9Rz
      cuZjvrThbLQks6H+KQThpKtTc5mebMuCIGR85qgoaQVJMlJd46a5rXreOkyGxugey6/YbKCq
      0tnMhDqUF8EWQIW0MDt3QOuh0+k0M8mjeOrMhBgGoJi7YPjENKlkmmAgSjQcp2vF6nlVvYWC
      gSUBWAYsFgewtO2XFoPWiPN9/8Xy7w0GA/Ur5m/M2denkjIH9/cvKABbLlyPdyqMYopnUi5Q
      QJ2dUqmohaPJ0/0q61c06zn7kUiEcDhM/9gBnJULrzUriSbcbgd2m0w0EqOysvy016gtCcAy
      YLeUcfjIPgySeHK41jw0mSilkDZiMhlRme2VA94IicTsMoWqqiKn0kgmo67fh0MxqtbOGriF
      5gOfCnpKsVmiqbmaUDBa0CulYTJLXH/NZUxN+6lvqtCPJ72Zhj8WPIpUmdsrx8IyXU3XUFlZ
      RTCYiTUMDB3n+NjbGKwpCJ1UsLIuUxUVp8dCWVUmfSEekvHOZK4NBeKs6KglGPQTjyeoq6s7
      pWcvCcAyUFfbyFF/EkfF3N4pLadRp2w0tVYtWE7vsXGaVlQyMxmlttGFd3p2VCmUH5QfBBPz
      XJraisnpdDpnUd5sO6Kqpowjh/pZtba4ACQTMuOjPsprcu2c0elupt86wXRwBMF3UrBnYniq
      bBgFC+P2ARLxOLIYZSy6D58vyIr1FUXukmGox4vNZcZsMeKpcNLSnhmddr10jP1vDWG3Blnd
      ua4kAOcTJpMJOVUkYMXi3ZOCAJJkxD+Zxl2eRBQFxsbGCIWCs5meWUaxeNKvnilfZXp6mqSY
      0I+53BYcTru+PKDmMs2eYpkZWeYfTcZGvNS1eDAac3N2UkqcslqV5trZRj3UM0NjR/nJT8NM
      xQcwWYy47BL+XGdRQdzlVoJDCljChCdF+pJRgqEQm9dfT3NTC5FIBEUpnsC3ECUBWAZGxoax
      lxV/tYtRV3RvjwANbTYEAco8DhI2P+BHFOBQdzdVrdZZtUHNKlsQsK6EFLOjw8gJE52rrTmp
      xFrvn0qldFekSZIY7J/SRxBVVVGUzEJgkmQkmUxhMMw1Lgs/V66wZ881SMsLv4eIV2bN6mZ2
      vnwUySJhMAtcuuoqGuqbAAoud7gUSgKwDCRSkQUzQBeD1is7y2YjymbLrFpllEQk82LSrTMk
      jZkRwmQy5TTW7CVYBEGgutbDUKCfshoLqLnRYd9ElApPbcFRrJDHZT5hV+SF35HNY2RmMsjq
      9gu5ZOO1C56/VEoCsAx0tK5hYl8fanm+rzDDacxaPC3GRmZAVZFMkh53yJ6NlUFFVcGUdDM9
      7KWqKVfPd5SZSQYK77ayFEM8Fk5hSpczM5QkEs5EgxOJFBaLpI9O0XASt9NJ82onKZ9zgRJP
      jZIALBN2qZIwBQQgr0edlwVOW6rjp7LaRUtbDZC7k03+MiuiKJKWVQ6f8M8pQzIbCAp+/F4z
      ZeW5wlHouQrVMTSVxmNYyQWXZaK2u958kerKBobG+rAIMmvWNjPYN03f6CgWj4N4SKCjec3S
      HnaRlFIhlomqsnpS8VlDWM/VMYgEI4uLEagLGKNLdX3me36yF8dNpVL6SJBKpTBbJKyKu2A5
      riozI5OjTE0Eco7nt//ATBTZb2ToaIB4NEUkkCA8k8ajdrGioUt34W5cfxnTkUEq10XAE+J4
      zxDDJ7y0tlfjttVTX7ZBn9x+pikJwDLRUN9ElXoR6XTufFZRFHA0qhw+2rtgGQt5i5aqSgnM
      5ttrE23MZrO+vKG2/5u+NdI8AmavMCJlJaPJqTQpUicvy7g/LUkPl25dy4a1XUgRN0LIjjFa
      w4qWDv35xidHeePYkzhWBBANAgZJYGYijNlsIpVKMzo2RHX13M3NzxQlAVhGVrddhO+4icBk
      Iue4URIpaxE5fOw4abl41uhCDXyhpRcLlKjPvNIWj9WmIGr/tF0VYf7FLMw2IyNjk8ipk8Gv
      YS9+b4Sx3iC9b/owxOw0NmdiHaIoUFtfTn1DJRWuzAQdbfQZCe+jvD2tC7vdbcLRKmOymSFt
      p6F2ReEKnCFKNsAyYjQa2bLmOnb2/hx33twAQRTwtBo51N3N6vZ2TOZCIf0zawQsJFD5GaXz
      jUBGSaSqQ6K/b5T2zgZC/jhbL904786OksnI4MxhVEVAMpoYmuzG0hwj+zlVVaWsyorXpxCO
      h7j+6g8u6RmXSkkAlpmamloqJ5tIp6cL+s6r2i30DPXR0bgCc95UybHxKdJCEkHMBKdEQdDz
      gQBmJsOkRW0y+WyWJHnzYlNxBavFTCKQ5ET/uN7eBARUMvOQ1awYgoCAIIJ3JoCzrXhEWBAE
      QtEg/UcmaWnNqCnzJZ/1Hh9G8YQYUV5FVMC2QiJfyAVBIBGTScZTXHzhNcu+T11JAJYZo9FI
      a/lG+uQnKaaxlDeZ6R8/QXNlEzb7bGDHVingbi6u5oRTFupby4p+r9Hz9hQ2owmbG0LxMIIA
      JknSPULF8PoDTPef3DNAO6ieTLlAxeoW8U1FKWuqZOjEJIFAGFEQQMjYBOm0okeV47EEKTWB
      OWlkfHoGwZZGFAVEg5gjvLphb4TegR6am1oXfL7ToSQAZ4H6+gZ6D7qgMlL0HHetxImxEzQp
      zYiiSE/vII7qxU2pXAiTLaOuZDMzGFvwOovFzMrOzoLqTDyW5LVde+hsa6Wtc3FG6ujININT
      o6g1CUxOAxmxOrkV7MlzBDKH/ccV+qf62Xblooo+ZUpG8FlAkiQ2tt1IIjB/f1NWZ2ZoZpBw
      KIq1XMBdUVz9gEzzWWxaRaFrFzrHZjcTCRcWFIvVRIWzYlFJfV5vkDcPH+ZQ8BCp6hBm5wLG
      uwCOZqhrL5+z78CZpjQCnCXK3OW0B6+kL/YMJmvxBlBWZ8Y/PUU0JFNeU3wVCcjo/YtJrMvP
      CgXmSEChcozGk0slngzCZtsVfl8YFRXfTGaOciySwOowZya9pBVSKRkBAclkoHdoGMWaoqas
      GmP85P7KyAx6RzGYBOwVUm4atKpimWhkzYWbTivNezGUBOAsUlfdSN/+SoJ+P7bKNEap8ADs
      rDQRCSUygbB5G/niAgGF2pBogt5jY6zorClqaKbTKsasXKPs9OvhE5NcuGnWRTnQN0FFzWy6
      QjKRYnoiSFW9m6p6N+FQjJAvTlPb7IjRXt1COq1wbKSfWFkm6myMOlhTdgX1lzRTV7P4NY1O
      lZIAnEXMZjOdtVsIhUNIosrg9H5MFZGiDXy++b4nT1jUfQv1ouV1VtKyQndvH3ISJCyYTEbc
      HjuJeIpYJIFRMlLmnHv/gd5x6prKc44lE7mqisksEY/PHnM4M/fzecN4TqZQ2BwZg3+Tq4ud
      +/cTJ8n7N36SyoqF1aozRUkAzjJNTc16yoHZ4MIbHsEnHUQyZy3ll1Yyk7kLuE1PhWICZjCK
      1KzI9NqqohIJJQmk4lhcRspqjIz1+Yj0xli/YWXOddOTAVo6quaUBblqkph3X7fHzsxkkIA/
      krNIWCKe4uquW2hqWN6gVyFKAnAOSCaTmQWaJBMb1lzGGwfjJMyzqRHptIqSXl7dNx9BFHC4
      c71O9e1uho4EGOjNJPXpu9jMk8y3kE1SUe1ioGcCu8OC0WgglZRRYxU0rT77jR9KAnBO0CZx
      aOtXNlau5NDADJJog7SBRCSFTB+qukD09iykVUuSgeb23EnyAX+YVFJGMs3uxJhKzV3XyOYw
      E4smsdpyA3wNrRWMDE5TUVGOw9jK6tXLk+mpMd/+BCUBOA+oq23AYb8xZ3O3ZHITA0M9BNIj
      iPYQrgrrnOtU5aTH5eSiWv6p2EnvTiaSCxkzITsCnZ/usCCimjdfILPqdPaqbIqiYrHOXfBX
      PbnqdD6SZCSVUqgru4jqquVLdMum2DOXBOA8IXtzbaPRiN1ux+G4iESii2AwwImhw0SZQDTN
      9rRhf4LhwxG6Gq/OrLZsjuE17MdVVfxnXepyieUNVkaGpmlqyYwCfl8Yj8eR4xEqVmQqmcZs
      LbxsSVPtmnPe+KEkAOcNZrM5ZxVjbetRLUPT7b5cX+de3yGlSsVoNOrpy4IgUB4op2fspZyF
      aU8Hk9nIVCwEZAQgGsncf2hgingsyYrOWoxGA+m0wsSon1RS1hfcCvijlFc59aUdNaYngnTW
      XnRG6ne6lATgPMJqtZ5c5UDRG7nJZCIej+tpy9oal8UCRC6nmwtM2zkw/DRljWfGSDAZZhtw
      fePsig/Tk4HMAlkKTAxFsDnjVNd6MIgi5VUOmleIDBwfz6R8CwIms4GJMT9Op26Ha08AACAA
      SURBVBVDw/nR9M6PWpQAZrf7BEilUvralgaDIWcTCchdGCsbbZKLXW0ERoCMsIT9CVTA7jQt
      esK+qqqkkgoGwURaTmMwGkgmZEzmTLOxO6wMdae48fr3c+mFKj6fD5fLhcFgYHC4j0C0B6fL
      gYlKDLYgNoeJxpZqQMXrm6aiYv41gc4GJQE4z3A6nfqSgVarFUmSsFgshMNh/ZzsPcKyP8Ps
      9kntzV3sGxjHWZ8kGpRpt1+H0SgxMH4QtWayaBRaQ1FUBnanWNu1nqrWBhLJOGH/DEF/HLM7
      hMsjEQkmsZhnl1mprKzUr1/R0snEhBNXowur1UbfwFESqYGTxrNAODEBrDrj72+pCOrJNxeJ
      RLDb5889KXFmyfeuZB8PBoMoioLL5UJRFF01grn7gmnCkL9SHED/YA+iUaG1YbX+3VtHn8PV
      Oncnd+17RVFJe11s6rwRu33uXNzpmWmCQR9Op5uZmXEa6lfkrPhcjL0HdmOr8iMIAgFflI66
      qylzL5zOvZyUBOA8I3ulhmAwiCiKuFwu0um0vjkGzN1iNH9EKFauIAhMTk4wnH4ZR1mucZpO
      K/TtTNHVeREbN2w+5a2WitHf30vCfFx3yyZ8Hi5YvfmM3mOplNKhz0O0pQu1ebOyLCNJEg6H
      I2fEyN4WKXtnmPzvIVcoqqqqMUdac6LNiqIyuDfJ+2/4DTZdtOWMN34AX2CGoG82vTqWmLvs
      ytmmJADnGZq3J5FI6I0wGo3qK7ppW4zmb4uUv50oFN5iVPu8pm0jvoFZEzAaTNJetwGPJzfJ
      7UzSUNeCQZpV02QhkGPbnAtKAnAekvH7z+5npdkAmhCUlZXpjT97uyFtJCi0ZZKGZrCKokiZ
      pVHfdysZVSlze5b1uWpqaghPmVAUlcnRMMk4DI8MAOh7eeV7u5abkgCcpwiCgN1ux+12I0kS
      yWQyZ1NpbaEoTUDybYBiKzNkjxDtzasJDzsI+xPYy4wkU4k5559pVndcRNCXpKbBSV2zs+Bm
      Gss9CyybggKw3LNwSiweURR150Qymcxxd2b39MUae/7x7K1KJUli06prabNehzmwEqdr+Z0g
      NTW1eCzthIMJ0rKC1ezQd7OBzHpF2tpFZ4OCAjDfBI0SZx/t90gmk7qKYLFY9NEhv8fPFo78
      YFm+YSwIAmVlHla2raW58eykJHe0rSEVsnP80DQ1NbMbW2RvBC7LxTflPpOU3KDnGYV6bS0u
      kE6nsVgs2Gw2/RxZlgmFQnNsgUILXOWPGHpOkZrZR3e51t/Mf74TgyeorqoChJzUjkAggMvl
      yqnvcq8LVBKAdwiKohCPx0kmkxgMhpzAU3bgrJjxm93Ys0cKzWi22WxYrXNTrpeDYnVMJpMI
      goAkSXO0jeVwy8IZMoJLqtHyI4oiNpsNi8VCMpnMmTugBcs0tN9Da1CpVCpHJdL+Zveuy9XA
      ClEoiAfoi/NqaHVdTs6ItbFYA6zE6WOxWPSU6WxEUcTpdOrRYlVVGRwcxOVyEQgEdOHRzk2n
      MwvSVlRU6K7R5SSVSiHLsu7u1FyxJpMpZ3ea/P9ry7cvV3tatqcuNf7lw+FwYDbPXTVOkqQc
      NVbbOVGbV6BFllVVRZZl3W44VV07P/BWCE09CwaDehwjnU6TSCSIRqMEAgESiczm2fkxAM07
      pI1Y2UbymeKs+JuGR4YZONHD1su3nY3bvWtRVVX3Cml6fb5dl99gtc/aFqpLYTGdnLb5ns1m
      Q1EUTCaTvou9LMskk0k9Gqydp+9PkHWf7KXgtdHrTIxaZ8UIztY3j/UcwiAaaW5aMedBS5we
      2v6/0WiUWCx3ScPcKYyz2aRaXMBisSzZC5ROp0mn07p6o/nwi+3cGI/H9ZEr2xDXrtd2mrdY
      LFit1jkNPDsbNv+5TpVz4gVSFIVnn3uasnInK9u7cJ/jlNhfNyKRCIlEJqqrNZr8xqSpL9nH
      3W73ojfdyO65s4VKkqQcg3wxaCkQkUhEV9G02XCa+gYZAbJYLGdUvT5nblBVVRkaGsRkMlFZ
      WXVWo3+/ziiKQiAQ0ANg8y0Jkm9YGgyGHD/8fMRisYKjjN1uP6WRPTsNPBAI5IxYkiThdDqX
      xa4853GAN/Y+g0KKDWuuLWjYlVg64XBYn0ec7/tfCC3QthDBYHBOtNZsNi+5DeXXTcuC1eqd
      SCSw2+2IokgikSCRSGA0GonFYkiShMlk0u2KU+Gcd7uiaEQAEsl4SQAWwWIac37u0GIbv9bg
      tI3zipFKpfSEtexRZrHqU7b6lV+3/DaQPZqYTCZSqRSxWIzp6WkqKyt1Q9pms+k73S+Fcz4C
      RCKRnNB+ieLMp84UQptFthTXoaIoSJKkG7Oa+1Tz2hgMhjnzk9PpNMlkkoqKCsxm8yn/ltqI
      osUIYNY+kGVZFzav10symdRtjWwBLCsrQ1VVxsZGMRqNuN1lmEymnFTx7Pqd8xGglH4xl/ly
      +ZeCljKRSCRIJpNz8oUKzSXWXJRaozYYDHrMIPs8zRUpyzLBYBC3231ajR/QDWEt6q31/lod
      tDp7PB5mZmZ0AdXO084JBPwc6H4Rm91MPCSxqmM9TU3N+jlGo3E2dfxcjwAlzh6yLBMOh3Ny
      huZTkYrl43i9Xl1ViUQiVFVV6ZHm080KmG+XyfxnmU/lSafT+mhWaEacdt2iRoBSWsOvBxmV
      wE0ymSQejxdNOc5vMNnHtNXp3G63Plpo5xZrI0tpO4s1ZhfyGmr7HuffP3/ljEXdrdT4f30Q
      BAGz2Yzb7aasrKzgqK9FWbWosnZMi8jW1dXh9Xpzzs82Vs9GEtvpoD2LLMvn3gYoce7QeknN
      u6KtRiFJkh6JTafThMNhPbPU5/PluDs1fToUCunrmGqNS8vlKRTVPRfkTxsVRbFkA5RYGFVV
      CYfDTE1N4Xa7czSCVCpFOByeczwbTTCWGiFeblKpVGkEKLEwgiDgcDgIBoNArnHs9/v1JRGz
      XY0AoVBItxEsFsuyRXNPFUmSSiNAicWjqiqRSESfYBMIBHRvi7ZShbamUTgcRpIk3G43kFGV
      zjcBgPMgDlDinYM2EgA5LkZNIKLRKLIsYzKZKC8vz/G4mEymORmp+f8/26iqWhKAEqeGNgMN
      0CfaWK1WJiYmCuYSFUthPtcjQkkASpw2WuqCwWCgqqpKn6+c70JdTPBtMWj5P9rKedpMMq3M
      xXqcVFUtrQxX4swhiiIOh0MPuFkslpwJ79kCcaokk0l8Ph9+v1//HI/HdfdrdrQ321gvFpfQ
      jWC/348kFd7QrESJpaDN4dUMYpib5blUtPnAqVSKRCJBWVlmEpUWuwByJtgvFl0ASpR4N1JS
      gUq8qykJQIl3NboAyIkIgXAcJRXDFyy8f1Q2Ae8kxweGUAFFTnDs6DEScibfPJ2M4g9l5ouO
      j5xgfNqnXxf0TnHo0GFm/KEz/Ci5pBMh9h48VvT7ZCzE2KS36PeFURkZ7KdvcIRCeuPM2An6
      R6YKXrln54vsOdxXtOSgbwpfKEoyGiISl4kEvMz4fIxPTC+xjrN4p8ZJyCUNdz4Md955550A
      /Qde55m9Q9iiQ7x0aJyWSiu9A0O4ysoYHRnB7XYzODR4MrKn8OJzzzPau4+JlItXnngQu9vF
      48/spKvZwz/+4z9irV2N4O3m2Tf62P/as7Suuxi7SWTPy49zdDzB60/9nLqOdYyc6MNgthGY
      HsfscOObGCEcjTM1NUUoEmNybASrswyjkKanuxuLo4ywd5qpmWliKZXQ6DF+8MAOVnZ2MDE8
      ACYbFpNEyjfMj375PLXVlbgsRiZ9YRxmgeEJL26nHe/gIX71eg8b13YAMDE6iC+cwO2w0ne8
      G4PFScQ/xVQgituZCf688Mt7OTYlE/ZN09a+guH+4yRUI3arhenxEXa+/Ax+oYwau8jg2BTl
      njIEYHrwMHf97Hk+8L7t+KdG8IUTOM0ifQNDeAMhyj1uQmM9/PLVo6TGD3BwPMWJt54mmJY4
      0jtCS42bwbEpPB43vskxhid9lJe5ONHXgyyYEOQYYxOTeIMRPC4HA709YLLwypO/xNXQQWB6
      grGJKTzlHsTzLBJ7rtEF4K3XnufN7nGUyBRj3gib1rbzyvNP8sqBEY7veZmOVW088MjzXLL5
      QkCgY+Uq9rz+Ak1d69n3xn5uve1Wnnv6MbZefS0WNYxir2fo4Gt0Xfl+7IlhwsYaGqucDPce
      xidbiPrGWXfx5fQeeJMfP/Ao1eYoowknz/7yASyGGDuPjPLCw/dS3ljN48/v4fjbL2KrqOHB
      n/8S1ddHzww8/6uHaO9oYl/POI32BPc//QY1lRXUVleQjvp4dtdhygUfewa8vPziS1Sb4xwY
      TbKqtY6ob4xjY1E2ru1gtPstHn5uL6NHdjM8Ns4Lbx2jusLNj777X9jKa2lraQTgvocf43Of
      +QSd7W3sef6X7B2KsvuZR3G6HTzy1GvYiCOYLDz97MvY5Gn2DcdZ01ZPYHyAvX1TtJYLPPbS
      fkaP7CZtMPL9+3/F+gvWUFVRjq2skud3PEEgGiXk9zI+HeTqjW28dmiYvS89jizaMAshHnzi
      Nao8Lvr3v0z3jMpLTzyEw2rg8VcPMnboNQKRGI+9+BY1leUc2/MqzavX8p//eTdVlhj7hqJ0
      tTeew+Z2/qGrQP3DPi7u8DCheDAkAzx03z00da7C7/WydXMX//u/d7Pxsq36hQOHdjIsV7Gh
      rR7ENKqaRJJsSCYzhpO9jN1uIxqNEo3Gcbuzt9EUuP13/5DpQy8xGpGwKinWX3EVr++4D6mi
      DbMIzW0rqamsZtMlG4iHQgycOMFgXx9tbe0oQGfXOqodRox2F+6KatZsuoLLVpXzyu79+l0q
      quu4ZNMGJmbCNDrSPPzCXq64eP2clzA2Okzn2g10dTZjrmpnQ6OF194+xu2338przz9N6OSG
      JVYDhBNpotEow8PDbNh0Cc1Vdg4e6aF97QbaWhsITI4w6fUyHROpr8jkVpWXl+MqryLsndDv
      Mznlpam1na6V7SdfiZEVFQbSzmaqTGGcjaspP+nqu+322zm85zXefOsAq9ZtZsumDYwOD7Nx
      y2U0eEz4Y2kaWzvoaKnDWtVx8j0cpKwsk31ZXl3H+gtW4fed+03pzjf0SLCrpp7rtl7C4WmY
      OrILyWmnt2+E2io3ay++gu/e/yyb17aePFvhpZdeo9xezStvHGT7lZv48Y/v57r33Zwpy1NF
      0mlh1bb38OAjT2Ata2ZVvVP/rmtFJ5VlTuSGVtI9u/CUlyGba7Clg2y+/Aqc4eOkTXbizc0Y
      BYnmxjou3NrBnu5RVq5sQfQrOC0SdY3NeGpasMRe5fXXdzLmT9LWmlFpBMmCSQ7y86d38aGb
      bkaYPsL3dhyiwpbxE0sWJ5GpN3jggQfYcsllHH3xOUYFEzdd5+KpXpW25np6e/tobluJ+aRr
      +daPfpif3/cTDAYLN1z/AZ586iFMthY+fNMV3HPvQ0ypMhdcdi1Wg0BKTtPWMVuXxrpqLrzk
      Ih548BFGBRMfvHETYbU358e4dOuVzIg1VKRb8ZvqEaQEjXXV9PX2UlPfzBXbtvPM449x7/Bx
      rnvvzTzx2L1YKtewqqkS0W/CnapBTYc4fvI9WGMqFpOJ5sY6JIuTuuqzu//WO4FFxQH2vP48
      I2Ej77/hymWryNjAMZ54aR+f/MTHMC6Dmvr4z+6meu01bF7TcuYLL/GOpRQIK/GuphQHKPGu
      piQA5wVRDh8eKPrtzIyPvXv3MDg2GxMYOHyYhaM1JRaipAKdFwTZuXOIjlqRN4+eQDBIqCYH
      iYljdF16E84yA7WucrxDR9h9aJC0wYzi92MsNzE1neSTt958rh/gHUtpPsB5gZFIYIqApwqL
      1UZNfSM+r4/yrgtJxcNIKTd79u7FahKxWi24PBV40wqV9dU01pfWUz0dSiNAiXc1+ggQiUQW
      dcGpbKVTosT5ypJHgGg0uqj140uUeCdQ8gKVeFdTEoAS7yqSJ06QmpzUP5cEoMS7islv/jPD
      d/we8WPdQEkASryLkL1elGiUxm//B+N/8zdEXnttfiN439u7qWxoIzAzTiqlsn79upIRXOId
      i/fuHyG6XZTdfDPpUIiRP/3S/CNAIp6ZmfXmC48humr1NVhKlHgnEnzqKVzbtwNgcDpp+s63
      5xeA8ooKRFFk8zUfIOUdRDq5cXGJEu804keOYGppQczSXgRJmj8VomPV2mWvWIkSZwP/Qw9T
      dsuH5xwvGcElfu1RUyni+/dj3bSJbzx5jB+9PqB/V8ppKPFrT+iFF7BffTWj/jhvn/BhMopc
      UO9mY4unNAKU+PUn8MgvKLv5Q/zL09386faV/PPH1vO3vzrMTCRRGgFK/HojT0+jJhP0ig7C
      iTE2t5YD8JX3reFLD+wrJcOV+PVm5q67MFZU8iVfHV9+zyo6a2aX5/n+K/0lFajErzGqSujp
      ZzjcsRGP3ZTT+AE+c0VrSQBKvDOI7T9Aoq/42qoFrzl0GFNbG//+yhBfvKFzzveCIJQEoMT5
      T/iFF/jm1+7m7t3DS7ou8PDD7Fx5Geub3NS5rQXPmVcAVDlO78Aww8PDDAwMLOnmJUqcCfyP
      PIL33vt4Y/ONPHPct/AFJ1GSScL7D/CTsJs7ru4oet68AtB7vJ/RsWFefvIhwqqVVCpVygUq
      cdaY+f4PiLz6KkNfvJOLuxrw1FUzPFx4+fl8ws8/zxNlK7lxbS1uW/Gtv+YVgHg8SiAQoqFj
      LRP9RzFKUikXqMSyo6oqE1//BqmJcer/6Z+4f88Yt21p5r1rq3ns8OTCBQCTTzzFUy2X8KnL
      W+c9b944wAUbNnHBoqs9S3h8EqvHjeE0N0Yrcf4hpxVSaRWraWmb0S0WVZYZ++pXMbW2Uvm5
      z+GLpZgJJ+iodlBrhk9/73U+v33+HLV0KMR9QzK/dft6LNL89TzjRrCaTPKl7zzF/a/2Lnxy
      iXcUqqry5w8d4GuPH1m2e8x87/uYO1dS+fnPgyDw8NsjfHhjAwAOt4MKUWZgKjxvGb5nn+f1
      tVdzy8nr5uOMC8DYXT9i1FHJfbtOkEorp1VW+OWXkX2LN3xKLC//9mwPzlefY+/b3SjLsJyU
      mkwSev45yj/5icxnVeXxA2O8d12dfs77VpbzqwNj85bz6L4R3n/teiTDws37jApAcnCQpx59
      he1b2nlPo5mfvTl0ymWpssz433+N6e985wzWsMSpIHu93HP/Cxx76mX+8EI3HT1vs2fwzG+2
      EXj8CVzbb0Q4ue7U3iE/q2qd2Eyzmvo1XbU891Z/8brOeHk4YOPjlzQv6p45NkBgZoLegWFE
      ycLatV1IhsUv1K+qKhNf+wd2Xvxevryujoomkdt/uoePbGrCZFy6nIWefoaym28mdmA/8e5u
      LCtXLrmMEguT6O0l8OijGKuqkWqqMVaf/FdZSXJoCO8Pf8grewbY8b7P8b2vfQqTZOSGI1/j
      yUPjbGrxnLF6qKqK/8EHafqv/9SP3ffGEL91Se5+Ds7WZmqmn6FnIjQnsgvw0lvH2XTNZtzW
      xW36ntMyfaEYtVUeyjweootcKU4j+Njj0LqCmepG2qocuDvbuT41yoOnOAr4H3yQso/+BjVf
      /jKTX/960a3uS5w68e5uRv/yr7BdtBFjuYfk8AjBHU8y+c1/ZvCzn2XqW//GxKXXcd9Nn+fb
      n7wYk5TpLy/d1MHOt46f0d8kuns3ljVrMLgy2zqFEzL9UxEuaHDnnigIvLejjEf3F1aD7j7o
      5dOXL34TlJwR4MCbryFY3URTAh+7+b2LLiQdDOL98Y849mf/j6uCsn7845e08Jkn3uajm5c2
      CsS7uzFUlGOsrITKSiyrVxPasQPXTTctuowS8xM/coTxO/+Gxm/9K1JdXcFzJoNx7vzxW3zn
      4xfhyupRXdduo/4X3+HI2NV01bvOSH28P/oxNX/+Zf3zo/tGef/6OgptanlVVz3fe/E4X7y+
      EyHrhO4RPzableZKx6Lvm9Mq12+6lO3bt3P9FZuY8c9vaWcz+S//SuUX7mDHcT/vyzJYKrdf
      x9Xdr3DfG4OLLgvA99N78Hz89tly7riDmR/ejRKLLamcEoWJHTjI+N/8LQ3//m8YamqJJGSm
      wwmGvFG6J0LsG/Kzs2+GP7h3D3938wU0eHLTCKTqaq6rFtlxaHzBe6mqiqrM7wxJDAwgiCKm
      5lm9/Rd7R7l5Q2EvjnPLJhqO7+PwWDDn+PdfO8Gn1y1NLcsZARoa6zl27ChWdyUrqhYnRbG9
      +0j7fJi2XsnI93fRlnWdaLFw24Y67njibW7d0oTZuLDvOB0KkejtxbZhdjdH0W6n/PaPM/Pd
      71L1R3+02GcrkcX+YT9/96vDEIshT0wgXfEFhEf6EIV+LJIBq8mANe/vn924inX5KshJrtzQ
      yu/t7edPbpjfNnv0ybc4eKCPv/jjDyNIhfVy349+RPknP6l/PjoepL7MkjPqZCOaTNzUbOPR
      fWOsrc/UbyqU4PjOPWz++1sX8zp0cgRgdKCH0Wk/5arEiqY6psdHkBwVCEoSRVEoO7ltp4Yq
      y0x84xs0/PM3eb5niqtWVs25QfVHb+Hq//NP3Lt7I7+9QFQOMglMZR++mdFAnL959DBbWj18
      5ooVuD7wAQY//RmSw8OYGkt73S4FRVH5h8eP8A8daaS77qLxP/4dY3n5aZVZft02XH9xN/3T
      W1lRaS94Tiop872907Q0d/DT7zzI7X90G4KYqwqnAwHi3T3UfnWTfuy+3UPctqVp3vtffkEj
      //vGMdT3rEIQBH70+gC31YFoLZz0Voyc2jQ1N6HICuaTEVxFTbNv/wFee2EH/aMzcy4OPPIL
      XDfeiFRby+P7x3LUHw1zWxu31Kj8/IVDxFPzb9OpKgrBx5/g2foN/OG9e7jjmjaSaYVP/GAX
      /dMRqv/sS0x+/RtLesAScN+bQ1x45HVMd3+Xpu98+7QbP4CpuZlrXUl2HCyuBt2/a4D3ravl
      mx9bz2PGBl76759CnuHsu/8BPLd+DE3ZT6TS7B/2s6V1/jq6rrqS1kO72DvkJ5ZM89yzb7F9
      U+uSnyPPMlVJKwpGQ0ZVMdvcGNQkiWSKUDA4Z2Es9wc/gOcTv0UilWbEH8tRf7KpuuVmru/b
      xT275rcFxt7cx187t3BkJsFPP3sJG5o8/N41HfztBy/gK48c5O5pC7jchF99dckP+m5EiUYZ
      +Mn93PfkPj57eQtN3/8ehrxR/HTYdmETL+wv7OWLp9Lc/+JRPrm1HbPRwH986lK+MenkyA/v
      1c9RUylCzzyD6z3vATJpFt948hjvXVeXY9wWQqquZrs7xaP7xvj528NcO/AGzisuX/Iz5AqA
      YMAbipJOZlygyViItRduZNv2D3DhqtY5C2MJJhOCIPBSEfVHw3nDDdzkP8ov9gzzxoCXwZko
      sWTuaPDMkQl+9xfHueNLH+cr7+/KyeFor3bwk9+5BJNB5I9dl7HrOz9EleX825wz5KnFZSie
      LZRIhOnvfpfBT3+Gf317hj+99VKqP/oRRJPpjN6nattVGN7axVhgrnPi7tcG+EiLGas746uv
      dJr5+ueu5c/3xBh74OcABHfswHn9dQiSRO9UmN/6/i4ay218ZuuKRd3/knUt7N59hAefO8Qt
      qz2n9Hy5yXBGC0pgjNGZarqAqlpN155fr3p4zwh/+d41Rb8XJIny66/jD9UhXj1ekz8KkpDT
      iAP9fCu9j85VHy1YhigKfGbrCq7vquGrP3PheW4XG7dfsdDzLTuJ/n4GPvoxVvziEUwNC+ee
      nNI95PSiHAgAsQMHmPnBXTi3bePE//ev2I9Oc/U8ndPpYF61ivdYQzyyZ5Q7rmnXjw/7orz4
      9Bv84A+25ZzfVe/iz//oQ/zFt+7j78I/Qnnpeaxf+ye+vuMokWSaf/jwuqJaRCHcN25ny1/8
      FxYRav7qU6f2EGo2Ca/6i0efVI8eP6EWIxKJ5Hz2hhPqJ7+/q+j5GnIgoA781ieKfj/8pT9T
      Y0ePLliOqqrqrr4Z9c//9DuqoiiLOn85Gfz8F9TJ//i2On3XXctT/kxEve1/Xl/0+UO//wdq
      YnBQDcdT6s3ffkWNxFPLUi+Nse/9QP3w13fkHPvje99WX/zve4pe8/zRCfW2T39Dvef/flP9
      0LdfUXf2Tp/y/ftvvU3tv+03VfUU20KuCiSnSCpLi+49eXic7WtrFjzP4HJhXrmSoTt+j+n/
      /V8iO3eRPhltlmdmkGemsaxatah7bmrxcNBUQeT115dU1zNN5NVXMdbWUv7JTxB55czbJaqq
      8jePHqLaZWYqlFjw/NTIKKqSxtTUxL8928Nnr2zDZl7elW88123DvXc3/dOZ3/LoeJCpp5/j
      sg9cXfSaa1ZV857P/gYHtmznJ79zCZe0VZzy/a0XbcC+dSsFI2aLIPftSE5a6ytJJuKkVRXD
      Igp98uA43/zo+gXPA6j96leQZ2aI7d9PZOdOZr73PZRYDDWVpOLTn150pQ2iwIWbu3jzsV9x
      zeVLN3zOBKqiMPWf/0Xjv32L/riIlE6TjkQw2Au7BE+Fxw+M01Jh54auGn61f5RPXzG/buy7
      /z48t95Gz2SI7okQf3HT6jNWl2KYW1vZZo+z4+A4d1zTzr88eZTfa1aR6uvnvW6hiSqLpfIL
      X9CT506FPC+QgCgK2G1mxsYXNux8kSSKqlLhWPzEF2NFBc5t26j+4/9D8/e+S8uPf0T917+O
      88Ybl1Tx91xQy5PHZkiNzZ8au1wEHnkEx9at3NMd5jf++zWON60hegZHpFA8xXdf7uOL29po
      3vcqTx2amPd8JZEgums39iu38ve/OsJX3te1oCflTLFtfRMv7B/k7UEf6ad2sPE3Fp9Gc7oY
      3G7E0+h0cgVAidPTN8TY5AyNddULXvzU4Qm2d9We8s0BBFHE3No6J0CyEJe1V3BwxQZ8Dzxw
      Wvc/FZRYDN999/OTpss5PBbkgc9fxk+EZsIvvnTG7vGNJ4/xe1etIPDVKdwFWQAAEZpJREFU
      v0T+1S9x+iY5MVM8QTG0YwfOG7fzfPc0ndUOOqoXb0yeLpo36M6H9vE5dwDL2q6zdu/TJafV
      zfgCNNbV4HIXDn/nc3l7hT5b52wjGUQ6t1zAwWdeR02lip6nyjIjf/KnhF948Yzde+aHd/Pt
      6kuJG0z84y3rWFnjxLayk8MHes9IhuTeIT+TgRgX3PNtrJs3U/vXX+XyVx7ml3tHi17jf+gh
      ym65hbte7ed3r2o77TosBfOaNWxjhpadT7P21g+d1XufLjkC0D88iclqZt2q9mLn59BUbsuZ
      rHC2ec/aWl4p7yT41NNFz5n812/R7apn9N77mbnrrjmRyKWSmPHyl3sirPzoB/m/N63W1Yw7
      rmnnp/bVJI4dO63y5bTC1x47zOf2Poy5o53yj38cU0sL12/t4tk3jhesfuzgIaTGRvYHVerL
      rNS4zu7CBYIg8ME1FXwxdgj7VVee1XufLjkCICpJIsEAh7ozM24mRgfxhaIEg0H8/jM/A+h0
      uWplFfvWXEbg5z8v+H3wqaeYHhzl62Vb+PN1v8kbe/sY/cpXUZPJU7pfPJXm9392iOs+dTOf
      vzq3k7igwQ3X3sDxNw+eUtkad706wOaXH6FpRT0Vv/M7+vG637+DxtFeDo8F5lzju+cePB//
      OP/7Uh+fu/Ls9v4aZR/5CNV/9qWzZnecKXIEYOPFV3DNNdewdmXG22BxuDm8b0/RXKBzjUUy
      UNtUy5jBRry7O+e7RH8/3h/ezYNX3c6XblzF/3xqCw9t+hDfDnjo/fwdyF7vku6lqip3/PhN
      rhvdy21XFB4hv3BtJ3eNnHoDGPHFePRnz/HJDdVU/cHv53xncDj42K3bePjVnpzjab+f1MgI
      Y9UtqGSi5ucCc2cnjq1bz8m9T4d5Lc+R/m461m4omgt0PnDj2hp2X7gN372zOSZKNMrYX/4V
      qS99hb6QzLWrq6l2WvifT2xiw29/jC9WbuPZ3/2TOUIzH48dGKPyiYf48O3FvVVbWisYNbkZ
      9y5+LoWGqsKdj+znS+0itV/604J+7Ssu62LnoWFix2dX3PD//CHKPnLLOe3938nMKwBmq51E
      NFw0F+h8YNvqGnZa6kl095AOh1FVlbG//msqfvezfOtIjD+7cVZPFwSBj21u4r//6iP89Mbf
      5R//+ntM/tu/z7vyhJpOM/bT+/ifR97k/371k/POTRYE+O3VTr7/+tImAAE89kYftckgV/7h
      bxdVIwyiwKVbVvLsd36sTzQJ/v/tnVlwVNedxn+9L7e71RItqVsbEliggEAym8EgA14EJraB
      OA5OasYP82BSfkmmpnBNzYOHyRSViXHiVFLBcU22KQ81sRNX7CRmM4sNwgjEJhACgYQWtKsl
      tVq9qtX3zoNA3fd2IyTLTlxSf09dX5++9/Y953/OPeee//cdOUJo7QbaB4Ms+wJzdGcLNLt3
      7959vy8z5mSSZrNgMBgwmkyogEgkgu4+iQ1/Dxi0ag7WdbF6rh1N0y1Cly+j0upoXruZa51e
      XlpTmPAbm1HH1mX5nLPkc6Wph4L/fYvwrUaMCxfI1pSDV67QuetVftVvZtOOp1hefn+NyXvI
      143yk/0neXp9KaYHiDLdQ/+dLl77cz1vvrweg37ie5tu1vN/H5yhQudltLcXlVrD70acfH2p
      a0r7aFIYw4xwiKlc5KTaZ2Xtj3ehy8kh7619fP83Neyd4A21WqXi1c0lvNzrp+sftlLaUU/H
      rlcxFBVh3/EtBt99j6jbjfhvu2k43cdrD09uuddQWMg3vA387nQL//yAbCmAqM/HD946xPdf
      2oLF/ODRtTTXRtcjG+l5Zx8GwYz1339AzeF2dm2e3DaSFOSYEfLoTy7K5niLF8fOneT81w85
      WN9LWb6dXPvEu1jVKhVvvLCUHx1qwF++irm//Q3WzZtx//JtLBUV5P38Z7xxaYh/3VyCegqr
      G5uL0zl2/BL+8MRbtiVR5MjrbyOVlvF4yYP3U8HYY9yGxTnUP/48Gnsaf7gT4cVVBVO6vhRi
      mBEBkCHoEUUJ6YlKRJudX528zSsbJvcuw27W8x9bF/Mv79UyKkoIj6wi76dvYn18I581uREM
      Gsryp5ZEYn2sgi3dl9l/tnXCcl1v/ze/CGbz2rNT82N+rjyXY+nFZP34TQ7WdbO1fOJ9Nync
      HzMiAGBsFDh6vZd3qlvZ9nAuVuPk5ylL8+w8vcTJjw7FXmKNiiI/OXKTXZumvqHMvHIlleE7
      fHCpk9ON7qRlhk+c4OdHG3hpx3oc1qmJCBc5BHq9YfafbeWZpa5JSQCmkBwz5s5VLnLyxwt3
      +OhK56Rl8eLxnVVz6feHx3Nc91e3sanUSeYUGyeA2mDAYE/jt1vn86dLHXzv95fo9caWj8PN
      zZzdu4+OTd/kheWfL8G/crGTX5xo5MVVU/+vKcQwIybBAM40I+GIyM718z9Xj6hSwZ5tS/jH
      X58ly2rgw8sdvLtzzee+HstjFagunuWNF7ZT0zzAK/svsuVrDr5+7Ri+ox/zyxXfYe83yj73
      m9PnynJIN+uwfMn7/Wc6ZpRN6qB/BLtZN63X8bf7fGzf9xk/e/Fh1i/8/KmEkc5Oel7fi+O7
      32X48GG8Z8/x0SPbOe4WKS8vJivDwisbH7ysmsKXixkVAF8UuodCONOm/8Kv7eWdaLOysG2q
      RFi9GpVOR9dQkP3VbXzvyeLUs/tXABMGQFt9Nd1SHiPu66gMc1i7etmsCIAUZg8m7IIK8vIQ
      gdbGBsz2jK/kXqAUUpgOJn4ECntpHwJGvIyEwxTNn08wNQKkMIOQmgOkMKuRmoWlMKuRCoAU
      ZjVSAZDCrEYqAFKY1UgFQAqzGqkASGFWY8KdVHWXz6MVHIgRH5GIRFnZkr/VdaWQwt8EE44A
      oQj4PG7Of/IRatv0JBBTSOGriAkDwKgDi93Big3PEhloI2VVncJMw/ibYP8kneHD4XDMRE8U
      Ud8VtU19nrmf/97n/zI/k2CZ8QAoHWLuwefzpfgZyt+vzmcCP6EuUDLEawL19PZiuaujo48z
      KLsff/zgh9Q1d7NwfqGMhzC9PX4EizGOj3Ly6BG6h8LkubLG+eHBbq7V38bt8ZCd6ZjEccK8
      987vuVR3BZUxjTzXWJKLu6OJm229eIa8OOakj5cfDQxwuqaWzp5+8nOc43w06KE/qEK4m4F1
      j685fYzOfj9REdJslrjyA7z/wQG8YZH8uOtvbainc2CQIW+AjPS0cd7b08ZfPj5ORGXE6Yhd
      z3B/F1XVF8jMdmHQadHr9Qx2tHK+/ia+IQ9GIQ2DXjtevvHaJT797Cw2Ry42s2Gcj6+T+Ou/
      fukMR45XkffQ1zDp1EnL36vzOy2N3LjZyJDHg9XuwGxMXufxbaT60485f/kmRSXFmOL4qxfO
      cPl6C0Xz5mKI43t7ehEsice58NknXL7axNzieRjv8s03bnDtRi0XLzbIjh/0DXG1rp6uvn5c
      2Vmy49ScPsGt9n4K83PQ6XTTWwa9cOoIf/jr0QT+3Kmj/OXIJzKu7uIZOvuHkxxForvLjcej
      1B4N0dzUweVzVdTeaB5nNVoN1aeOcr2pXVE+Qm+PF7OgzOFVYbVacOUXIAZiboYalcjxjw/R
      0qlIWpck+ro7iIhyuq25kV/ve5P3D8r/V84cK8NhCY0iuUUSo4wk8UXWqKI0XLtKIKqwZhgd
      YTSaOMuSJImAf5jDB45wzyTJ7nShGw1w69YthoMxod9hdwdnL11LOIbfO0jVsQO8vncvXV65
      lLzKYMIkRRgV5Vl0TbVn2LNnD51DsfJOp4uhIQ86nS5BubGp9jSv/ecPGQzEpGCab9TSeCfR
      2KP5Ri1nLlylvbEJ5eb686cOsWfPTwkoeHd/ojZtUUkJBhIf35uaGjlx+M9UnbuSeO7m2zRc
      vcCZi2MixtMKgNHQMIHRxPTDZCmJpcvWsLDAQWa2UsIjzPnqCzS3Kxu0kbxcFxVPVVJWErMG
      MlutpKc7cGUpjZRFThz4K1UXLit4DWI0TDiipqw8pvBgswpkZObiSLfJSmuFOTzz+GrmLZC7
      Xtacq8aVX0S2Q37e7IJiPJ2NtHXKK1qt1WOzCWjV8nth1Ki41T1IaKBXfl6DCcFkRKsIJJ1G
      g2/Yy8qK9dwLbZVGj0aKotHqUCtvtQqiI0ECcZpE3oFeRK1AUWEhBo38ByMBP/o0O/Eidn7v
      IF2eIOXl5Zj1sfI6o4ArXeBafT1BRQ8hGtPZtn4Z/jgppPyCuagkiZFwOGEBJSsriznZ2bJ1
      eE9/L8MjKsrLS1Fq6pkmcIDX6/XE/6vSsuWsWL6cuXmJK5cuVw6FC5ewZlkpMM0AyCpYgDMt
      UTUh6PfTP5gop+4bGqCpVd7Qa6pO4wv5ENVKGRMRT18PbZ1KqyYRMZos51fC7wkhaZS9bhSt
      zoiyBsToKCRxpRkd7ubcTTeE5DLkFRueory8nKJ8l4z/8P13CSXTv7p7PlGx21ytN/FExaMU
      FBXK+PCwB99I4ogRCYexpglE4kaTcGAYg2AjOhoh3tPQ6shlVdkiBEHAEOebZcvIQq/VYDdI
      sgYKEAwG8Xm9nPj01Dg37HGj0RmJRCIJfgQqtZqQp4/hEfkXznQLde1eCMTqXWu2s3hBERnO
      bOJbSVFJGbkOa0LPPdjXhcFsJZLE8MQiCESiUZQ1rzcYGOgfTLpCGUiysNOvGEmmFQDDPj+h
      kHKwgoUlJViT+DZJWgGbUX7KlesqEAwmiMo1+2uqThLU6Qj7lH/CgCM9jbQMq4I38ugTKyku
      UCok66h89kkWzZPLFGrT8vnWU8vJzC2U8WqDlZab1+hTmF+7ChdStnghuU55orzLlZPUoHA0
      MEiX24vcdDPMyZOnOfThn6i9flt+Xp0xoXcGxnp0UY0h3ohEkrBlZFJcXIzVJDeHtlhtmM1W
      THG6SIItndKHcmnzanHaYsfpbrvFrdYxGZh1cdLmgi0dm2AgEonQ358oI29Kd+EQ5H10R7cb
      pwWOVJ2T8b5AgMDAAMkcGZQ9d1pGFiadOmkARMJB5rhyEt7cSqJI+aoVCbwrNwer1YYSRpM8
      13tamhr5hfMTnh0BBgMRMizyirk3B0jLUtov6ancshm1Vl5+5boK3P0H0AvK5BsRn6efzp4B
      lhbLvylZuiLJVfr5n7ffJb90KYXzYr5nUV8PF5uHKCwQgNhNkcJe+n1hBgYmZwjy6JPPkcyn
      8sz5q2QlSDNKpDtyeaZ8OVmZ8pFEo9UhaTRIYbkdanR0BJ/Px6kTn/L8jmcwAAbBRqGQWLkw
      lrDUfqeVokUrIC6xv3fQh8rXjtsXxWUda7zOgmKWlPRyp6MPbVzwWe0ONCoVaQY4efY8D+XH
      TO98Ph9Io4QjImZdrDObm5vJ4WoPz2+TS8msqdjIyKiE8jlBFBlfTr+HjCwXmXPsdHe3oRwL
      /WEfLQ3XWLGilPgmXP7IY0nvQ0NdHYa80gR+yOPBbIh1YtMKgL6uO/gkgVKFst/8glwCyBtu
      6bI1jGpMSKJidgkYjMme7/Q8vXVbEl7H81OwVAUT+XkuXDkOGas2pKGJNhMZkfc2GquLf/r2
      doyW5A1sshj2uPGjDHYjeflZjGh1CZNmo9WCOhxCb1EoPIsSZqud1WseS2hEyRAKBUl3ZKHT
      yjumXFc27b1DmBU1rlFrEKUoSnvoooIcTpy7zqbK1TJeMJthQD4q+72D1Da0MW+OhqBaPjJr
      tDpMSVpZIODH6/VyqqqGJ9atHOel0REszhyU3V7h3AVYs7VMVqvj2R3JneOd2dl4xFh4TSsA
      ujva8esdCXxeUXJVZDE0jE/64nx0J4exuUSk08GiebHJtBT2UFPfwjJRoqhAPjG3pk1NCzQZ
      tmz/NiPoMerkDX3+ouT7qXzuPsISBEPyEUCKRgglWU26H0ZCoYTGDNDS2oZgNiY8KwuCQETU
      IOjl13m7pQ1HugVB8RixZMValigGWlGM4nTYudk+wDrT5J6qN25+Lik/6A2g8oW51d5FcV5s
      lGxpbsYb1rO0fNGkOoKJED83+H+bbBzDcFceQAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Variable Importance' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
