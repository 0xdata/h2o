R CMD check h2o
Rd2pdf
??Rd2pdf
install.packages("Rd2roxygen")
R CMD Rdconv
CMD Rdconv
?read.csv
?read.csv
?read.csv
?read.csv
?read.csv
?read.csv
?read.csv
?read.csv
?Rdconv
Rdconv --help
?read.csv
?read.csv
?read.csv
?glm
?kmeans
?randomForest
??randomForest
??randomForest
?read.csv
read.csv(C:/Users/Anqi/Documents/HexData/BedroomRentData2000)
read.csv(C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv)
read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv")
bedrooms.data = read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", header = TRUE)
summary(bedrooms.data)
efficiency.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/Efficiencies.csv", header = TRUE, sep = ",")
names(efficiency.data)
efficiency.data["bedrooms"] <- 0
efficiency.data["bedrooms"]
onebed.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/OneBedroom.csv", header = TRUE, sep = ",")
twobeds.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/TwoBedrooms.csv", header = TRUE, sep = ",")
threebeds.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/ThreeBedrooms.csv", header = TRUE, sep = ",")
fourbeds.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/FourBedrooms.csv", header = TRUE, sep = ",")
onebed.data["bedrooms"] <- 1
twobeds.data["bedrooms"] <- 2
threebeds.data["bedrooms"] <- 3
fourbeds.data["bedrooms"] <- 4
max1.data <- rbind(efficiency.data, onebed.data)
max2.data <- rbind(max1.data, twobeds.data)
max3.data <- rbind(max2.data, threebeds.data)
allbeds.data <- rbind(max3.data, fourbeds.data)
write.csv(allbeds.data, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", row.names = FALSE, na = " ")
rm(list=ls())
allbeds.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedroomsAugmented.csv", header = TRUE, sep = ",")
allbeds.data["metro"]
is.na(allbeds.data["metro"])
which(is.na(allbeds.data["metro"]) == TRUE)
length(which(is.na(allbeds.data["metro"]) == TRUE))
which(is.na(allbeds.data["metro"]))
ind_na = which(is.na(allbeds.data["metro"]))
allbeds.data["metro"][ind_na]
allbeds.data[1,"metro"]
allbeds.data[2,"metro"]
allbeds.data[ind_na,"metro"]
metro.ind = which(!is.na(allbeds.data["metro"]))
allbeds.data[metro.ind,]
allbeds.data[metro.ind,"metro"]
?subset
subset(allbeds.data, !is.na(metro))
metro.data = subset(allbeds.data, !is.na(metro))
length(metro.ind)
size(metro.data)
length(metro.data)
nrow(metro.data)
nrow(subset(allbeds.data, !is.na(mcd)))
nrow(subset(allbeds.data, !is.na(mcd) && !is.na(metro)))
nrow(subset(allbeds.data, !is.na(mcd))
)
?kmeans
subset(metro.data, UnitType == 5)
names(metro.data)
subset(metro.data, Rent_Type == 5)
nrow(subset(metro.data, Rent_Type == 5))
nrow(metro.data)
unique(allbeds.data["areaname"])
length(unique(allbeds.data["areaname"]))
nrow(unique(allbeds.data["areaname"]))
?unique
?glm
?glmnet
??glmnet
?glm
?kmeans
?glm
?glm
?cv.glmnet
??cv.glmnet
?glm
??randomForest
source("H2O.R")
setwd("~/workspace/h2o_master/R")
source("H2O.R")
h2o = new("H2OClient", ip="localhost", port=54321)
prostate.hex = importURL(h2o, "http://www.stanford.edu/~anqif/prostate.csv", "prostate.hex")
prostate.km = h2o.kmeans(data = prostate.hex, centers = 5)
prostate.km@km
names(prostate.km@km)
?kmeans
prostate.glm = h2o.glm(y = "CAPSULE", x = c("AGE","RACE","PSA","DCAPS"), data = prostate.hex, family = "binomial", nfolds = 10, alpha = 0.5)
prostate.glm@glm
names(prostate.glm@glm)
?glm
iris.hex = importFile(h2o, "../smalldata/iris/iris.csv", "iris.hex")
iris.sum = summary(iris.hex)
print(iris.sum)
iris.rf = h2o.randomForest(y = "4", data = iris.hex, ntree = 50)
iris.rf
iris.rf@rf
names(iris.rf@rf)
??randomForest
?glm
?glm
?glmnet
??glmnet
??glmnet
efficiency.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/Efficiencies.csv", header = TRUE, sep = ",")
onebed.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/OneBedroom.csv", header = TRUE, sep = ",")
twobeds.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/TwoBedrooms.csv", header = TRUE, sep = ",")
threebeds.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/ThreeBedrooms.csv", header = TRUE, sep = ",")
fourbeds.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/FourBedrooms.csv", header = TRUE, sep = ",")
max1.data <- rbind(efficiency.data, onebed.data)
max2.data <- rbind(max1.data, twobeds.data)
max3.data <- rbind(max2.data, threebeds.data)
allbeds.data <- rbind(max3.data, fourbeds.data)
write.csv(max1.data, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/MaxOneBedroom.csv", row.names = FALSE, na = " ")
write.csv(max2.data, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/MaxTwoBedrooms.csv", row.names = FALSE, na = " ")
write.csv(max3.data, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/MaxThreeBedrooms.csv", row.names = FALSE, na = " ")
write.csv(allbeds.data, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", row.names = FALSE, na = " ")
temp.data <- rbind(allbeds.data, allbeds.data)
write.csv(temp.data, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/Repeat1.csv")
nrow(temp.data)
temp2.data <- rbind(temp.data, allbeds.data)
nrow(temp2.data)
write.csv(temp2.data, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/Repeat2.csv")
temp.data <- rbind(temp2.data, allbeds.data)
nrow(temp.data)
write.csv(temp.data, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/Repeat2.csv")
??randomForest
source("H2O.R")
source("H2O.R")
??randomForest
??glmnet
allbeds.data <- read.csv("C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", header = TRUE)
allbeds_omit.data <- subset(allbeds.data, select = -c(state, county, place, metro, mcd))
allbeds_omit.model <- sparse.model.matrix(medrent ~ ., data = allbeds_omit.data)
library(glmnet)
allbeds_omit.model <- sparse.model.matrix(medrent ~ ., data = allbeds_omit.data)
allbeds.csv <- cv.glmnet(allbeds_omit.model, allbeds_omit.data$medrent, family = "gaussian", nfolds = 10, lambda = rev(seq(0,300,3)))
names(allbeds.csv)
allbeds.cv = albeds.csv
allbeds.cv = allbeds.csv
rm(allbeds.csv)
allbeds.csv$glmnet.fit
allbeds.cv$glmnet.fit
??glmnet
names(allbeds.cv$glmnet.fit)
allbeds.cv$glmnet.fit$a0
names(allbeds.cv$glmnet.fit)
allbeds.cv$glmnet.fit$a0
allbeds.cv$glmnet.fit$beta
allbeds.cv$glmnet.fit$beta[,300]
allbeds.cv$glmnet.fit$beta[,101]
??glmnet
seq(0,10)
temp = seq(0,10)
temp[-2]
temp[-3]
temp[-c(2,3)]
myX = seq(0,107); myX = as.character(myX[-c(3,4)]);
myX
setwd("~/workspace/h2o/R")
source("H2O.R")
h2o = new("H2OClient", ip="192.168.1.173", port=54321)
allbeds.hex = importFile(h2o, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", "allbeds.hex")
h2o = new("H2OClient", ip="localhost", port=54321)
allbeds.hex = importFile(h2o, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", "allbeds.hex")
allbeds.hex = importFile(h2o, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", "allbeds.hex")
myX = seq(0,107); myX = as.character(myX[-c(3,4)]);
allbeds.glm <- h2o.glm(allbeds.hex, y = "medrent", x = myX, family = "gaussian", nfolds = 10)
allbeds.glm <- h2o.glm(data = allbeds.hex, y = "medrent", x = myX, family = "gaussian", nfolds = 10)
h2o
allbeds.hex = importFile(h2o, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", "allbeds.hex")
myX = seq(0,107); myX = as.character(myX[-c(3,4)]);
allbeds.glm <- h2o.glm(data = allbeds.hex, y = "medrent", x = myX, family = "gaussian", nfolds = 10)
myX
myX = seq(0,107); myX = as.character(myX[-c(2,3)]);
myX
allbeds.hex
names(allbeds.hex)
allbeds.hex@data
allbeds.hex
slots(allbeds.hex)
myX = seq(0,107); myX = as.character(myX[-c(seq(2,7), 9]);
myX = seq(0,107); myX = as.character(myX[-c(seq(2,7), 9)]);
myX
allbeds.glm <- h2o.glm(data = allbeds.hex, y = "medrent", x = myX, family = "gaussian", nfolds = 10)
allbeds.glm
allbeds.glm@glm$coefficients
allbeds.glm@glm$coefficients[1]
allbeds.cv
names(allbeds.cv)
allbeds.cv$glmnet.fit$a0
allbeds.cv$glmnet.fit$a0["s100"]
allbeds.cv$glmnet.fit$beta[,"s100"]
names(allbeds.cv$glmnet.fit$beta[,"s100"])
allbeds.glmnet_coef <- rbind(allbeds.cv$glmnet.fit$a0["s100"], allbeds.cv$glmnet.fit$beta[,"s100"])
allbeds.glmnet_coef[1]
allbeds.glmnet_coef[2]
allbeds.glmnet_coef
names(allbeds.glmnet_coef)
class(allbeds.cv$glmnet.fit$beta[,"s100"])
typeof(allbeds.cv$glmnet.fit$beta[,"s100"])
typeof(allbeds.cv$glmnet.fit$beta)
class(allbeds.cv$glmnet.fit$beta)
allbeds.glm
allbeds.glm@glm$coefficients
nrow(allbeds.glm@glm$coefficients)
length(allbeds.glm@glm$coefficients)
length(allbeds.cv$glmnet.fit$beta)
length(allbeds.cv$glmnet.fit$beta[,"s100"])
names(allbeds.cv$glmnet.fit$beta[,"s100"])
names(allbeds.glm@glm$coefficients)
names(allbeds.glm@glm$coefficients)[1]
names(allbeds.glm@glm$coefficients)[2]
names(allbeds.glm@glm$coefficients)[1]
names(allbeds.cv$glmnet.fit$beta[,"s100"])[1]
names(allbeds.cv$glmnet.fit$beta[,"s100"])[2]
names(allbeds.cv$glmnet.fit$beta[,"s100"])[3]
names(allbeds.cv$glmnet.fit$beta[,"s100"])[4]
names(allbeds.glm@glm$coefficients)[4]
lenght(names(allbeds.glm@glm$coefficients))
length(names(allbeds.glm@glm$coefficients))
length(myX)
myX
myX = c(0, 2, 7, seq(9,107)); myX = as.character(myX);
myX
allbeds.glm <- h2o.glm(data = allbeds.hex, y = "medrent", x = myX, family = "gaussian", nfolds = 10)
allbeds.h2ocoef <- allbeds.glm@glm$coefficients
length(allbeds.h2ocoef)
allbeds.netcoef <- allbeds.cv$glmnet.fit$beta[,"s100"]
length(allbeds.netcoef)
names(allbeds.h2ocoef)
names(allbeds.netcoef)
?circular
??circular
install.packages("matrixcalc")
library(matrixcalc)
allbeds.h2ocoef
allbeds.h2ocoef["Intercept"]
allbeds.h2ocoef[-c("Intercept")]
allbeds.h2ocoef[-c"Intercept"]
allbeds.h2ocoef[-"Intercept"]
allbeds.h2ocoef[1:6643]
allbeds.ssr = (allbeds.netcoef["(Intercept)"] - allbeds.h2ocoef["Intercept"])^2
allbeds.ssr
allbeds.netcoef
allbeds.diff = (allbeds.netcoef[2:len] - allbeds.h2ocoef[1:(len-1)])^2
len = length(allbeds.netcoef)
allbeds.diff = (allbeds.netcoef[2:len] - allbeds.h2ocoef[1:(len-1)])^2
allbeds.diff
sum(allbeds.diff)
sum(allbeds.diff)/len
allbeds.hex = importFile(h2o, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", "allbeds.hex")
allbeds.glm <- h2o.glm(data = allbeds.hex, y = "medrent", x = myX, family = "gaussian", nfolds = 10)
allbeds.glm
h2o = new("H2OClient", ip="192.168.1.173", port=54321)
allbeds.hex = importFile(h2o, "C:/Users/Anqi/Documents/HexData/BedroomRentData2000/AllBedrooms.csv", "allbeds.hex")
allbeds.hex = importFile(h2o, "../../datasets/AllBedrooms.csv", "allbeds.hex")
allbeds.hex2 = new("H2OParsedData", h2o=h2o, key="AllBedrooms.hex")
allbeds.hex2
myX
allbeds.glm2 <- h2o.glm(data = allbeds.hex2, y = "medrent", x = myX, family = "gaussian", nfolds = 10)
allbeds.glm2
allbeds.glm2 <- h2o.glm(data = allbeds.hex2, y = "medrent", x = myX, family = "gaussian", nfolds = 10)
allbeds.glm2
allbeds.glm2@glm$coefficients
allbeds.h2ocoef2 <- allbeds.glm2@glm$coefficients
length(allbeds.h2ocoef2)
allbeds.ssr = (allbeds.h2ocoef["Intercept"] - allbeds.h2ocoef2["Intercept"])^2
allbeds.diff2 = (allbeds.h2ocoef - allbeds.h2ocoef2)^2
sum(allbeds.diff2)
allbeds.diff2
allbeds.h2ocoef[1]
allbeds.h2ocoef[2]
allbeds.h2ocoef[2]
allbeds.h2ocoef[1]
allbeds.h2ocoef2[1]
allbeds.h2ocoef2
allbeds.h2ocoef[1]
allbeds.h2ocoef2[1]
allbeds.h2ocoef2[2]
allbeds.h2ocoef[2]
allbeds.h2ocoef[3]
allbeds.h2ocoef
typeof(allbeds.h2ocoef)
class(allbeds.h2ocoef)
write.csv(allbeds.h2ocoef, "C:/Users/Anqi/Documents/HexData/test.csv")
write.csv(allbeds.netcoef, "C:/Users/Anqi/Documents/HexData/AllBedrooms-glmnet.csv")
write.csv(allbeds.h2ocoef2, "C:/Users/Anqi/Documents/HexData/AllBedrooms-OldCoef.csv")
allbeds.cv$glmnet.fit$a0["s100"]
??randomForest
allbeds.hex
colnames(allbeds.hex)
?setdiff
prostate.hex = importURL(h2o, "http://www.stanford.edu/~anqif/prostate.csv", "prostate.hex")
source("H2O.R")
h2o = new("H2OClient", ip="localhost", port=54321)
prostate.hex = importURL(h2o, "http://www.stanford.edu/~anqif/prostate.csv", "prostate.hex")
prostate.sum = summary(prostate.hex)
print(prostate.sum)
colnames(prostate.hex)
setdiff(colnames(prostate.hex), c("ID"))
myX = setdiff(colnames(prostate.hex), c("ID", "DCAPS", "DPROS", "GLEASON"))
prostate.glm2 = h2o.glm(y = "VOL", x = myX, data = prostate.hex, family = "gaussian", nfolds = 5, alpha = 0.1)
myX = setdiff(colnames(prostate.hex), c("ID", "DCAPS", "DPROS"))
prostate.glm2 = h2o.glm(y = "VOL", x = myX, data = prostate.hex, family = "gaussian", nfolds = 5, alpha = 0.1)
myX
myX = setdiff(colnames(prostate.hex), c("ID", "DCAPS", "DPROS", "VOL"))
prostate.glm2 = h2o.glm(y = "VOL", x = myX, data = prostate.hex, family = "gaussian", nfolds = 5, alpha = 0.1)
?kmeans
summary(prostate.glm2)
summary(prostate.glm2@glm)
prostate.glm2@glm
prostate.glm2
summary(prostate.glm2)
prostate.data = read.csv("../../smalldata/logreg/prostate.csv", header = TRUE)
prostate.data = read.csv("/../smalldata/logreg/prostate.csv", header = TRUE)
prostate.data = read.csv("../smalldata/logreg/prostate.csv", header = TRUE)
prostate.data
temp <- glm(CAPSULE ~ AGE + RACE + PSA + DCAPS, data = prostate.data)
summary(temp)
temp
summary(temp)
prostate.glm
prostate.glm2
iris.hex = importFile(h2o, "../smalldata/iris/iris.csv", "iris.hex")
iris.sum = summary(iris.hex)
print(iris.sum)
iris.rf = h2o.randomForest(y = "4", data = iris.hex, ntree = 50)
iris.rf = h2o.randomForest(y = "4", data = iris.hex, ntree = 50)
print(iris.rf)
h2o.getTree(iris.rf, k = 5)
iris.rf = h2o.randomForest(y = "4", data = iris.hex, ntree = 50)
print(iris.rf)
iris.rf = h2o.randomForest(y = "4", data = iris.hex, ntree = 50)
print(iris.rf)
covtype.hex = importFile(h2o, "../smalldata/covtype/covtype.20k.data")
covtype.hex = importFile(h2o, "../smalldata/covtype/covtype.20k.data")
covtype.hex = importFile(object=h2o, path="../smalldata/covtype/covtype.20k.data")
source("H2O.R")
covtype.hex = importFile(object=h2o, path="../smalldata/covtype/covtype.20k.data")
covtype.hex = importFile(object=h2o, path="../smalldata/covtype/covtype.20k.data")
covtype.hex = importFile(object=h2o, path="../smalldata/covtype/covtype.20k.data")
source("H2O.R")
covtype.hex = importFile(object=h2o, path="../smalldata/covtype/covtype.20k.data")
source("H2O.R")
covtype.hex = importFile(object=h2o, path="../smalldata/covtype/covtype.20k.data")
covtype.hex
covtype.hex = importFile(h2o, "../smalldata/covtype/covtype.20k.data")
source("H2O.R")
covtype.hex = importFile(h2o, "../smalldata/covtype/covtype.20k.data")
covtype.sum = summary(covtype.hex)
print(covtype.sum)
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c("1", "2", "3"))
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3))
temp <- c(1,2,3)
paste0(temp, collapse=",")
source("H2O.R")
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3))
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3))
as.character(temp)
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3))
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3), iter.max = 10)
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3), iter.max = 10)
source("H2O.R")
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3))
source("H2O.R")
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3))
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c("1", "2", "3"))
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = "")
source("H2O.R")
covtype.km = h2o.kmeans(data = covtype.hex, centers = 10, cols = c(1, 2, 3))
library(help=glmnet)
setwd("~/workspace/h2o/R")
source('~/workspace/h2o/R/H2OTestDemo.R')
source('~/workspace/h2o/R/H2OTestDemo.R')
source('~/workspace/h2o/R/H2OTestDemo.R')
source("H2O.R")
iris.hex = importFile(h2o, "../smalldata/iris/iris.csv", "iris.hex")
covtype.hex = importFile(h2o, "../smalldata/covtype/covtype.20k.data")
source("H2O.R")
covtype.hex = importFile(h2o, "../smalldata/covtype/covtype.20k.data")
source('~/workspace/h2o/R/H2OTestDemo.R')
source("H2O.R")
covtype.sum = summary(covtype.hex)
source("H2O.R")
covtype.sum = summary(covtype.hex)
source("H2O.R")
covtype.sum = summary(covtype.hex)
source("H2O.R")
covtype.sum = summary(covtype.hex)
source("H2O.R")
covtype.sum = summary(covtype.hex)
source("H2O.R")
covtype.sum = summary(covtype.hex)
source("H2O.R")
covtype.sum = summary(covtype.hex)
temp = list()
temp$key = "stuff"
is.null(temp$key)
is.null(temp$key2)
rep(10, 5)
temp = c(1, 2.3, 3.45)
round(temp, 2)
round(temp, 1)
round(temp, 0)
format(round(temp, 4))
format(round(temp, 4), nsmall = 3)
format(round(temp, 3), nsmall = 3)
source("H2O.R")
source('~/workspace/h2o/R/H2OTestDemo.R')
source("H2O.R")
source('~/workspace/h2o/R/H2OTestDemo.R')
source("H2O.R")
?INSTALL
