<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.13.1231.1350                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column caption='IP Address ' datatype='string' name='[Parameter 10]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
        <calculation class='tableau' formula='&quot;localhost&quot;' />
        <desc>
          <formatted-text>
            <run>Input IP Address of server H2O is launched on</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Port' datatype='integer' name='[Parameter 11]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
        <calculation class='tableau' formula='54321' />
      </column>
      <column caption='Path To Data' datatype='string' name='[Parameter 12]' param-domain-type='any' role='measure' type='nominal' value='&quot;/Users/Amy/Documents/h2o/smalldata/airlines/allyears2k_headers.zip&quot;'>
        <calculation class='tableau' formula='&quot;/Users/Amy/Documents/h2o/smalldata/airlines/allyears2k_headers.zip&quot;' />
      </column>
      <column caption='Beta' datatype='boolean' name='[Parameter 13]' param-domain-type='list' role='measure' type='nominal' value='true'>
        <calculation class='tableau' formula='true' />
        <members>
          <member value='true' />
          <member value='false' />
        </members>
      </column>
      <column caption='Local H2O Heap Size' datatype='string' name='[Parameter 14]' param-domain-type='any' role='measure' type='nominal' value='&quot;4g&quot;'>
        <calculation class='tableau' formula='&quot;4g&quot;' />
      </column>
      <column caption='(GLM) Lambda' datatype='string' name='[Parameter 15]' param-domain-type='any' role='measure' type='nominal' value='&quot;1.0E-5&quot;'>
        <calculation class='tableau' formula='&quot;1.0E-5&quot;' />
      </column>
      <column caption='(GLM) Response Variable' datatype='string' name='[Parameter 1]' param-domain-type='any' role='measure' type='nominal' value='&quot;Cancelled&quot;'>
        <calculation class='tableau' formula='&quot;Cancelled&quot;' />
      </column>
      <column caption='(GLM) Predictor Variables' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;Origin,Dest,UniqueCarrier&quot;'>
        <calculation class='tableau' formula='&quot;Origin,Dest,UniqueCarrier&quot;' />
      </column>
      <column caption='(GLM) Alpha' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='1.0'>
        <calculation class='tableau' formula='1.0' />
        <range granularity='0.25' max='1.0' min='0.0' />
      </column>
      <column caption='(GLM) Cross Validation N-Folds' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <range granularity='1' min='0' />
      </column>
      <column caption='(GLM) Family' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;binomial&quot;'>
        <calculation class='tableau' formula='&quot;binomial&quot;' />
        <members>
          <member value='&quot;gaussian&quot;' />
          <member value='&quot;binomial&quot;' />
          <member value='&quot;poisson&quot;' />
          <member value='&quot;gamma&quot;' />
          <member value='&quot;tweedie&quot;' />
        </members>
      </column>
      <column caption='(GLM) Model Name' datatype='string' name='[Parameter 6]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.glm&quot;'>
        <calculation class='tableau' formula='&quot;data.glm&quot;' />
      </column>
      <column caption='(K-Means) # of Centers' datatype='integer' name='[Parameter 7]' param-domain-type='range' role='measure' type='quantitative' value='2'>
        <calculation class='tableau' formula='2' />
        <range granularity='1' min='1' />
      </column>
      <column caption='(K-Means) Model Name' datatype='string' name='[Parameter 8]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.km&quot;'>
        <calculation class='tableau' formula='&quot;data.km&quot;' />
      </column>
      <column caption='(K-means) Eval Cols' datatype='string' name='[Parameter 9]' param-domain-type='list' role='measure' type='nominal' value='&quot;AllAvailableColumns&quot;'>
        <calculation class='tableau' formula='&quot;AllAvailableColumns&quot;' />
        <members>
          <member value='&quot;AllAvailableColumns&quot;' />
          <member value='&quot;Year&quot;' />
          <member value='&quot;Month&quot;' />
          <member value='&quot;DayofMonth&quot;' />
          <member value='&quot;DayOfWeek&quot;' />
          <member value='&quot;DepTime&quot;' />
          <member value='&quot;CRSDepTime&quot;' />
          <member value='&quot;ArrTime&quot;' />
          <member value='&quot;CRSArrTime&quot;' />
          <member value='&quot;UniqueCarrier&quot;' />
          <member value='&quot;FlightNum&quot;' />
          <member value='&quot;TailNum&quot;' />
          <member value='&quot;ActualElapsedTime&quot;' />
          <member value='&quot;CRSElapsedTime&quot;' />
          <member value='&quot;AirTime&quot;' />
          <member value='&quot;ArrDelay&quot;' />
          <member value='&quot;DepDelay&quot;' />
          <member value='&quot;Origin&quot;' />
          <member value='&quot;Dest&quot;' />
          <member value='&quot;Distance&quot;' />
          <member value='&quot;TaxiIn&quot;' />
          <member value='&quot;TaxiOut&quot;' />
          <member value='&quot;Cancelled&quot;' />
          <member value='&quot;CancellationCode&quot;' />
          <member value='&quot;Diverted&quot;' />
          <member value='&quot;CarrierDelay&quot;' />
          <member value='&quot;WeatherDelay&quot;' />
          <member value='&quot;NASDelay&quot;' />
          <member value='&quot;SecurityDelay&quot;' />
          <member value='&quot;LateAircraftDelay&quot;' />
          <member value='&quot;IsArrDelayed&quot;' />
          <member value='&quot;IsDepDelayed&quot;' />
          <member value='&quot;City&quot;' />
        </members>
      </column>
      <folder name='GLM Parameters' role='parameters'>
        <folder-item name='[Parameter 15]' type='field' />
        <folder-item name='[Parameter 1]' type='field' />
        <folder-item name='[Parameter 2]' type='field' />
        <folder-item name='[Parameter 3]' type='field' />
        <folder-item name='[Parameter 4]' type='field' />
        <folder-item name='[Parameter 5]' type='field' />
        <folder-item name='[Parameter 6]' type='field' />
      </folder>
      <folder name='H2O Initialization' role='parameters'>
        <folder-item name='[Parameter 10]' type='field' />
        <folder-item name='[Parameter 11]' type='field' />
        <folder-item name='[Parameter 12]' type='field' />
        <folder-item name='[Parameter 13]' type='field' />
        <folder-item name='[Parameter 14]' type='field' />
      </folder>
      <folder name='K-Means Parameters' role='parameters'>
        <folder-item name='[Parameter 7]' type='field' />
        <folder-item name='[Parameter 8]' type='field' />
        <folder-item name='[Parameter 9]' type='field' />
      </folder>
    </datasource>
    <datasource caption='airlines_meta' inline='true' name='csv.41677.501581817130' version='8.2'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='C:\Users\Amy\Documents\h2o\Tableau\meta_data\' driver='' filename='airlines_meta.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='airlines_meta#csv' table='[airlines_meta#csv]' type='table' />
      </connection>
      <aliases enabled='yes' />
      <column caption='02 Cancellation Count By Airport' datatype='integer' name='[02 Flight Count By Airport (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx4 = match( .arg1 , origin_canFlights.R$Origin ) &#13;&#10;print(origin_canFlights.R[idx4,]$C1)&#13;&#10;origin_canFlights.R[idx4,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='02 Flight Count By Airport' datatype='integer' name='[02 Flight Count By Months (copy 2)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx3 = match( .arg1 , originFlights.R$Origin ) &#13;&#10;print(originFlights.R[idx3,]$C1)&#13;&#10;originFlights.R[idx3,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='02 Cancellation Count By Months' datatype='integer' name='[02 Flight Count By Months (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx2 = match( .arg1 , canFlights.R$Month ) &#13;&#10;print(canFlights.R[idx2,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { canFlights.R[idx2,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='03 (GLM) Grab Coefficient Variables (signage)' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Index' datatype='integer' name='[Calculation_0230903195627598]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Index()' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='00 Tableau/H2O functions' datatype='string' name='[Calculation_0500424135127287]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;## Tableau High NA Count&#13;&#10;tableau.ignoreColumns &lt;- function (ignore_col , predictorVariable ) {&#13;&#10;if( predictorVariable %in% ignore_col ) { print( &apos;High NA Count&apos; )&#13;&#10;} else {print( &apos;Normal&apos; )}&#13;&#10;}&#13;&#10;&#13;&#10;## Tableau grab coefficients corresponding to predictor variable&#13;&#10;tableau_catFormat &lt;- function( modelKey , variableStr, predictorVariable) {&#13;&#10;if( typeof(modelKey) != &apos;S4&apos;) print(&apos;Model Key is not in expected format of S4&apos;)&#13;&#10;if( is.character(variableStr) != TRUE) print(&apos;Input column is not in expected format of string&apos;)&#13;&#10;if( is.character(predictorVariable) != TRUE) print(&apos;Input variables is not in expected format of string&apos;)&#13;&#10;glmModelTemp        = modelKey&#13;&#10;modelCoeff          = modelKey@model$coefficients&#13;&#10;modelCoeff          = modelKey@model$coefficients&#13;&#10;idx                 = grep( variableStr , names(modelCoeff))&#13;&#10;modelCoeff2        = modelCoeff[idx]&#13;&#10;variableNames       = unlist(strsplit(names(modelCoeff2),split=&apos;.&apos;,fixed=TRUE))&#13;&#10;variableNamesMatrix = matrix(variableNames, ncol=2, byrow=TRUE)&#13;&#10;variableList        = variableNamesMatrix[,2]&#13;&#10;names(modelCoeff2)  = variableList&#13;&#10;setDiff             = setdiff(.arg1,variableList)&#13;&#10;nullVec             = rep(0,length(setDiff))&#13;&#10;names(nullVec)      = setDiff&#13;&#10;newCoefficientList  = c(modelCoeff2, nullVec)&#13;&#10;tableau_input       = newCoefficientList[predictorVariable]&#13;&#10;tableau_input}&#13;&#10;&#13;&#10;print(&apos;Finish setting up Tableau functions&apos;)&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Option : Null' datatype='real' name='[Calculation_0840422201739178]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IIF([Calculation_7320206215923342]==0,Null,[Calculation_7320206215923342])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='02 Import file into H2O' datatype='string' name='[Calculation_1200206151913219]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&#13;&#10;&quot;&#13;&#10;data.hex = h2o.importFile(h2oLocal, path = .arg1)&#13;&#10;ignoreCol = h2o.ignoreColumns(data.hex)&#13;&#10;&quot;,&#13;&#10;[Parameters].[Parameter 12])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='02 Flight Count By Months' datatype='integer' name='[Calculation_1340527151300682]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx = match( .arg1 , numFlights.R$Month ) &#13;&#10;print(numFlights.R[idx,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { numFlights.R[idx,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='03 (GLM) AUC Value' datatype='real' name='[Calculation_2510527224812934]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='script_real(&quot;&#13;&#10;data.glm@model$auc&#13;&#10;&quot;,&#13;&#10;INDEX() &#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='01 Start H2O in R' datatype='string' name='[Calculation_2960206151848632]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;h2oLocal=h2o.init( ip = .arg1, port = .arg2, Xmx = .arg3, beta = .arg4)&#13;&#10;&quot;,&#13;&#10;[Parameters].[Parameter 10],[Parameters].[Parameter 11],[Parameters].[Parameter 14],[Parameters].[Parameter 13])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='06 Kmeans Model Cluster' datatype='integer' name='[Calculation_5330227211720517]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_INT(&quot;data.frame(data.km@model$cluster)[,1]&quot;,&#13;&#10;[Calculation_7320206215923342])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='01 High NA Count' datatype='string' name='[Calculation_5340526195241971]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;unlist( lapply( .arg1, function(var) tableau.ignoreColumns(ignoreCol, var)) )&#13;&#10;&quot;,&#13;&#10;ATTR([Colnames]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Cancellation by Month' datatype='string' name='[Calculation_6260902222221692]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Script_STR(&quot;&#13;&#10;## ddply, find the length of each month&#13;&#10;numFlights = h2o.ddply(data.hex, &apos;Month&apos;, nrow)&#13;&#10;numFlights.R = as.data.frame(numFlights)&#13;&#10;print(numFlights.R)&#13;&#10;&#13;&#10;## ddply, find the length of each month&#13;&#10;fun2 = function(df) {sum(df$Cancelled)}&#13;&#10;h2o.addFunction(h2oLocal, fun2)&#13;&#10;canFlights = h2o.ddply(data.hex, &apos;Month&apos;, fun2)&#13;&#10;canFlights.R = as.data.frame(canFlights)&#13;&#10;print(canFlights.R)&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='03 (GLM) Grab Coefficient Variables' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='00 Load H2O client package' datatype='string' name='[Calculation_8510424132229395]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;library(h2o)&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='03 Run GLM' datatype='string' name='[Calculation_8800501133749493]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot; &#13;&#10;xvars = unlist( strsplit( .arg2, split = &apos;,&apos; , fixed = TRUE ) )&#13;&#10;print( &apos;break&apos;)&#13;&#10;print( xvars )&#13;&#10;print( .arg3 )&#13;&#10;print( data.hex )&#13;&#10;print( .arg4 )&#13;&#10;print( .arg5 )&#13;&#10;print( .arg6 )&#13;&#10;print( .arg7 )&#13;&#10;data.glm = h2o.glm(x = xvars , y = .arg3, data = data.hex, family = .arg4, nfolds = .arg5, standardize=TRUE)&#13;&#10;&#13;&#10;print(data.glm)&#13;&#10;&#13;&#10;&quot;,&#13;&#10;[Parameters].[Parameter 6],[Parameters].[Parameter 2],[Parameters].[Parameter 1], [Parameters].[Parameter 5], [Parameters].[Parameter 4],[Parameters].[Parameter 3], [Parameters].[Parameter 15])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='08 Shutdown H2O' datatype='string' name='[Calculation_8940526161233413]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='script_str(&quot;h2o.shutdown(localH2O)&#13;&#10;Y&quot;,&#13;&#10;&quot;&quot;&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Cancellations by Airport' datatype='string' name='[Cancellation by Month (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;## ddply, find the length of each month&#13;&#10;originFlights = h2o.ddply(data.hex, &apos;Origin&apos;, nrow)&#13;&#10;originFlights.R = as.data.frame(originFlights)&#13;&#10;print(canFlights.R)&#13;&#10;&#13;&#10;## ddply, find the length of each month&#13;&#10;origin_canFlights = h2o.ddply(data.hex, &apos;Origin&apos;, fun2)&#13;&#10;origin_canFlights.R = as.data.frame(origin_canFlights)&#13;&#10;print(origin_canFlights.R)&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column aggregation='Sum' datatype='integer' name='[DayOfWeek]' role='dimension' type='quantitative'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[DayofMonth]' role='dimension' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Month]' role='dimension' type='quantitative'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[Regional Groups]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <calculation class='categorical-bin' column='[OCity]' default='&quot;Yuma&quot;'>
          <bin value='&quot;Albany&quot;'>
            <value>&quot;Albany&quot;</value>
            <value>&quot;Charlotte&quot;</value>
            <value>&quot;Greensboro&quot;</value>
            <value>&quot;Raleigh-durham&quot;</value>
            <value>&quot;Richmond&quot;</value>
            <value>&quot;Roanoke VA&quot;</value>
            <value>&quot;Washington&quot;</value>
          </bin>
          <bin value='&quot;Aspen&quot;'>
            <value>&quot;Aspen&quot;</value>
            <value>&quot;Boise&quot;</value>
            <value>&quot;Colorado Springs&quot;</value>
            <value>&quot;Denver&quot;</value>
            <value>&quot;Fresno&quot;</value>
            <value>&quot;Hailey&quot;</value>
            <value>&quot;Long Beach&quot;</value>
            <value>&quot;Los Angeles&quot;</value>
            <value>&quot;Oakland&quot;</value>
            <value>&quot;Ontario&quot;</value>
            <value>&quot;Palm Springs&quot;</value>
            <value>&quot;Reno&quot;</value>
            <value>&quot;San Diego&quot;</value>
            <value>&quot;San Francisco&quot;</value>
            <value>&quot;San Jose&quot;</value>
          </bin>
          <bin value='&quot;Austin&quot;'>
            <value>&quot;Austin&quot;</value>
            <value>&quot;Birmingham&quot;</value>
            <value>&quot;Columbus&quot;</value>
            <value>&quot;Dallas-Fort Worth&quot;</value>
            <value>&quot;Greenville&quot;</value>
            <value>&quot;Houston&quot;</value>
            <value>&quot;Little Rock&quot;</value>
            <value>&quot;Lubbock&quot;</value>
            <value>&quot;Memphis&quot;</value>
            <value>&quot;Miami&quot;</value>
            <value>&quot;Midland&quot;</value>
            <value>&quot;New Orleans&quot;</value>
            <value>&quot;Oklahoma City&quot;</value>
            <value>&quot;Sarasota&quot;</value>
            <value>&quot;Tulsa&quot;</value>
          </bin>
          <bin value='&quot;Cedar Rapids&quot;'>
            <value>&quot;Cedar Rapids&quot;</value>
            <value>&quot;Chicago&quot;</value>
            <value>&quot;Cincinnati&quot;</value>
            <value>&quot;Cleveland&quot;</value>
            <value>&quot;Detroit&quot;</value>
            <value>&quot;Indianapolis&quot;</value>
            <value>&quot;Kalamazoo&quot;</value>
            <value>&quot;Kansas City&quot;</value>
            <value>&quot;Louisville&quot;</value>
            <value>&quot;Milwaukee&quot;</value>
            <value>&quot;Minneapolis&quot;</value>
            <value>&quot;Omaha&quot;</value>
            <value>&quot;Pittsburgh&quot;</value>
            <value>&quot;Portland&quot;</value>
            <value>&quot;Rochester&quot;</value>
            <value>&quot;St. Louis&quot;</value>
          </bin>
          <bin value='&quot;Islip&quot;'>
            <value>&quot;Islip&quot;</value>
            <value>&quot;New York&quot;</value>
            <value>&quot;Newark&quot;</value>
            <value>&quot;Philadelphia&quot;</value>
            <value>&quot;Worcester&quot;</value>
          </bin>
        </calculation>
        <aliases>
          <alias key='&quot;Albany&quot;' value='Mid-Atlantic' />
          <alias key='&quot;Aspen&quot;' value='West' />
          <alias key='&quot;Austin&quot;' value='South' />
          <alias key='&quot;Cedar Rapids&quot;' value='Midwest' />
          <alias key='&quot;Islip&quot;' value='Northeast' />
          <alias key='&quot;Yuma&quot;' value='Other' />
        </aliases>
      </column>
      <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative'>
      </column>
      <column-instance column='[Month]' derivation='None' name='[none:Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
      <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
      <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
      <column-instance column='[02 Flight Count By Airport (copy)]' derivation='User' name='[usr:02 Flight Count By Airport (copy):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[02 Flight Count By Months (copy 2)]' derivation='User' name='[usr:02 Flight Count By Months (copy 2):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[02 Flight Count By Months (copy)]' derivation='User' name='[usr:02 Flight Count By Months (copy):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
        <table-calc ordering-type='Rows' />
        <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Calculation_1340527151300682]' derivation='User' name='[usr:Calculation_1340527151300682:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[Calculation_5330227211720517]' derivation='User' name='[usr:Calculation_5330227211720517:ok]' pivot='key' type='ordinal'>
        <table-calc ordering-type='Rows' />
        <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
      </column-instance>
      <group hidden='true' name='[Action (City,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[City]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Month)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Month]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity,OLat,OLong,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
          <groupfilter function='level-members' level='[none:OLat:qk]' />
          <groupfilter function='level-members' level='[none:OLong:qk]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (City,Origin)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:City:nk]' />
          <groupfilter function='level-members' level='[none:Origin:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.459783' measure-ordering='alphabetic' measure-percentage='0.327174' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='shape' field='[usr:Calculation_5330227211720517:ok]' type='shape'>
            <map to='asterisk'>
              <bucket>4</bucket>
            </map>
            <map to='circle'>
              <bucket>0</bucket>
            </map>
            <map to='diamond'>
              <bucket>5</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>7</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>8</bucket>
            </map>
            <map to='plus'>
              <bucket>2</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>9</bucket>
            </map>
            <map to='square'>
              <bucket>1</bucket>
            </map>
            <map to='times'>
              <bucket>3</bucket>
            </map>
            <map to='triangle'>
              <bucket>6</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[usr:03 Grab Coefficient Variables (copy):ok]' type='palette'>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>-1</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>0</bucket>
            </map>
            <map to='#d62728'>
              <bucket>1</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[csv.41677.501581817130]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='IP Address ' datatype='string' name='[Parameter 10]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
          <calculation class='tableau' formula='&quot;localhost&quot;' />
          <desc>
            <formatted-text>
              <run>Input IP Address of server H2O is launched on</run>
            </formatted-text>
          </desc>
        </column>
        <column caption='Port' datatype='integer' name='[Parameter 11]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
          <calculation class='tableau' formula='54321' />
        </column>
        <column caption='Path To Data' datatype='string' name='[Parameter 12]' param-domain-type='any' role='measure' type='nominal' value='&quot;/Users/Amy/Documents/h2o/smalldata/airlines/allyears2k_headers.zip&quot;'>
          <calculation class='tableau' formula='&quot;/Users/Amy/Documents/h2o/smalldata/airlines/allyears2k_headers.zip&quot;' />
        </column>
        <column caption='Beta' datatype='boolean' name='[Parameter 13]' param-domain-type='list' role='measure' type='nominal' value='true'>
          <calculation class='tableau' formula='true' />
          <members>
            <member value='true' />
            <member value='false' />
          </members>
        </column>
        <column caption='Local H2O Heap Size' datatype='string' name='[Parameter 14]' param-domain-type='any' role='measure' type='nominal' value='&quot;4g&quot;'>
          <calculation class='tableau' formula='&quot;4g&quot;' />
        </column>
        <column caption='(GLM) Lambda' datatype='string' name='[Parameter 15]' param-domain-type='any' role='measure' type='nominal' value='&quot;1.0E-5&quot;'>
          <calculation class='tableau' formula='&quot;1.0E-5&quot;' />
        </column>
        <column caption='(GLM) Response Variable' datatype='string' name='[Parameter 1]' param-domain-type='any' role='measure' type='nominal' value='&quot;Cancelled&quot;'>
          <calculation class='tableau' formula='&quot;Cancelled&quot;' />
        </column>
        <column caption='(GLM) Predictor Variables' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;Origin,Dest,UniqueCarrier&quot;'>
          <calculation class='tableau' formula='&quot;Origin,Dest,UniqueCarrier&quot;' />
        </column>
        <column caption='(GLM) Alpha' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='1.0'>
          <calculation class='tableau' formula='1.0' />
          <range granularity='0.25' max='1.0' min='0.0' />
        </column>
        <column caption='(GLM) Cross Validation N-Folds' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
          <range granularity='1' min='0' />
        </column>
        <column caption='(GLM) Family' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;binomial&quot;'>
          <calculation class='tableau' formula='&quot;binomial&quot;' />
          <members>
            <member value='&quot;gaussian&quot;' />
            <member value='&quot;binomial&quot;' />
            <member value='&quot;poisson&quot;' />
            <member value='&quot;gamma&quot;' />
            <member value='&quot;tweedie&quot;' />
          </members>
        </column>
        <column caption='(GLM) Model Name' datatype='string' name='[Parameter 6]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.glm&quot;'>
          <calculation class='tableau' formula='&quot;data.glm&quot;' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Online' />
  </mapsources>
  <actions>
    <action caption='Filter' name='[Action1]'>
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Highlight1' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:brush'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Filter2' name='[Action4]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Highlight2' name='[Action5]'>
      <activation auto-clear='true' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:brush'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet lock-quick-filters='true' name='AUC'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#26794a'>&lt;</run>
            <run fontalignment='1' fontcolor='#26794a'>Sheet Name</run>
            <run fontalignment='1' fontcolor='#26794a'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='03 (GLM) AUC Value' datatype='real' name='[Calculation_2510527224812934]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='script_real(&quot;&#13;&#10;data.glm@model$auc&#13;&#10;&quot;,&#13;&#10;INDEX() &#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_2510527224812934]' derivation='User' name='[usr:Calculation_2510527224812934:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity)]'>
            <groupfilter function='level-members' level='[OCity]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' value='58' />
            <format attr='width' value='112' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width-header' value='10' />
            <format attr='height-header' value='10' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='22' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[csv.41677.501581817130].[usr:Calculation_2510527224812934:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Flights By Airport'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontsize='11'>Outgoing flights and Cancellations by Airport</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='02 Cancellation Count By Airport' datatype='integer' name='[02 Flight Count By Airport (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx4 = match( .arg1 , origin_canFlights.R$Origin ) &#13;&#10;print(origin_canFlights.R[idx4,]$C1)&#13;&#10;origin_canFlights.R[idx4,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='02 Flight Count By Airport' datatype='integer' name='[02 Flight Count By Months (copy 2)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx3 = match( .arg1 , originFlights.R$Origin ) &#13;&#10;print(originFlights.R[idx3,]$C1)&#13;&#10;originFlights.R[idx3,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[02 Flight Count By Airport (copy)]' derivation='User' name='[usr:02 Flight Count By Airport (copy):qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[02 Flight Count By Months (copy 2)]' derivation='User' name='[usr:02 Flight Count By Months (copy 2):qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[csv.41677.501581817130].[none:OCity:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Atlanta&quot;</bucket>
              <bucket>&quot;Dallas-Fort Worth&quot;</bucket>
              <bucket>&quot;Newark&quot;</bucket>
              <bucket>&quot;Boston&quot;</bucket>
              <bucket>&quot;Los Angeles&quot;</bucket>
              <bucket>&quot;Minneapolis&quot;</bucket>
              <bucket>&quot;San Francisco&quot;</bucket>
              <bucket>&quot;Philadelphia&quot;</bucket>
              <bucket>&quot;St. Louis&quot;</bucket>
              <bucket>&quot;Denver&quot;</bucket>
              <bucket>&quot;Charlotte&quot;</bucket>
              <bucket>&quot;Phoenix&quot;</bucket>
              <bucket>&quot;Pittsburgh&quot;</bucket>
              <bucket>&quot;Cincinnati&quot;</bucket>
              <bucket>&quot;Baltimore&quot;</bucket>
              <bucket>&quot;Las Vegas&quot;</bucket>
              <bucket>&quot;Cleveland&quot;</bucket>
              <bucket>&quot;Salt Lake City&quot;</bucket>
              <bucket>&quot;Memphis&quot;</bucket>
              <bucket>&quot;Orlando&quot;</bucket>
              <bucket>&quot;Miami&quot;</bucket>
              <bucket>&quot;San Diego&quot;</bucket>
              <bucket>&quot;Raleigh-durham&quot;</bucket>
              <bucket>&quot;Dallas&quot;</bucket>
              <bucket>&quot;San Jose&quot;</bucket>
              <bucket>&quot;Oakland&quot;</bucket>
              <bucket>&quot;Tampa&quot;</bucket>
              <bucket>&quot;Santa Ana&quot;</bucket>
              <bucket>&quot;Nashville&quot;</bucket>
              <bucket>&quot;New Orleans&quot;</bucket>
              <bucket>&quot;Indianapolis&quot;</bucket>
              <bucket>&quot;Windsor Locks&quot;</bucket>
              <bucket>&quot;Milwaukee&quot;</bucket>
              <bucket>&quot;Buffalo&quot;</bucket>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
              <bucket>&quot;Austin&quot;</bucket>
              <bucket>&quot;San Antonio&quot;</bucket>
              <bucket>&quot;Anchorage&quot;</bucket>
              <bucket>&quot;Greensboro&quot;</bucket>
              <bucket>&quot;Ontario&quot;</bucket>
              <bucket>&quot;Richmond&quot;</bucket>
              <bucket>&quot;Sacramento&quot;</bucket>
              <bucket>&quot;Norfolk&quot;</bucket>
              <bucket>&quot;White Plains&quot;</bucket>
              <bucket>&quot;Providence&quot;</bucket>
              <bucket>&quot;Burbank&quot;</bucket>
              <bucket>&quot;Dayton&quot;</bucket>
              <bucket>&quot;Syracuse&quot;</bucket>
              <bucket>&quot;Louisville&quot;</bucket>
              <bucket>&quot;Tulsa&quot;</bucket>
              <bucket>&quot;Grand Rapids&quot;</bucket>
              <bucket>&quot;Jacksonville&quot;</bucket>
              <bucket>&quot;Oklahoma City&quot;</bucket>
              <bucket>&quot;Albuquerque&quot;</bucket>
              <bucket>&quot;Colorado Springs&quot;</bucket>
              <bucket>&quot;San Juan&quot;</bucket>
              <bucket>&quot;West Palm Beach&quot;</bucket>
              <bucket>&quot;Wichita&quot;</bucket>
              <bucket>&quot;Des Moines&quot;</bucket>
              <bucket>&quot;Little Rock&quot;</bucket>
              <bucket>&quot;Cedar Rapids&quot;</bucket>
              <bucket>&quot;Birmingham&quot;</bucket>
              <bucket>&quot;Omaha&quot;</bucket>
              <bucket>&quot;Reno&quot;</bucket>
              <bucket>&quot;Harrisburg&quot;</bucket>
              <bucket>&quot;Honolulu&quot;</bucket>
              <bucket>&quot;Manchester NH&quot;</bucket>
              <bucket>&quot;El Paso&quot;</bucket>
              <bucket>&quot;Madison&quot;</bucket>
              <bucket>&quot;Columbia&quot;</bucket>
              <bucket>&quot;Tucson&quot;</bucket>
              <bucket>&quot;Fort Myers&quot;</bucket>
              <bucket>&quot;Knoxville&quot;</bucket>
              <bucket>&quot;Allentown&quot;</bucket>
              <bucket>&quot;Huntsville&quot;</bucket>
              <bucket>&quot;Savannah&quot;</bucket>
              <bucket>&quot;Pensacola&quot;</bucket>
              <bucket>&quot;Jackson&quot;</bucket>
              <bucket>&quot;Islip&quot;</bucket>
              <bucket>&quot;Bentonville&quot;</bucket>
              <bucket>&quot;Spokane&quot;</bucket>
              <bucket>&quot;Kalamazoo&quot;</bucket>
              <bucket>&quot;Shreveport&quot;</bucket>
              <bucket>&quot;Fort Wayne&quot;</bucket>
              <bucket>&quot;Burlington&quot;</bucket>
              <bucket>&quot;Baton Rouge&quot;</bucket>
              <bucket>&quot;Santa Barbara&quot;</bucket>
              <bucket>&quot;Lexington KY&quot;</bucket>
              <bucket>&quot;Juneau&quot;</bucket>
              <bucket>&quot;Green Bay&quot;</bucket>
              <bucket>&quot;Lansing&quot;</bucket>
              <bucket>&quot;Saginaw&quot;</bucket>
              <bucket>&quot;Sioux Falls&quot;</bucket>
              <bucket>&quot;Moline&quot;</bucket>
              <bucket>&quot;Roanoke VA&quot;</bucket>
              <bucket>&quot;South Bend&quot;</bucket>
              <bucket>&quot;Lubbock&quot;</bucket>
              <bucket>&quot;Amarillo&quot;</bucket>
              <bucket>&quot;Palm Springs&quot;</bucket>
              <bucket>&quot;Fairbanks&quot;</bucket>
              <bucket>&quot;Evansville&quot;</bucket>
              <bucket>&quot;Akron&quot;</bucket>
              <bucket>&quot;Mobile&quot;</bucket>
              <bucket>&quot;Fresno&quot;</bucket>
              <bucket>&quot;Midland&quot;</bucket>
              <bucket>&quot;Chattanooga&quot;</bucket>
              <bucket>&quot;Bangor&quot;</bucket>
              <bucket>&quot;Peoria&quot;</bucket>
              <bucket>&quot;Tallahassee&quot;</bucket>
              <bucket>&quot;Sarasota&quot;</bucket>
              <bucket>&quot;Corpus Christi&quot;</bucket>
              <bucket>&quot;Harlingen&quot;</bucket>
              <bucket>&quot;Fargo&quot;</bucket>
              <bucket>&quot;Toledo&quot;</bucket>
              <bucket>&quot;Kahului&quot;</bucket>
              <bucket>&quot;Boise&quot;</bucket>
              <bucket>&quot;Eugene&quot;</bucket>
              <bucket>&quot;Monterey&quot;</bucket>
              <bucket>&quot;Myrtle Beach&quot;</bucket>
              <bucket>&quot;BRISTOL&quot;</bucket>
              <bucket>&quot;Long Beach&quot;</bucket>
              <bucket>&quot;Lincoln&quot;</bucket>
              <bucket>&quot;Asheville&quot;</bucket>
              <bucket>&quot;Unalaska&quot;</bucket>
              <bucket>&quot;Newburgh&quot;</bucket>
              <bucket>&quot;Aspen&quot;</bucket>
              <bucket>&quot;Billings&quot;</bucket>
              <bucket>&quot;Valparaiso&quot;</bucket>
              <bucket>&quot;Bush Field&quot;</bucket>
              <bucket>&quot;Hailey&quot;</bucket>
              <bucket>&quot;Great Falls&quot;</bucket>
              <bucket>&quot;Appleton&quot;</bucket>
              <bucket>&quot;Traverse City&quot;</bucket>
              <bucket>&quot;Bloomington&quot;</bucket>
              <bucket>&quot;Flint&quot;</bucket>
              <bucket>&quot;Gulfport&quot;</bucket>
              <bucket>&quot;Scranton&quot;</bucket>
              <bucket>&quot;Medford&quot;</bucket>
              <bucket>&quot;Rapid City&quot;</bucket>
              <bucket>&quot;MONTGOMERY&quot;</bucket>
              <bucket>&quot;Duluth&quot;</bucket>
              <bucket>&quot;Champaign&quot;</bucket>
              <bucket>&quot;Bozeman&quot;</bucket>
              <bucket>&quot;Daytona Beach&quot;</bucket>
              <bucket>&quot;Jacksn Hole&quot;</bucket>
              <bucket>&quot;St. Thomas&quot;</bucket>
              <bucket>&quot;San Luis Obispo&quot;</bucket>
              <bucket>&quot;Missoula&quot;</bucket>
              <bucket>&quot;Lafayette&quot;</bucket>
              <bucket>&quot;La Crosse&quot;</bucket>
              <bucket>&quot;Ketchikan&quot;</bucket>
              <bucket>&quot;Worcester&quot;</bucket>
              <bucket>&quot;Petersburg&quot;</bucket>
              <bucket>&quot;Melbourne&quot;</bucket>
              <bucket>&quot;Newport News&quot;</bucket>
              <bucket>&quot;Kodiak&quot;</bucket>
              <bucket>&quot;Fayetteville&quot;</bucket>
              <bucket>&quot;Mcallen&quot;</bucket>
              <bucket>&quot;Binghamton&quot;</bucket>
              <bucket>&quot;Lihue&quot;</bucket>
              <bucket>&quot;Waco&quot;</bucket>
              <bucket>&quot;Grand Junction&quot;</bucket>
              <bucket>&quot;Arcata CA&quot;</bucket>
              <bucket>&quot;Nome&quot;</bucket>
              <bucket>&quot;Monroe&quot;</bucket>
              <bucket>&quot;Gainesville&quot;</bucket>
              <bucket>&quot;Flagstaff&quot;</bucket>
              <bucket>&quot;College Station&quot;</bucket>
              <bucket>&quot;Kotzebue&quot;</bucket>
              <bucket>&quot;Bismarck&quot;</bucket>
              <bucket>&quot;Bakersfield&quot;</bucket>
              <bucket>&quot;Dubuque IA&quot;</bucket>
              <bucket>&quot;Wichita Falls&quot;</bucket>
              <bucket>&quot;Charlottesville VA&quot;</bucket>
              <bucket>&quot;Wrangell&quot;</bucket>
              <bucket>&quot;Hayden&quot;</bucket>
              <bucket>&quot;Idaho Falls&quot;</bucket>
              <bucket>&quot;Huntington&quot;</bucket>
              <bucket>&quot;Erie&quot;</bucket>
              <bucket>&quot;Barrow&quot;</bucket>
              <bucket>&quot;Panama City&quot;</bucket>
              <bucket>&quot;Tyler&quot;</bucket>
              <bucket>&quot;St. Croix Island&quot;</bucket>
              <bucket>&quot;Kona&quot;</bucket>
              <bucket>&quot;Grand Forks&quot;</bucket>
              <bucket>&quot;Bethel&quot;</bucket>
              <bucket>&quot;Durango&quot;</bucket>
              <bucket>&quot;Casper&quot;</bucket>
              <bucket>&quot;Butte&quot;</bucket>
              <bucket>&quot;San Angelo&quot;</bucket>
              <bucket>&quot;Pasco&quot;</bucket>
              <bucket>&quot;Modesto&quot;</bucket>
              <bucket>&quot;Key West&quot;</bucket>
              <bucket>&quot;Ithaca&quot;</bucket>
              <bucket>&quot;Elko&quot;</bucket>
              <bucket>&quot;Vail&quot;</bucket>
              <bucket>&quot;Lawton&quot;</bucket>
              <bucket>&quot;Elmira&quot;</bucket>
              <bucket>&quot;Montrose CO&quot;</bucket>
              <bucket>&quot;Fort Smith&quot;</bucket>
              <bucket>&quot;Dothan&quot;</bucket>
              <bucket>&quot;Alexandria&quot;</bucket>
              <bucket>&quot;Texarkana&quot;</bucket>
              <bucket>&quot;Laredo&quot;</bucket>
              <bucket>&quot;Helena&quot;</bucket>
              <bucket>&quot;Deadhorse&quot;</bucket>
              <bucket>&quot;Cordova&quot;</bucket>
              <bucket>&quot;Yuma&quot;</bucket>
              <bucket>&quot;Wassau&quot;</bucket>
              <bucket>&quot;Sitka&quot;</bucket>
              <bucket>&quot;New Haven&quot;</bucket>
              <bucket>&quot;Lynchburg&quot;</bucket>
              <bucket>&quot;Kalispell&quot;</bucket>
              <bucket>&quot;Sioux City&quot;</bucket>
              <bucket>&quot;Redding&quot;</bucket>
              <bucket>&quot;Agana&quot;</bucket>
              <bucket>&quot;Jacksonville NC&quot;</bucket>
              <bucket>&quot;Abilene&quot;</bucket>
              <bucket>&quot;Valdosta&quot;</bucket>
              <bucket>&quot;Saipan&quot;</bucket>
              <bucket>&quot;Marquette&quot;</bucket>
              <bucket>&quot;Brownsville&quot;</bucket>
              <bucket>&quot;Santa Maria&quot;</bucket>
              <bucket>&quot;King Salmon&quot;</bucket>
              <bucket>&quot;South Lake Tahoe&quot;</bucket>
              <bucket>&quot;Dillingham&quot;</bucket>
              <bucket>&quot;State College Pennsylvania&quot;</bucket>
              <bucket>&quot;Inyokern&quot;</bucket>
              <bucket>&quot;Columbus Mississippi&quot;</bucket>
              <bucket>&quot;Meridian&quot;</bucket>
              <bucket>&quot;Macon&quot;</bucket>
              <bucket>&quot;Longview&quot;</bucket>
              <bucket>&quot;Grand Canyon&quot;</bucket>
              <bucket>&quot;Carlsbad&quot;</bucket>
              <bucket>&quot;Beaumont&quot;</bucket>
              <bucket>&quot;Yakutat&quot;</bucket>
              <bucket>&quot;Redmond-Bend&quot;</bucket>
              <bucket>&quot;Kinston&quot;</bucket>
              <bucket>&quot;Gunnison&quot;</bucket>
              <bucket>&quot;Florence&quot;</bucket>
              <bucket>&quot;Twin Falls&quot;</bucket>
              <bucket>&quot;Rota&quot;</bucket>
              <bucket>&quot;Atlantic City&quot;</bucket>
              <bucket>&quot;Waterloo&quot;</bucket>
              <bucket>&quot;Visalia&quot;</bucket>
              <bucket>&quot;Pocatello&quot;</bucket>
              <bucket>&quot;Lake Charles&quot;</bucket>
              <bucket>&quot;Hilo&quot;</bucket>
              <bucket>&quot;Chico&quot;</bucket>
              <bucket>&quot;Bellingham&quot;</bucket>
              <bucket>&quot;Trenton&quot;</bucket>
              <bucket>&quot;Saint George&quot;</bucket>
              <bucket>&quot;Naples&quot;</bucket>
              <bucket>&quot;Crescent City&quot;</bucket>
              <bucket>&quot;Utica&quot;</bucket>
              <bucket>&quot;Tupelo&quot;</bucket>
              <bucket>&quot;Telluride&quot;</bucket>
              <bucket>&quot;Nantucket&quot;</bucket>
              <bucket>&quot;Babelthuap&quot;</bucket>
              <bucket>&quot;Victoria&quot;</bucket>
              <bucket>&quot;Stockton&quot;</bucket>
              <bucket>&quot;St Mary&apos;s&quot;</bucket>
              <bucket>&quot;Pueblo&quot;</bucket>
              <bucket>&quot;Imperial&quot;</bucket>
              <bucket>&quot;Brunswick&quot;</bucket>
              <bucket>&quot;Aguadilla&quot;</bucket>
              <bucket>&quot;St. Petersburg&quot;</bucket>
              <bucket>&quot;Palmdale&quot;</bucket>
              <bucket>&quot;Oxnard&quot;</bucket>
              <bucket>&quot;Gustavus&quot;</bucket>
              <bucket>&quot;Cody&quot;</bucket>
              <bucket>&quot;Cedar City&quot;</bucket>
              <bucket>&quot;West Yellowstone&quot;</bucket>
              <bucket>&quot;Concord&quot;</bucket>
              <bucket>&quot;New Bern&quot;</bucket>
              <bucket>&quot;Hilton Head&quot;</bucket>
              <bucket>&quot;Hancock&quot;</bucket>
              <bucket>&quot;Salem&quot;</bucket>
              <bucket>&quot;Rockford&quot;</bucket>
              <bucket>&quot;Rock Springs&quot;</bucket>
              <bucket>&quot;Ponce&quot;</bucket>
              <bucket>&quot;Pinehurst-Southern Pines&quot;</bucket>
              <bucket>&quot;Pellston&quot;</bucket>
              <bucket>&quot;Mayaguez&quot;</bucket>
              <bucket>&quot;Lewisburg&quot;</bucket>
              <bucket>&quot;International Falls&quot;</bucket>
              <bucket>&quot;Hickory&quot;</bucket>
              <bucket>&quot;Eau Claire&quot;</bucket>
              <bucket>&quot;Adak Island&quot;</bucket>
              <bucket>&quot;Yap&quot;</bucket>
              <bucket>&quot;Yakima&quot;</bucket>
              <bucket>&quot;Roswell&quot;</bucket>
              <bucket>&quot;Rhinelander&quot;</bucket>
              <bucket>&quot;Red River&quot;</bucket>
              <bucket>&quot;North Bend&quot;</bucket>
              <bucket>&quot;Muskegon&quot;</bucket>
              <bucket>&quot;Molokai&quot;</bucket>
              <bucket>&quot;Marathon&quot;</bucket>
              <bucket>&quot;Lewiston&quot;</bucket>
              <bucket>&quot;Lanai&quot;</bucket>
              <bucket>&quot;Klamath Falls&quot;</bucket>
              <bucket>&quot;Gillette&quot;</bucket>
              <bucket>&quot;Bemidji&quot;</bucket>
              <bucket>&quot;Aniak&quot;</bucket>
              <bucket>&quot;Wilmington&quot;</bucket>
              <bucket>&quot;Washington&quot;</bucket>
              <bucket>&quot;Springfield&quot;</bucket>
              <bucket>&quot;Seattle&quot;</bucket>
              <bucket>&quot;Scottsbluff&quot;</bucket>
              <bucket>&quot;Rochester&quot;</bucket>
              <bucket>&quot;Provo&quot;</bucket>
              <bucket>&quot;Portland&quot;</bucket>
              <bucket>&quot;Pierre&quot;</bucket>
              <bucket>&quot;Ogden&quot;</bucket>
              <bucket>&quot;New York&quot;</bucket>
              <bucket>&quot;Minot&quot;</bucket>
              <bucket>&quot;Killeen&quot;</bucket>
              <bucket>&quot;Kansas City&quot;</bucket>
              <bucket>&quot;Houston&quot;</bucket>
              <bucket>&quot;Greenville&quot;</bucket>
              <bucket>&quot;Farmington&quot;</bucket>
              <bucket>&quot;Detroit&quot;</bucket>
              <bucket>&quot;Columbus&quot;</bucket>
              <bucket>&quot;Clarksburg&quot;</bucket>
              <bucket>&quot;Chicago&quot;</bucket>
              <bucket>&quot;Cheyenne&quot;</bucket>
              <bucket>&quot;Charleston&quot;</bucket>
              <bucket>&quot;Albany&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[csv.41677.501581817130].[none:Origin:nk]'>
            <groupfilter function='level-members' level='[none:Origin:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[csv.41677.501581817130].[none:Origin:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;ORD&quot;</bucket>
              <bucket>&quot;ATL&quot;</bucket>
              <bucket>&quot;DFW&quot;</bucket>
              <bucket>&quot;LGA&quot;</bucket>
              <bucket>&quot;EWR&quot;</bucket>
              <bucket>&quot;BOS&quot;</bucket>
              <bucket>&quot;LAX&quot;</bucket>
              <bucket>&quot;DTW&quot;</bucket>
              <bucket>&quot;MSP&quot;</bucket>
              <bucket>&quot;DCA&quot;</bucket>
              <bucket>&quot;SFO&quot;</bucket>
              <bucket>&quot;PHL&quot;</bucket>
              <bucket>&quot;STL&quot;</bucket>
              <bucket>&quot;DEN&quot;</bucket>
              <bucket>&quot;CLT&quot;</bucket>
              <bucket>&quot;PHX&quot;</bucket>
              <bucket>&quot;PIT&quot;</bucket>
              <bucket>&quot;CVG&quot;</bucket>
              <bucket>&quot;IAH&quot;</bucket>
              <bucket>&quot;IAD&quot;</bucket>
              <bucket>&quot;JFK&quot;</bucket>
              <bucket>&quot;SEA&quot;</bucket>
              <bucket>&quot;BWI&quot;</bucket>
              <bucket>&quot;LAS&quot;</bucket>
              <bucket>&quot;CLE&quot;</bucket>
              <bucket>&quot;SLC&quot;</bucket>
              <bucket>&quot;HOU&quot;</bucket>
              <bucket>&quot;MEM&quot;</bucket>
              <bucket>&quot;MCO&quot;</bucket>
              <bucket>&quot;MIA&quot;</bucket>
              <bucket>&quot;SAN&quot;</bucket>
              <bucket>&quot;RDU&quot;</bucket>
              <bucket>&quot;DAL&quot;</bucket>
              <bucket>&quot;MDW&quot;</bucket>
              <bucket>&quot;CMH&quot;</bucket>
              <bucket>&quot;MCI&quot;</bucket>
              <bucket>&quot;SJC&quot;</bucket>
              <bucket>&quot;OAK&quot;</bucket>
              <bucket>&quot;TPA&quot;</bucket>
              <bucket>&quot;SNA&quot;</bucket>
              <bucket>&quot;PDX&quot;</bucket>
              <bucket>&quot;BNA&quot;</bucket>
              <bucket>&quot;MSY&quot;</bucket>
              <bucket>&quot;IND&quot;</bucket>
              <bucket>&quot;BDL&quot;</bucket>
              <bucket>&quot;MKE&quot;</bucket>
              <bucket>&quot;BUF&quot;</bucket>
              <bucket>&quot;FLL&quot;</bucket>
              <bucket>&quot;ROC&quot;</bucket>
              <bucket>&quot;AUS&quot;</bucket>
              <bucket>&quot;SAT&quot;</bucket>
              <bucket>&quot;ANC&quot;</bucket>
              <bucket>&quot;GSO&quot;</bucket>
              <bucket>&quot;ONT&quot;</bucket>
              <bucket>&quot;RIC&quot;</bucket>
              <bucket>&quot;SMF&quot;</bucket>
              <bucket>&quot;ORF&quot;</bucket>
              <bucket>&quot;HPN&quot;</bucket>
              <bucket>&quot;PVD&quot;</bucket>
              <bucket>&quot;BUR&quot;</bucket>
              <bucket>&quot;DAY&quot;</bucket>
              <bucket>&quot;SYR&quot;</bucket>
              <bucket>&quot;SDF&quot;</bucket>
              <bucket>&quot;TUL&quot;</bucket>
              <bucket>&quot;GRR&quot;</bucket>
              <bucket>&quot;JAX&quot;</bucket>
              <bucket>&quot;OKC&quot;</bucket>
              <bucket>&quot;ABQ&quot;</bucket>
              <bucket>&quot;COS&quot;</bucket>
              <bucket>&quot;SJU&quot;</bucket>
              <bucket>&quot;GSP&quot;</bucket>
              <bucket>&quot;ALB&quot;</bucket>
              <bucket>&quot;PBI&quot;</bucket>
              <bucket>&quot;PWM&quot;</bucket>
              <bucket>&quot;CHS&quot;</bucket>
              <bucket>&quot;ICT&quot;</bucket>
              <bucket>&quot;DSM&quot;</bucket>
              <bucket>&quot;LIT&quot;</bucket>
              <bucket>&quot;CID&quot;</bucket>
              <bucket>&quot;BHM&quot;</bucket>
              <bucket>&quot;OMA&quot;</bucket>
              <bucket>&quot;RNO&quot;</bucket>
              <bucket>&quot;MDT&quot;</bucket>
              <bucket>&quot;HNL&quot;</bucket>
              <bucket>&quot;MHT&quot;</bucket>
              <bucket>&quot;ELP&quot;</bucket>
              <bucket>&quot;MSN&quot;</bucket>
              <bucket>&quot;CAE&quot;</bucket>
              <bucket>&quot;TUS&quot;</bucket>
              <bucket>&quot;RSW&quot;</bucket>
              <bucket>&quot;TYS&quot;</bucket>
              <bucket>&quot;ABE&quot;</bucket>
              <bucket>&quot;HSV&quot;</bucket>
              <bucket>&quot;SAV&quot;</bucket>
              <bucket>&quot;PNS&quot;</bucket>
              <bucket>&quot;JAN&quot;</bucket>
              <bucket>&quot;ISP&quot;</bucket>
              <bucket>&quot;XNA&quot;</bucket>
              <bucket>&quot;GEG&quot;</bucket>
              <bucket>&quot;AZO&quot;</bucket>
              <bucket>&quot;SHV&quot;</bucket>
              <bucket>&quot;SGF&quot;</bucket>
              <bucket>&quot;FWA&quot;</bucket>
              <bucket>&quot;BTV&quot;</bucket>
              <bucket>&quot;BTR&quot;</bucket>
              <bucket>&quot;RST&quot;</bucket>
              <bucket>&quot;SBA&quot;</bucket>
              <bucket>&quot;LEX&quot;</bucket>
              <bucket>&quot;JNU&quot;</bucket>
              <bucket>&quot;GRB&quot;</bucket>
              <bucket>&quot;LAN&quot;</bucket>
              <bucket>&quot;MBS&quot;</bucket>
              <bucket>&quot;FSD&quot;</bucket>
              <bucket>&quot;MLI&quot;</bucket>
              <bucket>&quot;ROA&quot;</bucket>
              <bucket>&quot;SBN&quot;</bucket>
              <bucket>&quot;LBB&quot;</bucket>
              <bucket>&quot;AMA&quot;</bucket>
              <bucket>&quot;PSP&quot;</bucket>
              <bucket>&quot;FAI&quot;</bucket>
              <bucket>&quot;EVV&quot;</bucket>
              <bucket>&quot;CAK&quot;</bucket>
              <bucket>&quot;CRW&quot;</bucket>
              <bucket>&quot;MOB&quot;</bucket>
              <bucket>&quot;FAT&quot;</bucket>
              <bucket>&quot;MAF&quot;</bucket>
              <bucket>&quot;CHA&quot;</bucket>
              <bucket>&quot;BGR&quot;</bucket>
              <bucket>&quot;PIA&quot;</bucket>
              <bucket>&quot;TLH&quot;</bucket>
              <bucket>&quot;SRQ&quot;</bucket>
              <bucket>&quot;CRP&quot;</bucket>
              <bucket>&quot;HRL&quot;</bucket>
              <bucket>&quot;FAR&quot;</bucket>
              <bucket>&quot;TOL&quot;</bucket>
              <bucket>&quot;OGG&quot;</bucket>
              <bucket>&quot;BOI&quot;</bucket>
              <bucket>&quot;EUG&quot;</bucket>
              <bucket>&quot;MRY&quot;</bucket>
              <bucket>&quot;MYR&quot;</bucket>
              <bucket>&quot;TRI&quot;</bucket>
              <bucket>&quot;LNK&quot;</bucket>
              <bucket>&quot;LGB&quot;</bucket>
              <bucket>&quot;ILM&quot;</bucket>
              <bucket>&quot;AVL&quot;</bucket>
              <bucket>&quot;SWF&quot;</bucket>
              <bucket>&quot;DUT&quot;</bucket>
              <bucket>&quot;ASE&quot;</bucket>
              <bucket>&quot;BIL&quot;</bucket>
              <bucket>&quot;VPS&quot;</bucket>
              <bucket>&quot;AGS&quot;</bucket>
              <bucket>&quot;SUN&quot;</bucket>
              <bucket>&quot;GTF&quot;</bucket>
              <bucket>&quot;ATW&quot;</bucket>
              <bucket>&quot;TVC&quot;</bucket>
              <bucket>&quot;BMI&quot;</bucket>
              <bucket>&quot;FNT&quot;</bucket>
              <bucket>&quot;GPT&quot;</bucket>
              <bucket>&quot;MFR&quot;</bucket>
              <bucket>&quot;AVP&quot;</bucket>
              <bucket>&quot;RAP&quot;</bucket>
              <bucket>&quot;MGM&quot;</bucket>
              <bucket>&quot;DLH&quot;</bucket>
              <bucket>&quot;CMI&quot;</bucket>
              <bucket>&quot;BZN&quot;</bucket>
              <bucket>&quot;DAB&quot;</bucket>
              <bucket>&quot;JAC&quot;</bucket>
              <bucket>&quot;STT&quot;</bucket>
              <bucket>&quot;SBP&quot;</bucket>
              <bucket>&quot;MSO&quot;</bucket>
              <bucket>&quot;LSE&quot;</bucket>
              <bucket>&quot;LFT&quot;</bucket>
              <bucket>&quot;KTN&quot;</bucket>
              <bucket>&quot;ORH&quot;</bucket>
              <bucket>&quot;PSG&quot;</bucket>
              <bucket>&quot;MLB&quot;</bucket>
              <bucket>&quot;PHF&quot;</bucket>
              <bucket>&quot;FAY&quot;</bucket>
              <bucket>&quot;ADQ&quot;</bucket>
              <bucket>&quot;MFE&quot;</bucket>
              <bucket>&quot;GRK&quot;</bucket>
              <bucket>&quot;CSG&quot;</bucket>
              <bucket>&quot;BGM&quot;</bucket>
              <bucket>&quot;LIH&quot;</bucket>
              <bucket>&quot;GJT&quot;</bucket>
              <bucket>&quot;ACV&quot;</bucket>
              <bucket>&quot;ACT&quot;</bucket>
              <bucket>&quot;OME&quot;</bucket>
              <bucket>&quot;MLU&quot;</bucket>
              <bucket>&quot;GNV&quot;</bucket>
              <bucket>&quot;FLG&quot;</bucket>
              <bucket>&quot;CLL&quot;</bucket>
              <bucket>&quot;OTZ&quot;</bucket>
              <bucket>&quot;BIS&quot;</bucket>
              <bucket>&quot;BFL&quot;</bucket>
              <bucket>&quot;DBQ&quot;</bucket>
              <bucket>&quot;SPS&quot;</bucket>
              <bucket>&quot;CHO&quot;</bucket>
              <bucket>&quot;WRG&quot;</bucket>
              <bucket>&quot;HDN&quot;</bucket>
              <bucket>&quot;IDA&quot;</bucket>
              <bucket>&quot;HTS&quot;</bucket>
              <bucket>&quot;ILE&quot;</bucket>
              <bucket>&quot;ERI&quot;</bucket>
              <bucket>&quot;BRW&quot;</bucket>
              <bucket>&quot;PFN&quot;</bucket>
              <bucket>&quot;TYR&quot;</bucket>
              <bucket>&quot;STX&quot;</bucket>
              <bucket>&quot;KOA&quot;</bucket>
              <bucket>&quot;GFK&quot;</bucket>
              <bucket>&quot;DET&quot;</bucket>
              <bucket>&quot;BET&quot;</bucket>
              <bucket>&quot;DRO&quot;</bucket>
              <bucket>&quot;CPR&quot;</bucket>
              <bucket>&quot;BTM&quot;</bucket>
              <bucket>&quot;SJT&quot;</bucket>
              <bucket>&quot;PSC&quot;</bucket>
              <bucket>&quot;MOD&quot;</bucket>
              <bucket>&quot;ITH&quot;</bucket>
              <bucket>&quot;EYW&quot;</bucket>
              <bucket>&quot;EKO&quot;</bucket>
              <bucket>&quot;LAW&quot;</bucket>
              <bucket>&quot;ELM&quot;</bucket>
              <bucket>&quot;EGE&quot;</bucket>
              <bucket>&quot;MTJ&quot;</bucket>
              <bucket>&quot;FSM&quot;</bucket>
              <bucket>&quot;DHN&quot;</bucket>
              <bucket>&quot;AEX&quot;</bucket>
              <bucket>&quot;TXK&quot;</bucket>
              <bucket>&quot;SCC&quot;</bucket>
              <bucket>&quot;LRD&quot;</bucket>
              <bucket>&quot;HLN&quot;</bucket>
              <bucket>&quot;CDV&quot;</bucket>
              <bucket>&quot;YUM&quot;</bucket>
              <bucket>&quot;SIT&quot;</bucket>
              <bucket>&quot;LYH&quot;</bucket>
              <bucket>&quot;HVN&quot;</bucket>
              <bucket>&quot;FCA&quot;</bucket>
              <bucket>&quot;CWA&quot;</bucket>
              <bucket>&quot;SUX&quot;</bucket>
              <bucket>&quot;RDD&quot;</bucket>
              <bucket>&quot;GUM&quot;</bucket>
              <bucket>&quot;OAJ&quot;</bucket>
              <bucket>&quot;ABI&quot;</bucket>
              <bucket>&quot;VLD&quot;</bucket>
              <bucket>&quot;SPN&quot;</bucket>
              <bucket>&quot;SPI&quot;</bucket>
              <bucket>&quot;MQT&quot;</bucket>
              <bucket>&quot;BRO&quot;</bucket>
              <bucket>&quot;SMX&quot;</bucket>
              <bucket>&quot;MOT&quot;</bucket>
              <bucket>&quot;AKN&quot;</bucket>
              <bucket>&quot;TVL&quot;</bucket>
              <bucket>&quot;DLG&quot;</bucket>
              <bucket>&quot;SCE&quot;</bucket>
              <bucket>&quot;IYK&quot;</bucket>
              <bucket>&quot;GTR&quot;</bucket>
              <bucket>&quot;MEI&quot;</bucket>
              <bucket>&quot;MCN&quot;</bucket>
              <bucket>&quot;GGG&quot;</bucket>
              <bucket>&quot;GCN&quot;</bucket>
              <bucket>&quot;CLD&quot;</bucket>
              <bucket>&quot;BPT&quot;</bucket>
              <bucket>&quot;YAK&quot;</bucket>
              <bucket>&quot;RDM&quot;</bucket>
              <bucket>&quot;ISO&quot;</bucket>
              <bucket>&quot;GUC&quot;</bucket>
              <bucket>&quot;FLO&quot;</bucket>
              <bucket>&quot;TWF&quot;</bucket>
              <bucket>&quot;ROP&quot;</bucket>
              <bucket>&quot;ABY&quot;</bucket>
              <bucket>&quot;EFD&quot;</bucket>
              <bucket>&quot;ACY&quot;</bucket>
              <bucket>&quot;VIS&quot;</bucket>
              <bucket>&quot;PIH&quot;</bucket>
              <bucket>&quot;LCH&quot;</bucket>
              <bucket>&quot;ITO&quot;</bucket>
              <bucket>&quot;CIC&quot;</bucket>
              <bucket>&quot;BLI&quot;</bucket>
              <bucket>&quot;ALO&quot;</bucket>
              <bucket>&quot;TTN&quot;</bucket>
              <bucket>&quot;SGU&quot;</bucket>
              <bucket>&quot;CEC&quot;</bucket>
              <bucket>&quot;APF&quot;</bucket>
              <bucket>&quot;UCA&quot;</bucket>
              <bucket>&quot;TUP&quot;</bucket>
              <bucket>&quot;TEX&quot;</bucket>
              <bucket>&quot;ROR&quot;</bucket>
              <bucket>&quot;ACK&quot;</bucket>
              <bucket>&quot;VCT&quot;</bucket>
              <bucket>&quot;SCK&quot;</bucket>
              <bucket>&quot;PUB&quot;</bucket>
              <bucket>&quot;KSM&quot;</bucket>
              <bucket>&quot;IPL&quot;</bucket>
              <bucket>&quot;BQN&quot;</bucket>
              <bucket>&quot;BQK&quot;</bucket>
              <bucket>&quot;PMD&quot;</bucket>
              <bucket>&quot;PIE&quot;</bucket>
              <bucket>&quot;OXR&quot;</bucket>
              <bucket>&quot;GST&quot;</bucket>
              <bucket>&quot;COD&quot;</bucket>
              <bucket>&quot;CDC&quot;</bucket>
              <bucket>&quot;WYS&quot;</bucket>
              <bucket>&quot;CCR&quot;</bucket>
              <bucket>&quot;HHH&quot;</bucket>
              <bucket>&quot;EWN&quot;</bucket>
              <bucket>&quot;CMX&quot;</bucket>
              <bucket>&quot;SOP&quot;</bucket>
              <bucket>&quot;SLE&quot;</bucket>
              <bucket>&quot;RKS&quot;</bucket>
              <bucket>&quot;RFD&quot;</bucket>
              <bucket>&quot;PSE&quot;</bucket>
              <bucket>&quot;PLN&quot;</bucket>
              <bucket>&quot;MAZ&quot;</bucket>
              <bucket>&quot;LWB&quot;</bucket>
              <bucket>&quot;INL&quot;</bucket>
              <bucket>&quot;HKY&quot;</bucket>
              <bucket>&quot;EAU&quot;</bucket>
              <bucket>&quot;ADK&quot;</bucket>
              <bucket>&quot;YKM&quot;</bucket>
              <bucket>&quot;YAP&quot;</bucket>
              <bucket>&quot;ROW&quot;</bucket>
              <bucket>&quot;RHI&quot;</bucket>
              <bucket>&quot;RDR&quot;</bucket>
              <bucket>&quot;OTH&quot;</bucket>
              <bucket>&quot;MTH&quot;</bucket>
              <bucket>&quot;MKK&quot;</bucket>
              <bucket>&quot;MKG&quot;</bucket>
              <bucket>&quot;MIB&quot;</bucket>
              <bucket>&quot;LWS&quot;</bucket>
              <bucket>&quot;LNY&quot;</bucket>
              <bucket>&quot;LMT&quot;</bucket>
              <bucket>&quot;ILG&quot;</bucket>
              <bucket>&quot;GCC&quot;</bucket>
              <bucket>&quot;BJI&quot;</bucket>
              <bucket>&quot;ANI&quot;</bucket>
              <bucket>&quot;PVU&quot;</bucket>
              <bucket>&quot;PIR&quot;</bucket>
              <bucket>&quot;OGD&quot;</bucket>
              <bucket>&quot;MKC&quot;</bucket>
              <bucket>&quot;GLH&quot;</bucket>
              <bucket>&quot;FMN&quot;</bucket>
              <bucket>&quot;CYS&quot;</bucket>
              <bucket>&quot;CKB&quot;</bucket>
              <bucket>&quot;BFI&quot;</bucket>
              <bucket>&quot;BFF&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[csv.41677.501581817130].[none:Origin:nk]</column>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[csv.41677.501581817130].[none:OCity:nk]' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='div-level' scope='rows' value='10' />
            <format attr='div-level' scope='cols' value='10' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <lod column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]' />
            </encodings>
            <reference-line axis-column='[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]' formula='average' id='refline0' label-type='none' scope='per-cell' value-column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]' z-order='2' />
            <reference-line axis-column='[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]' fill-above='true' fill-below='true' formula='average' id='refline1' label-type='none' percentage-bands='true' scope='per-cell' symmetric='false' value-column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]' z-order='1'>
              <reference-line-value percentage='60' />
              <reference-line-value percentage='80' />
            </reference-line>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='shape' value=':filled/plus' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]</rows>
        <cols>([csv.41677.501581817130].[none:OCity:nk] / [csv.41677.501581817130].[none:Origin:nk])</cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Flights By Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Number of Flights by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='02 Cancellation Count By Months' datatype='integer' name='[02 Flight Count By Months (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx2 = match( .arg1 , canFlights.R$Month ) &#13;&#10;print(canFlights.R[idx2,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { canFlights.R[idx2,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='02 Flight Count By Months' datatype='integer' name='[Calculation_1340527151300682]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx = match( .arg1 , numFlights.R$Month ) &#13;&#10;print(numFlights.R[idx,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { numFlights.R[idx,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' datatype-customized='true' name='[Month]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Month]' derivation='None' name='[none:Month:qk]' pivot='key' type='quantitative' />
            <column-instance column='[02 Flight Count By Months (copy)]' derivation='User' name='[usr:02 Flight Count By Months (copy):qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[Calculation_1340527151300682]' derivation='User' name='[usr:Calculation_1340527151300682:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity)]'>
            <groupfilter function='level-members' level='[OCity]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[none:Month:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[none:Month:qk]</column>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1] + [csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1])</rows>
        <cols>[csv.41677.501581817130].[none:Month:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Geo Map'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='03 (GLM) Grab Coefficient Variables' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
            <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLong:qk]' field-type='quantitative' max='34007519.899238408' min='20016486.241919756' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLat:qk]' field-type='quantitative' max='12178612.901145922' min='1285826.790319737' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' palette='tableau-red-green' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[none:OLat:qk]</rows>
        <cols>[csv.41677.501581817130].[none:OLong:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Geo Map  w.o. Null'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Where are delays the worst?&#10;</run>
            <run fontcolor='#f1923e' fontsize='11' italic='true'>Hover over a city to see it&apos;s rank comparative to other airports in its region and whether its in the worst 5 or best 5 cities.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='03 (GLM) Grab Coefficient Variables (signage)' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='03 (GLM) Grab Coefficient Variables' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
            <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:OCity:nk]'>
            <groupfilter function='level-members' level='[none:OCity:nk]' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:Origin:nk]'>
            <groupfilter function='level-members' level='[none:Origin:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='-1' />
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='1' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[none:Origin:nk]</column>
            <column>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
            <column>[csv.41677.501581817130].[none:OCity:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLong:qk]' field-type='quantitative' max='34126850.334283739' min='20363084.785862178' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLat:qk]' field-type='quantitative' max='8190544.1534709409' min='1352495.2863562535' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[csv.41677.501581817130].[none:OLong:qk]' value='false' />
            <format attr='in-tooltip' field='[csv.41677.501581817130].[none:OLat:qk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <size column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' />
              <color column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]' />
              <lod column='[csv.41677.501581817130].[none:Origin:nk]' />
              <lod column='[csv.41677.501581817130].[none:OCity:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.2853591442108154' />
                <format attr='shape' value=':filled/plus' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[none:OLat:qk]</rows>
        <cols>[csv.41677.501581817130].[none:OLong:qk]</cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Heat Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Which airports in your city should you take?&#10;</run>
            <run fontcolor='#f1923e' italic='true'>Same city comparison of airports as well as region wide comparison of flight cancelllations with highly affected cities on the forefront.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='03 (GLM) Grab Coefficient Variables' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='752' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' palette='area-red-green' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
            <format attr='break-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
            <format attr='show-null-value-warning' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='(GLM) Coefficient Variables'>
              <formatted-text>
                <run>(GLM) Coefficient Variables</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' />
              <color column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' />
              <text column='[csv.41677.501581817130].[none:OCity:nk]' />
              <text column='[csv.41677.501581817130].[none:Origin:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='Parameters Control'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='parameter-ctrl'>
            <format attr='border-width' value='2' />
            <format attr='border-style' value='solid' />
          </style-rule>
          <style-rule element='parameter-ctrl-title'>
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Regional Distribution'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='03 (GLM) Grab Coefficient Variables' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Regional Groups]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <calculation class='categorical-bin' column='[OCity]' default='&quot;Yuma&quot;'>
                <bin value='&quot;Albany&quot;'>
                  <value>&quot;Albany&quot;</value>
                  <value>&quot;Charlotte&quot;</value>
                  <value>&quot;Greensboro&quot;</value>
                  <value>&quot;Raleigh-durham&quot;</value>
                  <value>&quot;Richmond&quot;</value>
                  <value>&quot;Roanoke VA&quot;</value>
                  <value>&quot;Washington&quot;</value>
                </bin>
                <bin value='&quot;Aspen&quot;'>
                  <value>&quot;Aspen&quot;</value>
                  <value>&quot;Boise&quot;</value>
                  <value>&quot;Colorado Springs&quot;</value>
                  <value>&quot;Denver&quot;</value>
                  <value>&quot;Fresno&quot;</value>
                  <value>&quot;Hailey&quot;</value>
                  <value>&quot;Long Beach&quot;</value>
                  <value>&quot;Los Angeles&quot;</value>
                  <value>&quot;Oakland&quot;</value>
                  <value>&quot;Ontario&quot;</value>
                  <value>&quot;Palm Springs&quot;</value>
                  <value>&quot;Reno&quot;</value>
                  <value>&quot;San Diego&quot;</value>
                  <value>&quot;San Francisco&quot;</value>
                  <value>&quot;San Jose&quot;</value>
                </bin>
                <bin value='&quot;Austin&quot;'>
                  <value>&quot;Austin&quot;</value>
                  <value>&quot;Birmingham&quot;</value>
                  <value>&quot;Columbus&quot;</value>
                  <value>&quot;Dallas-Fort Worth&quot;</value>
                  <value>&quot;Greenville&quot;</value>
                  <value>&quot;Houston&quot;</value>
                  <value>&quot;Little Rock&quot;</value>
                  <value>&quot;Lubbock&quot;</value>
                  <value>&quot;Memphis&quot;</value>
                  <value>&quot;Miami&quot;</value>
                  <value>&quot;Midland&quot;</value>
                  <value>&quot;New Orleans&quot;</value>
                  <value>&quot;Oklahoma City&quot;</value>
                  <value>&quot;Sarasota&quot;</value>
                  <value>&quot;Tulsa&quot;</value>
                </bin>
                <bin value='&quot;Cedar Rapids&quot;'>
                  <value>&quot;Cedar Rapids&quot;</value>
                  <value>&quot;Chicago&quot;</value>
                  <value>&quot;Cincinnati&quot;</value>
                  <value>&quot;Cleveland&quot;</value>
                  <value>&quot;Detroit&quot;</value>
                  <value>&quot;Indianapolis&quot;</value>
                  <value>&quot;Kalamazoo&quot;</value>
                  <value>&quot;Kansas City&quot;</value>
                  <value>&quot;Louisville&quot;</value>
                  <value>&quot;Milwaukee&quot;</value>
                  <value>&quot;Minneapolis&quot;</value>
                  <value>&quot;Omaha&quot;</value>
                  <value>&quot;Pittsburgh&quot;</value>
                  <value>&quot;Portland&quot;</value>
                  <value>&quot;Rochester&quot;</value>
                  <value>&quot;St. Louis&quot;</value>
                </bin>
                <bin value='&quot;Islip&quot;'>
                  <value>&quot;Islip&quot;</value>
                  <value>&quot;New York&quot;</value>
                  <value>&quot;Newark&quot;</value>
                  <value>&quot;Philadelphia&quot;</value>
                  <value>&quot;Worcester&quot;</value>
                </bin>
              </calculation>
              <aliases>
                <alias key='&quot;Albany&quot;' value='Mid-Atlantic' />
                <alias key='&quot;Aspen&quot;' value='West' />
                <alias key='&quot;Austin&quot;' value='South' />
                <alias key='&quot;Cedar Rapids&quot;' value='Midwest' />
                <alias key='&quot;Islip&quot;' value='Northeast' />
                <alias key='&quot;Yuma&quot;' value='Other' />
              </aliases>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk:5]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[Regional Groups]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[csv.41677.501581817130].[Regional Groups]' value='95' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <lod column='[csv.41677.501581817130].[none:OCity:nk]' />
            </encodings>
            <reference-line axis-column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' formula='average' id='refline0' label-type='automatic' scope='per-cell' symmetric='false' value-column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
                <format attr='shape' value=':filled/plus' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]</rows>
        <cols>[csv.41677.501581817130].[Regional Groups]</cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Table Chart'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Option : Null' datatype='real' name='[Calculation_0840422201739178]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IIF([Calculation_7320206215923342]==0,Null,[Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='03 (GLM) Grab Coefficient Variables' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0840422201739178]' derivation='User' name='[usr:Calculation_0840422201739178:ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[usr:Calculation_0840422201739178:ok]' />
              <groupfilter function='member' level='[usr:Calculation_0840422201739178:ok]' member='%null%' />
            </groupfilter>
          </filter>
          <sort class='alphabetic' column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:ok:1]' direction='DESC' />
          <slices>
            <column>[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([csv.41677.501581817130].[none:Origin:nk] / ([csv.41677.501581817130].[none:OCity:nk] / [csv.41677.501581817130].[usr:Calculation_7320206215923342:ok:1]))</rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='Variable Importance'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Variable Importance of Origin Points&#10;</run>
            <run fontcolor='#f1923e' italic='true'>Move index sliders to view the top 10 or bottom 10 airports for cancellations.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='03 (GLM) Grab Coefficient Variables (signage)' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Index' datatype='integer' name='[Calculation_0230903195627598]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='Index()' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='03 (GLM) Grab Coefficient Variables' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_0230903195627598]' derivation='User' name='[usr:Calculation_0230903195627598:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:OCity:nk]'>
            <groupfilter function='level-members' level='[none:OCity:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[csv.41677.501581817130].[none:Origin:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;HPN&quot;</bucket>
              <bucket>&quot;BOS&quot;</bucket>
              <bucket>&quot;DAL&quot;</bucket>
              <bucket>&quot;DCA&quot;</bucket>
              <bucket>&quot;ORD&quot;</bucket>
              <bucket>&quot;LGA&quot;</bucket>
              <bucket>&quot;EWR&quot;</bucket>
              <bucket>&quot;PHL&quot;</bucket>
              <bucket>&quot;DUT&quot;</bucket>
              <bucket>&quot;ASE&quot;</bucket>
              <bucket>&quot;SUN&quot;</bucket>
              <bucket>&quot;HOU&quot;</bucket>
              <bucket>&quot;JFK&quot;</bucket>
              <bucket>&quot;AZO&quot;</bucket>
              <bucket>&quot;CID&quot;</bucket>
              <bucket>&quot;DTW&quot;</bucket>
              <bucket>&quot;SFO&quot;</bucket>
              <bucket>&quot;MDW&quot;</bucket>
              <bucket>&quot;ANC&quot;</bucket>
              <bucket>&quot;PWM&quot;</bucket>
              <bucket>&quot;ISP&quot;</bucket>
              <bucket>&quot;RST&quot;</bucket>
              <bucket>&quot;MSP&quot;</bucket>
              <bucket>&quot;IAD&quot;</bucket>
              <bucket>&quot;STL&quot;</bucket>
              <bucket>&quot;ROC&quot;</bucket>
              <bucket>&quot;MKE&quot;</bucket>
              <bucket>&quot;LAN&quot;</bucket>
              <bucket>&quot;DFW&quot;</bucket>
              <bucket>&quot;COS&quot;</bucket>
              <bucket>&quot;ORH&quot;</bucket>
              <bucket>&quot;GSO&quot;</bucket>
              <bucket>&quot;GSP&quot;</bucket>
              <bucket>&quot;ICT&quot;</bucket>
              <bucket>&quot;ROA&quot;</bucket>
              <bucket>&quot;RIC&quot;</bucket>
              <bucket>&quot;LAX&quot;</bucket>
              <bucket>&quot;PNS&quot;</bucket>
              <bucket>&quot;SBN&quot;</bucket>
              <bucket>&quot;TYS&quot;</bucket>
              <bucket>&quot;OAK&quot;</bucket>
              <bucket>&quot;ORF&quot;</bucket>
              <bucket>&quot;MAF&quot;</bucket>
              <bucket>&quot;CVG&quot;</bucket>
              <bucket>&quot;ONT&quot;</bucket>
              <bucket>&quot;LBB&quot;</bucket>
              <bucket>&quot;MEM&quot;</bucket>
              <bucket>&quot;CLE&quot;</bucket>
              <bucket>&quot;LIT&quot;</bucket>
              <bucket>&quot;BHM&quot;</bucket>
              <bucket>&quot;SDF&quot;</bucket>
              <bucket>&quot;SJC&quot;</bucket>
              <bucket>&quot;TUL&quot;</bucket>
              <bucket>&quot;DEN&quot;</bucket>
              <bucket>&quot;RDU&quot;</bucket>
              <bucket>&quot;CLT&quot;</bucket>
              <bucket>&quot;MSY&quot;</bucket>
              <bucket>&quot;FAT&quot;</bucket>
              <bucket>&quot;SRQ&quot;</bucket>
              <bucket>&quot;PSP&quot;</bucket>
              <bucket>&quot;MCI&quot;</bucket>
              <bucket>&quot;OKC&quot;</bucket>
              <bucket>&quot;SAN&quot;</bucket>
              <bucket>&quot;IAH&quot;</bucket>
              <bucket>&quot;RNO&quot;</bucket>
              <bucket>&quot;AUS&quot;</bucket>
              <bucket>&quot;IND&quot;</bucket>
              <bucket>&quot;SAT&quot;</bucket>
              <bucket>&quot;SJU&quot;</bucket>
              <bucket>&quot;LGB&quot;</bucket>
              <bucket>&quot;SMF&quot;</bucket>
              <bucket>&quot;MIA&quot;</bucket>
              <bucket>&quot;JAX&quot;</bucket>
              <bucket>&quot;ELP&quot;</bucket>
              <bucket>&quot;PDX&quot;</bucket>
              <bucket>&quot;OMA&quot;</bucket>
              <bucket>&quot;TUS&quot;</bucket>
              <bucket>&quot;PHX&quot;</bucket>
              <bucket>&quot;SEA&quot;</bucket>
              <bucket>&quot;BOI&quot;</bucket>
              <bucket>&quot;SLC&quot;</bucket>
              <bucket>&quot;BNA&quot;</bucket>
              <bucket>&quot;FLL&quot;</bucket>
              <bucket>&quot;RSW&quot;</bucket>
              <bucket>&quot;TPA&quot;</bucket>
              <bucket>&quot;ABQ&quot;</bucket>
              <bucket>&quot;MCO&quot;</bucket>
              <bucket>&quot;PBI&quot;</bucket>
              <bucket>&quot;LAS&quot;</bucket>
              <bucket>&quot;HNL&quot;</bucket>
              <bucket>%all%</bucket>
              <bucket>%null%</bucket>
              <bucket>&quot;ABE&quot;</bucket>
              <bucket>&quot;CYS&quot;</bucket>
              <bucket>&quot;FMN&quot;</bucket>
              <bucket>&quot;ABI&quot;</bucket>
              <bucket>&quot;ABY&quot;</bucket>
              <bucket>&quot;ACK&quot;</bucket>
              <bucket>&quot;ACT&quot;</bucket>
              <bucket>&quot;ACV&quot;</bucket>
              <bucket>&quot;ACY&quot;</bucket>
              <bucket>&quot;ADK&quot;</bucket>
              <bucket>&quot;ADQ&quot;</bucket>
              <bucket>&quot;AEX&quot;</bucket>
              <bucket>&quot;AGS&quot;</bucket>
              <bucket>&quot;AKN&quot;</bucket>
              <bucket>&quot;ALB&quot;</bucket>
              <bucket>&quot;ALO&quot;</bucket>
              <bucket>&quot;AMA&quot;</bucket>
              <bucket>&quot;ANI&quot;</bucket>
              <bucket>&quot;APF&quot;</bucket>
              <bucket>&quot;ATL&quot;</bucket>
              <bucket>&quot;ATW&quot;</bucket>
              <bucket>&quot;AVL&quot;</bucket>
              <bucket>&quot;AVP&quot;</bucket>
              <bucket>&quot;BDL&quot;</bucket>
              <bucket>&quot;BET&quot;</bucket>
              <bucket>&quot;BFF&quot;</bucket>
              <bucket>&quot;BFI&quot;</bucket>
              <bucket>&quot;BFL&quot;</bucket>
              <bucket>&quot;BGM&quot;</bucket>
              <bucket>&quot;BGR&quot;</bucket>
              <bucket>&quot;BIL&quot;</bucket>
              <bucket>&quot;BIS&quot;</bucket>
              <bucket>&quot;BJI&quot;</bucket>
              <bucket>&quot;BLI&quot;</bucket>
              <bucket>&quot;BMI&quot;</bucket>
              <bucket>&quot;BPT&quot;</bucket>
              <bucket>&quot;BQK&quot;</bucket>
              <bucket>&quot;BQN&quot;</bucket>
              <bucket>&quot;BRO&quot;</bucket>
              <bucket>&quot;BRW&quot;</bucket>
              <bucket>&quot;BTM&quot;</bucket>
              <bucket>&quot;BTR&quot;</bucket>
              <bucket>&quot;BTV&quot;</bucket>
              <bucket>&quot;BUF&quot;</bucket>
              <bucket>&quot;BUR&quot;</bucket>
              <bucket>&quot;BWI&quot;</bucket>
              <bucket>&quot;BZN&quot;</bucket>
              <bucket>&quot;CAE&quot;</bucket>
              <bucket>&quot;CAK&quot;</bucket>
              <bucket>&quot;CCR&quot;</bucket>
              <bucket>&quot;CDC&quot;</bucket>
              <bucket>&quot;CDV&quot;</bucket>
              <bucket>&quot;CEC&quot;</bucket>
              <bucket>&quot;CHA&quot;</bucket>
              <bucket>&quot;CHO&quot;</bucket>
              <bucket>&quot;CHS&quot;</bucket>
              <bucket>&quot;CIC&quot;</bucket>
              <bucket>&quot;CKB&quot;</bucket>
              <bucket>&quot;CLD&quot;</bucket>
              <bucket>&quot;CLL&quot;</bucket>
              <bucket>&quot;CMH&quot;</bucket>
              <bucket>&quot;CMI&quot;</bucket>
              <bucket>&quot;CMX&quot;</bucket>
              <bucket>&quot;COD&quot;</bucket>
              <bucket>&quot;CPR&quot;</bucket>
              <bucket>&quot;CRP&quot;</bucket>
              <bucket>&quot;CRW&quot;</bucket>
              <bucket>&quot;CSG&quot;</bucket>
              <bucket>&quot;CWA&quot;</bucket>
              <bucket>&quot;DAB&quot;</bucket>
              <bucket>&quot;DAY&quot;</bucket>
              <bucket>&quot;DBQ&quot;</bucket>
              <bucket>&quot;DET&quot;</bucket>
              <bucket>&quot;DHN&quot;</bucket>
              <bucket>&quot;DLG&quot;</bucket>
              <bucket>&quot;DLH&quot;</bucket>
              <bucket>&quot;DRO&quot;</bucket>
              <bucket>&quot;DSM&quot;</bucket>
              <bucket>&quot;EAU&quot;</bucket>
              <bucket>&quot;EFD&quot;</bucket>
              <bucket>&quot;EGE&quot;</bucket>
              <bucket>&quot;EKO&quot;</bucket>
              <bucket>&quot;ELM&quot;</bucket>
              <bucket>&quot;ERI&quot;</bucket>
              <bucket>&quot;EUG&quot;</bucket>
              <bucket>&quot;EVV&quot;</bucket>
              <bucket>&quot;EWN&quot;</bucket>
              <bucket>&quot;EYW&quot;</bucket>
              <bucket>&quot;FAI&quot;</bucket>
              <bucket>&quot;FAR&quot;</bucket>
              <bucket>&quot;FAY&quot;</bucket>
              <bucket>&quot;FCA&quot;</bucket>
              <bucket>&quot;FLG&quot;</bucket>
              <bucket>&quot;FLO&quot;</bucket>
              <bucket>&quot;FNT&quot;</bucket>
              <bucket>&quot;FSD&quot;</bucket>
              <bucket>&quot;FSM&quot;</bucket>
              <bucket>&quot;FWA&quot;</bucket>
              <bucket>&quot;GCC&quot;</bucket>
              <bucket>&quot;GCN&quot;</bucket>
              <bucket>&quot;GEG&quot;</bucket>
              <bucket>&quot;GFK&quot;</bucket>
              <bucket>&quot;GGG&quot;</bucket>
              <bucket>&quot;GJT&quot;</bucket>
              <bucket>&quot;GLH&quot;</bucket>
              <bucket>&quot;MKC&quot;</bucket>
              <bucket>&quot;PIR&quot;</bucket>
              <bucket>&quot;KSM&quot;</bucket>
              <bucket>&quot;KTN&quot;</bucket>
              <bucket>&quot;LAW&quot;</bucket>
              <bucket>&quot;LCH&quot;</bucket>
              <bucket>&quot;LEX&quot;</bucket>
              <bucket>&quot;LFT&quot;</bucket>
              <bucket>&quot;LIH&quot;</bucket>
              <bucket>&quot;LMT&quot;</bucket>
              <bucket>&quot;LNK&quot;</bucket>
              <bucket>&quot;LNY&quot;</bucket>
              <bucket>&quot;LRD&quot;</bucket>
              <bucket>&quot;LSE&quot;</bucket>
              <bucket>&quot;LWB&quot;</bucket>
              <bucket>&quot;LWS&quot;</bucket>
              <bucket>&quot;LYH&quot;</bucket>
              <bucket>&quot;MAZ&quot;</bucket>
              <bucket>&quot;MBS&quot;</bucket>
              <bucket>&quot;MCN&quot;</bucket>
              <bucket>&quot;MDT&quot;</bucket>
              <bucket>&quot;MEI&quot;</bucket>
              <bucket>&quot;MFE&quot;</bucket>
              <bucket>&quot;MFR&quot;</bucket>
              <bucket>&quot;MGM&quot;</bucket>
              <bucket>&quot;MHT&quot;</bucket>
              <bucket>&quot;MIB&quot;</bucket>
              <bucket>&quot;MKG&quot;</bucket>
              <bucket>&quot;MKK&quot;</bucket>
              <bucket>&quot;MLB&quot;</bucket>
              <bucket>&quot;MLI&quot;</bucket>
              <bucket>&quot;MLU&quot;</bucket>
              <bucket>&quot;MOB&quot;</bucket>
              <bucket>&quot;MOD&quot;</bucket>
              <bucket>&quot;MOT&quot;</bucket>
              <bucket>&quot;MQT&quot;</bucket>
              <bucket>&quot;MRY&quot;</bucket>
              <bucket>&quot;MSN&quot;</bucket>
              <bucket>&quot;MSO&quot;</bucket>
              <bucket>&quot;MTH&quot;</bucket>
              <bucket>&quot;MTJ&quot;</bucket>
              <bucket>&quot;MYR&quot;</bucket>
              <bucket>&quot;OAJ&quot;</bucket>
              <bucket>&quot;OGD&quot;</bucket>
              <bucket>&quot;GNV&quot;</bucket>
              <bucket>&quot;GPT&quot;</bucket>
              <bucket>&quot;GRB&quot;</bucket>
              <bucket>&quot;GRK&quot;</bucket>
              <bucket>&quot;GRR&quot;</bucket>
              <bucket>&quot;GST&quot;</bucket>
              <bucket>&quot;GTF&quot;</bucket>
              <bucket>&quot;GTR&quot;</bucket>
              <bucket>&quot;GUC&quot;</bucket>
              <bucket>&quot;GUM&quot;</bucket>
              <bucket>&quot;HDN&quot;</bucket>
              <bucket>&quot;HHH&quot;</bucket>
              <bucket>&quot;HKY&quot;</bucket>
              <bucket>&quot;HLN&quot;</bucket>
              <bucket>&quot;HRL&quot;</bucket>
              <bucket>&quot;HSV&quot;</bucket>
              <bucket>&quot;HTS&quot;</bucket>
              <bucket>&quot;HVN&quot;</bucket>
              <bucket>&quot;IDA&quot;</bucket>
              <bucket>&quot;ILE&quot;</bucket>
              <bucket>&quot;ILG&quot;</bucket>
              <bucket>&quot;ILM&quot;</bucket>
              <bucket>&quot;INL&quot;</bucket>
              <bucket>&quot;IPL&quot;</bucket>
              <bucket>&quot;ISO&quot;</bucket>
              <bucket>&quot;ITH&quot;</bucket>
              <bucket>&quot;ITO&quot;</bucket>
              <bucket>&quot;IYK&quot;</bucket>
              <bucket>&quot;JAC&quot;</bucket>
              <bucket>&quot;JAN&quot;</bucket>
              <bucket>&quot;JNU&quot;</bucket>
              <bucket>&quot;KOA&quot;</bucket>
              <bucket>&quot;OGG&quot;</bucket>
              <bucket>&quot;OME&quot;</bucket>
              <bucket>&quot;OTH&quot;</bucket>
              <bucket>&quot;OTZ&quot;</bucket>
              <bucket>&quot;OXR&quot;</bucket>
              <bucket>&quot;PFN&quot;</bucket>
              <bucket>&quot;PHF&quot;</bucket>
              <bucket>&quot;PIA&quot;</bucket>
              <bucket>&quot;PIE&quot;</bucket>
              <bucket>&quot;PIH&quot;</bucket>
              <bucket>&quot;PIT&quot;</bucket>
              <bucket>&quot;PLN&quot;</bucket>
              <bucket>&quot;PMD&quot;</bucket>
              <bucket>&quot;PSC&quot;</bucket>
              <bucket>&quot;PSE&quot;</bucket>
              <bucket>&quot;PSG&quot;</bucket>
              <bucket>&quot;PUB&quot;</bucket>
              <bucket>&quot;PVD&quot;</bucket>
              <bucket>&quot;PVU&quot;</bucket>
              <bucket>&quot;RAP&quot;</bucket>
              <bucket>&quot;RDD&quot;</bucket>
              <bucket>&quot;RDM&quot;</bucket>
              <bucket>&quot;RDR&quot;</bucket>
              <bucket>&quot;RFD&quot;</bucket>
              <bucket>&quot;RHI&quot;</bucket>
              <bucket>&quot;RKS&quot;</bucket>
              <bucket>&quot;ROP&quot;</bucket>
              <bucket>&quot;ROR&quot;</bucket>
              <bucket>&quot;ROW&quot;</bucket>
              <bucket>&quot;SAV&quot;</bucket>
              <bucket>&quot;SBA&quot;</bucket>
              <bucket>&quot;SBP&quot;</bucket>
              <bucket>&quot;SCC&quot;</bucket>
              <bucket>&quot;SCE&quot;</bucket>
              <bucket>&quot;SCK&quot;</bucket>
              <bucket>&quot;SGF&quot;</bucket>
              <bucket>&quot;SGU&quot;</bucket>
              <bucket>&quot;SHV&quot;</bucket>
              <bucket>&quot;SIT&quot;</bucket>
              <bucket>&quot;SJT&quot;</bucket>
              <bucket>&quot;SLE&quot;</bucket>
              <bucket>&quot;SMX&quot;</bucket>
              <bucket>&quot;SNA&quot;</bucket>
              <bucket>&quot;SOP&quot;</bucket>
              <bucket>&quot;SPI&quot;</bucket>
              <bucket>&quot;SPN&quot;</bucket>
              <bucket>&quot;SPS&quot;</bucket>
              <bucket>&quot;STT&quot;</bucket>
              <bucket>&quot;STX&quot;</bucket>
              <bucket>&quot;SUX&quot;</bucket>
              <bucket>&quot;SWF&quot;</bucket>
              <bucket>&quot;SYR&quot;</bucket>
              <bucket>&quot;TEX&quot;</bucket>
              <bucket>&quot;TLH&quot;</bucket>
              <bucket>&quot;TOL&quot;</bucket>
              <bucket>&quot;TRI&quot;</bucket>
              <bucket>&quot;TTN&quot;</bucket>
              <bucket>&quot;TUP&quot;</bucket>
              <bucket>&quot;TVC&quot;</bucket>
              <bucket>&quot;TVL&quot;</bucket>
              <bucket>&quot;TWF&quot;</bucket>
              <bucket>&quot;TXK&quot;</bucket>
              <bucket>&quot;TYR&quot;</bucket>
              <bucket>&quot;UCA&quot;</bucket>
              <bucket>&quot;VCT&quot;</bucket>
              <bucket>&quot;VIS&quot;</bucket>
              <bucket>&quot;VLD&quot;</bucket>
              <bucket>&quot;VPS&quot;</bucket>
              <bucket>&quot;WRG&quot;</bucket>
              <bucket>&quot;WYS&quot;</bucket>
              <bucket>&quot;XNA&quot;</bucket>
              <bucket>&quot;YAK&quot;</bucket>
              <bucket>&quot;YAP&quot;</bucket>
              <bucket>&quot;YKM&quot;</bucket>
              <bucket>&quot;YUM&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='-1' />
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='1' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</column>
            <column>[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]</column>
            <column>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</column>
            <column>[csv.41677.501581817130].[none:OCity:nk]</column>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[csv.41677.501581817130].[none:OCity:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
            <format attr='break-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
            <format attr='show-null-value-warning' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' value='Index of Top 10 or Bottom 10 Airports'>
              <formatted-text>
                <run>Index of Top 10 or Bottom 10 Airports</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</rows>
        <cols>([csv.41677.501581817130].[none:Origin:nk] / [csv.41677.501581817130].[none:OCity:nk])</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Flight Cancellation Dashboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Flight Cancellation Based on Departure Point</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#ffffff' />
        </style-rule>
      </style>
      <size maxheight='900' maxwidth='1700' minheight='900' minwidth='1700' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='27' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='4443' id='26' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='95557' id='22' param='horz' type='layout-flow' w='100000' x='0' y='4443'>
              <zone h='95557' id='20' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                <zone h='95557' id='18' type='layout-basic' w='90588' x='0' y='4443'>
                  <zone h='47780' id='13' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                    <zone h='47780' id='11' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                      <zone h='47780' id='9' type='layout-basic' w='90588' x='0' y='4443'>
                        <zone h='47780' id='5' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                          <zone fixed-size='561' h='47780' id='3' is-fixed='true' type='layout-basic' w='90588' x='0' y='4443'>
                            <zone h='47780' id='1' name='Geo Map  w.o. Null' show-title='true' w='45632' x='0' y='4443'>
                            </zone>
                            <zone h='47780' id='35' name='Heat Map' show-title='true' w='44956' x='45632' y='4443'>
                            </zone>
                          </zone>
                        </zone>
                      </zone>
                    </zone>
                  </zone>
                  <zone h='47777' id='37' name='Regional Distribution' show-title='true' w='28647' x='0' y='52223'>
                  </zone>
                  <zone h='47777' id='34' name='Flights By Airport' show-title='true' w='26176' x='64412' y='52223'>
                  </zone>
                  <zone h='47777' id='39' name='Variable Importance' show-title='true' w='35765' x='28647' y='52223'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='160' h='95557' id='21' is-fixed='true' param='vert' type='layout-flow' w='9412' x='90588' y='4443'>
                <zone h='888' id='23' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[none:City:nk]' type='filter' w='9412' x='90588' y='4443'>
                </zone>
                <zone fixed-size='113' h='13444' id='31' is-fixed='true' name='AUC' show-title='true' w='9412' x='90588' y='5331'>
                  <layout-cache fixed-size-w='114' type-h='fixed' type-w='fixed' />
                </zone>
                <zone h='10666' id='28' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:2]' type='filter' w='9412' x='90588' y='18775'>
                </zone>
                <zone h='6332' id='36' name='Heat Map' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' w='9412' x='90588' y='29441'>
                </zone>
                <zone h='7332' id='40' name='Variable Importance' param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' type='filter' w='9412' x='90588' y='35773'>
                </zone>
                <zone h='56895' id='41' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[none:OCity:nk]' type='filter' w='9412' x='90588' y='43105'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='1' name='Parameters Control'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 10]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 11]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 14]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 13]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 12]' type='parameter' />
          </strip>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 6]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 5]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 15]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0090526172605051:nk:2]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0090526172605051:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_5340526195241971:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Flights By Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[csv.41677.501581817130].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:Month:qk]</field>
          <field>[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_1340527151300682:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Flights By Airport'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Variable Importance'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Table Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]' show-domain='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Parameter 1]</field>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[max:Origin:nk]</field>
          <field>[csv.41677.501581817130].[none:City:nk]</field>
          <field>[csv.41677.501581817130].[none:FlightNum:ok]</field>
          <field>[csv.41677.501581817130].[none:IsDepDelayed:nk]</field>
          <field>[csv.41677.501581817130].[none:Month:qk]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin (copy 2):nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Heat Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Geo Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Geo Map  w.o. Null'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]' type='color' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' type='size' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:City:nk]</field>
          <field>[csv.41677.501581817130].[none:OLat:qk]</field>
          <field>[csv.41677.501581817130].[none:OLong:qk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
          <field>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</field>
          <field>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):qk:1]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0840422201739178:qk:2]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_7320206215923342:nk:2]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Distribution'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[Regional Groups]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Flight Cancellation Dashboard'>
      <active id='1' />
      <zones>
        <zone name='Regional Distribution'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Variable Importance'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:2]' show-null-ctrls='true' type='filter' />
        <zone name='Heat Map' pane-specification-id='0' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' />
        <zone name='Variable Importance' param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window class='hidden-worksheet' name='AUC'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='144' name='Parameters Control' width='174'>
      iVBORw0KGgoAAAANSUhEUgAAAK4AAACQCAIAAAAeHsdkAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAABQElEQVR4nO3SMQHAMAzAsKz8OWePObSHhMCHv90dmDm3A3iF
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFcgP9eEEHcxAtUgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Flights By Month' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAInklEQVR4nO3dSXPbyBkG4G7saO6LRMqLYikRPfISexznF+SS
      VOWa35RjLvkLqcoht9zmMqlUqcY145Ez47HGY41tyVqsnaRIAiIJAjnQElwhUVHjK1Gi+T4H
      W5bxgV2lV0CD+NjgQRAwgLg0xhgyBLFp/b9c1/2/m56cnFiWdf5dB0EQBIGiKFID8n2fMSZb
      xRjr9XqqqqJqxFX8/Icfx3GEEOffte/7QRDIDih2gDzP0zQNVSOukv45AXxsSNyCwFtaelq5
      kdlz+Nb2Qblo2pmZytyN0Q8Orr4hAeJc0zWeTyderL3pdFi9rXeqB04p3+12Pc87/66DU1ID
      osyBZEtQRa8aPgdqHDeStt7sskatKkxVT+QSlo45EKoGDd86lU4xxlI6S4kZ2UHARMEkGkgQ
      ICC5wADx6jteXb+4/cNVcIEB8r78C1/668XtH64C6Yn6+fX+8GefM/PiXgCugAsMkGFbuE37
      ycMkGkgQICBBgIAEAQISBAhIECAgQYCABAECkqEdiUH1qMr8NjeStepRytb0ZCGTkGinh8kx
      9J3o3tffLE9PZWqbq65xPVmwhLp/d7GCjkRUDRre0jo/N8v8E3vh/vv9VlEYdqYkhHAcR6pd
      bcQdiYyxGD14qCJWDd+6crvS/2IxxhBgkmASDSQIEJAgQECCAAEJAgQkCBCQIEBAggABCQIE
      JAgQkCBAQIIAAQkCBCQIEJAgQEAS1T0ULH/9ld/rva965WkrkSnfWZgb6bhgTES2n+masrm9
      4SkFt+vzZtNxHLS0ompQ5ELjrUZdNYXbapm6oprC1DUssomqQZFbJ1IZxphlZGUHARMFk2gg
      QYCABAECEgQISBAgIEGAgAQBAhIECEgQICBBgIAEAQISBAhIECAgQYCAJLKdw201mGa2XdfQ
      FdUQpi7X1gMTIrKl9T9PnziOc9wV+Sk7YWd+fed2r9eT6liL0Y7Yrzr7U4rv+zEa6lBFrIo8
      AtmJJFfUVoMJTbVFkp+SHZNsST868V4IVaOvimxpHYSWVlQNwiQaSBAgIEGAgAQBAhIECEgQ
      ICBBgIAEAQISBAhIECAgQYCABAECEgQISBAgIEGAgCSyI3Hz7ereYb3u9Ep508qU52/OjHRc
      MCaiAsR5EBSy9vv9wwNLsdu75UIGi2yialBk+1mqOJNKip66mbZ1PZkXwsZz41E1ZPuo/0in
      04yx+blbMQYBkwOTaCBBgIAEAQKSMEDvXv3wj7//baPWvsTRwNgJAySSyezUtYyJYxJIOI1L
      EKytrWezyW5P+jPFMMnC442qBC9XfvL9SxwMjJ/T94E4z+WKv7ydsHScwkBCGBfDMD33uNXF
      IQgkhHOgH394trK6YWrSSzrAJAtvZVTuPXTZK0V+TRCYZOEprFarl2bKCvIDMsJJ9Nzc/E61
      KQwsZQcSwiNQp9vZ2dp4vb5xiaOBsXN6BAqCF8tf9aycIor9bzTrh55iuc2GMFVNZBOWfmlj
      hCssnESXZxda7V4pYzDGGAueLS/rzNtzrGzRtnX77mcLnueNoCOxv70v/4bmFe/c+1SrwgA1
      Wy2uaGe3MopTxVbLMTw/baoik7dt23EcqfbCfnpkewtjdyTG6H5EFb3qbBLNpvO5jYOGrvYv
      w/jivc//Z1PZJTzjrbfa3/4qr0uKqo+d/aJzznorL547bYmTFEB4pkhlC9eK2UDBZTxICAN0
      tLfT7npo5wAp4b0wNZF/cP9+IYHLdZAQHoG2Ntfr1f1qq3uJo4GxE97KePz4twfV40IqzqfR
      YGKFR6DXK9/9e2mp7uAqDCSEx5tCaaZcdxUVHYkgIZxEVw92X7952/HQkQgSwuPNfvV47hc3
      FYbLeJBwGiDOr1+7dri73Y5zDw4mV3gKc1tuIl8UBuZAICGMS/34qF5vMfmHlcIkC09h04Xi
      SbPa7CJAICG8jDdF8uHDz40P7Rz9vhzOWPChuwKf1oBhwgAJS3vy9Ps/3X7Q/+e/vvhnrlh6
      tX5ULtnJdPnR/c8oj/GW3T7GC6HqUqrCANUbzqPHj/QPn+sJflVZ/PnVS840hXPOueu68Z4b
      P7IAXfHWz0+1KgxQwPj6T9+Xbi0mLY0xPjtfmZ2vfLwpFtlE1aDwMt60U5XFu4Uk2jlAQviL
      vrO/fz1n7R6jnQMkhJfxN2emdk6sWwXzUscDYyY8hW1sbqY0b+vIvdTxwJgJT2HpbOHEbWF1
      DpASBujnH5+vrKwy9AOBjLCl9Xe//2O3F1imcanjgTETXvSrmq6iHxok4YQFJAgQkCBAQIIA
      AQkCBCQIEJAgQEAS+c5Px6mvbe0e1ZyprGGlS9dLhVEOC8ZF5HPjn3377fb2mp1daAemOO7k
      UjYe+42qQTzqBxz4/v7e9s5Bs5DSjfTUVC7tOI4Q4vy7HnFHoud5MXrwUEWsityaK8p0+cZ0
      WXYMMFkwiQYSBAhIECAgQYCABAECEgQISBAgIEGAgAQBAhIECEgQICBBgIAEAQISBAhIIts5
      2q7DNaPTaesqVzRT1/AkQxgisiNxd/PN6pu1mmsUp+2EyD+4W/F9X+pp3P12RNkHeMd44PfZ
      y8WoRRWxKrr9TDVsy2x0uKkqpmXF6E+N19J6VhujBFWjr4psaR2EllZUDcIkGkgQICBBgIAE
      AQISBAhIECAgQYCABAECEgQISBAgIEGAgAQBAhIECEgQICBBgIAksiNx+90a0+1avZFL6kaq
      WMgkRzouGBOR3UOpTOr5N0/qXno/bwm1Zi9WsMgmqgZFBmj97fqNyj1/67CUMc10SQiBx36j
      asj2Ed/n9x7+hjE2O3srxiBgcmASDSQIEJAgQECCAAEJAgQkCBCQIEBAggABCQIEJAgQkCBA
      QIIAAQkCBCQIEJAgQEAS2T20+/q7t4fdre3DcslOZmYe3FkY5bBgXEQGqJDLvXy/6ftBz2fd
      btdxHLS0omrQfwEk3V+C5cvlhAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Flights By Airport' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Variable Importance' width='191'>
      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
      lAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Table Chart' width='191'>
      iVBORw0KGgoAAAANSUhEUgAAAL8AAADACAIAAADa/CVFAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nOy9d3Bd15ngeW549+WcI3LOJJjAnJVlWbYku205
      99S4p6dmZ3tra6umtrp2Z2q7urq7uqfd3R7LlmRLVKAkihQzQIIkCCLn9AC8nHNO9924f0ht
      iZZIWyQAyfL7/Yd3gXe/i/e9c758IJZlQYUKDwT8RQtQ4Y+YivZUeHAq2lPhwaloT4UHp6I9
      FR6civZUeHAq2lPhwaloT4UHp6I9FR6civZUeHAq2lPhwaloT4UHp6I9FR6civZUeHAq2lPh
      waloT4UHp6I9FR6civZUeHAq2lPhwaloT4UHp6I9FR6civZUeHAq2lPhwaloT4UHp6I9FR6c
      ivZUeHAq2lPhwUE/+UO5XE6lUl+UKBX+6IAqUxC+krAsG4lEdDrdpt6lsnNVeHDQ+11kGRwn
      UC6GQhBFEQRJAwBglMPloCxDlQkSABjjchEY2gpJWYYgSISDIYAhaBYGDIRgyJdV+VmWpcgy
      xUAYhiEwBABLUyRB0hwuDwEsQZQZCOFiHAgAiiRhDgcGLFEuszDK5aAQADRNMgBFYQbHCRaC
      uRjGMiRJsRwMQ2C2jBMARrkYBwIsSZIwytm8j4BlKIJkORjK0iQDcTjIXTdC/vqv//pef0kn
      Z/+3n/4PUL+tSSscfvvvXrtmC7uWLg5MN7ZXTV9+t3/CujQ96spwG+p0yCbJ/gnYovell04x
      snoTtfZvl1by1qtJ5S6jePNv/EAw5djpX/16ZGaJkVnMKiEgcjfeffP66Iif1CtKK6+9e2Vq
      cl5W08TPu37+ty8Lenp4kYXfvH1+Zsmpr22S8KBrr/73abyunl38m59fimSyMpng+ruvj07N
      Okt8bX7+5TPDc3ML8poWKL7y8qunhNXbtRLOp2UoFAoikejhnoONLdz61ftDpvbO0O3XpnJV
      jXrBJy/fe+1hiaU7o4qWmtWphWMdOgCAylzfWo14fDMRx8y4n/8XP32eV3C89NL59a72ds19
      17CNILBmN7W2h312VsoBADBE6eb7r87y+Tt3G+dmyW8eULy/XDqoTJ6djnERvL2tft2LPr5L
      dsuW32dgL42uomLdiR7pLy8sdXR3wqGVNIDLhKZaERN0PsdzDFBV3fjqyHqoYOo+cnxX/cM/
      DBVeTSt3PdGeH1pz9jVpiJR/jdR9/0cHT/18MrlfzVeYJKUYUc55ojmxmMsC4F9fqN7/nNJ1
      xRaMcoNOV0miQtiQ261o6OjtbFCKuQTg1pjlCYok8aJEXyMsegmCDiXi/M1cflmWWfElOhtV
      bkdABcDC4Dv+Mbj7xDPQ6pUpd17VvOee9yYL6fEZ/4FHDsDhZUesDABgaIpmGB6TcwRjgK8Q
      QhTFFQoBmS+UN+8BfvsgNn/EYjYwQU+IAAAABkLrdhzfUwWvrHlzuRJDlXOp6Miw6/h3X6gW
      gxJeyuZKNEXkM8nhwcEYToQc80s2PyOo6bKwQabquRPbKRwvFrI4yeLFfCK6euPWCkXkZkcm
      ksRGiEsSkEDAQZFCoQgAoCmK4WJ8DKPwXCaT5/O5KAaXKV5bV7tcgAIAKIrk83gozCRCnpvz
      8c4GFYUXJfV79zdKl25dHrHaASREURSUS/EMJRZyOCiHoKi2bbtkvE383rJkPBxnzQaDy2Fn
      AZDV9D7zSPPyxI2FdfqpF769rVZ5T+1JBxZdhCjlDHCgzPSSEwCgr+vY0btDyy2iEguatjnd
      Cy/906+XM6xMyt28B/gIIrhuDVsXlwgqNLEQYQAALEuRJElQHK4IgFIumy5TDIpQZZzEyyQs
      FCBlPJ9NlAgIweTHnv3O8187Xq+TcjhcDsqhKJwiCIpBBQIULxWSyQyAOIra7u9978+O7dsm
      wTZAXlgmB7FwOl1QadQAAEwo5GUz0XgCUZrxTEhV11mnYjyhzG9/XyKRxuLxdIlVKwUSjF1a
      cXmcK/5ARtvYVaXixIK+PKzu7aiJuZx2d7x6244aMe0Mb3ZshU2vjHiK9OKqI+9aceQATRIE
      TrAIFwCSLJfC4fi97B42bLfymw88fXxfnZHvCpF1Gu7K/Oz80jK3Zs+jB/c0qNnbd+YJAIvk
      2vb2Fhl/c3euctieN/Q9cWRnc4spsu7mac0mCRQNeJOQ+tDenVB8eS1KKyzNJ/ZYblwcSuIF
      Y+M+WXHRnuBoq+sO76wZuToQZZUddaoMJerubOJlncNLzmJRvPdI6/ytUa7a2NDSY+aE+++s
      aBvbzUrRw5ugME8F4rPzIWRfX3dg1Yrp6wxI5Mot265HT7bX6mxj173AcryvQ4DB2WRKWVdv
      0hn8k/05eeu+HdvbOltNCkxeta1ZS/d/cD4jrD1++KC4uHZ9NrTz2PE9Xabxy5cS/NpjfR18
      lM0kM+qqBhn/MyzPh7V7WNK9Huo4+dS+nrZqadkRZTE65fLj+048VifPDd2eEZmbHzLew+ZT
      MZqrkAo23e75w5kafA+pPdpTLbvfLxVc737gPvGtw5KtkmqL2Zp4TyVa+NWkEi2s8GXnrrWn
      kud6SBiG+aJF+Bgcx3k83qbeorJzbRgMwxDERrj7GwHLsslkUqlUbupdKjtXhQfnvr4Sg3sc
      YbnZKOFxWJqIhoKZIilW6UQgnyJ4Zp08F/fngNSgEm9FooslY6EYX6kVYUwqkeNyoTzNU8v4
      n7o1nUmmUC63UAIqlfiTXw6WpaJ+bwZn5VqDiM3hsBjCSwK1YiPiO/eSmcnGw9EcbbQY+SgM
      AMBziVAsI5Br1SI4GAhRqNhkVKMQIPKpNInx6FQkVQIAiJUGPp2OZQmNwSzm0JFQqIyKTVoF
      XUoHQgmB0qAUwdFgkEDFRp0CT8ciqaLKYJYJPiNf8ZAweC6cItQ6BZWN46hcLrxLYe6T52LJ
      0NT/9d/+J6juaTFIPDNXPhh2omz+1uAkn5t59/2h2q6Wqy/9LCFrbDLKt0B7mIzz1bcvQWKL
      SZg4/dZNPhq76YbbLVKKIBkWQIAhKYqiKAhKXXjtDMdQUy5ScimPJEkWgmEIggDtnx64PBtG
      qNTsjFut5+O57JUzg+qeFhEEA4amWQDB0MM8CMuyNE1/8pVyxn/+8o100BaEDbVaEQTokcvv
      +JPFRWdMhtuuzQZL4bWMsMoopkbPvjESFdRICV8wsjI8mBcpZ2/dyjP4uispogODY2vuFaus
      wWIb7HflKZfdgRZD12ecgZV5SC5bmJwsprwzbqaxUf/Jz7ZUKgkEAvAwsGxwceTcrQltfXti
      +uxCwVil4MAIzDIUQVIAgu+99jDE1NCd2l3b7ZNTuR7D0MDktu/+l90m+bETADClsvdXv/7H
      v0PNe/+iq3pLMuzAteps3bYtFLDH0fKay22uqgMcZn2if3LF76NVT9eVri7m+XjM3LfPavfw
      bVOxpCy4YF0JMRxd4w+/dhgppwaGvY/85X8wIkwuEbVP9y/lJHbXOu+d14TtTzdlrtnEBx/r
      0W+szNm4n5E1PNkD/8st274OnYAOBvyYopXf09oSX+iv2XasrTBxbsmlzmaTHLEQAHVNu0ho
      96fAAR35qrDqqb3dr7/6jrMs03XvNQWvr8zZIyVuvZBUdO2QUw6YDAKOQCQ3PPaEfvLimywP
      3XArhGWZtWBye6vF6/RqAVi4cSY8wVbtfRyyXralYI6u9Z53LOdi47PBhlYLFVlZ9ecJmuL8
      NiEH87sPn2TC6WNP7BdjW6M8tNXuYCiisL6SkZsterNOKQGARTGBRMRLpdIsWza0HvrG0cYU
      JKo26E0aFQAJX0D4zIs/fP5YLwIDwLIMgmIQAABCEZaiWYXSaDDU7Hv6IOmcWfPDbQ3aDXyS
      YsK/tLQUyeIwDAMAGIpiAQAEHi0UDRrlSP8Ny57dyZkbo+40N+8dmvTwMDgeiRRpOuS0mpo7
      ufqWXlX27Pk7DJfHAvDhm+ClUiGe1jQ1TF3/YNHqUDd0WaRUIJqHEW7jrj4kvJLIb7DHx+A+
      lzdH0/TKyioFgK5t/zNP9QaXR70x2TN/9uKzhzrvpT1s0j0XkzbohYp6HTq74mpvNS/NrsXC
      3nNvn/HnyihXIuDyJGLO1ugOW3CF0mIel1tbL5ib9TEMTdM0APj02LTEUCtBWRoABOUgCAIA
      BLEsRdEA8DFuIeL3DE/MUQwL88WdJjA8YYtHfTcuXY+TLIAgCGJorsVAr3qwKpNoI7+6NEWU
      SiWMLy9lI05/SF1l4pBlEtOaNRwUhRmKSiUy9Tv6zAJI39Dava0FAxRFUgyb87rIKoscwjMF
      fs3R3VVioV6jk6f9gUAc1LZYjFIhgqAUTVMkgWA8LkplYsHhsVkGgj6svtpIWCa6NA2bGjh8
      sZYIriXofCISCcYQiQZD8hG/e3hy6Z52TyaeMLTv3tXVUmVRF0rwgSP76ahtdsVj6tzZqJfD
      EIAQjqWhTgBvhddGpmNIdc+u9npTlZHMU2oplydXaTSWGhUcTtOtjQ1ak0Ym12vkPI7IbJYC
      SiDVaap62tTWxXVjU7dBKYZg1NDYnFufnLdFanYdatYIBWqLQULTqJrNhSVV7XXah01afNLu
      4YrkRqNRqVIpQWohxDm0r4uM2JOsptHMW1pxt/QdaDXJHQuzeWnbwR1NRr1Bp5LJtCaTjFuG
      xCajAsX4IO2cs2X2Hjtca9IVw7aSum1XS51Zg85MLDb3neztakja57OS5sO7WnjF8Oicr+fw
      yWol75Nf5oe2e6hEgmjZtaupymRU8XKkUCViEjls7/799XrUavVYWjr/1OM9eGjlwkz0yJH9
      is9KNH4u/gTjPX/q2rOB/AlqTyVaWOHBqeS5NpIv1UJeKpX4fP6m3qKyc301qVRoVPiyc7+O
      HEBnJ4ZmYYVSjKEhx3yMFMtFGADAOX97esnmdLpxRKyQCramnQuwuG1phRUqBVRy2ZMkUz6c
      qxFuYo5qI2CpkH1hasUv12o+DAVnI86pmYU8JKJj6xMzSw6XuwAEVNw2u+xExWo+m5ufmnTE
      CINeCbNUyL5U4GoFUHF9fnrZnVTrVIWwbXx6keKreHRqZmLSmygrVXIOAhVjbluCUUvv8s83
      oiMHUNnI4npEppHnAusxQvQ7RaT3WXvYvHP8l6++PDDtZQFjm7g85fyoinv65tU0IquSFU+/
      cyFe2Ogg1T0gIraBsamlNR/IeG5Mrlgnrs2seT3BGEFSyYjPbnfEsoVMNOL3e7yBaC4TTxZI
      PJ9OZUtbI95nUow5L49aBYX1/hkfAwAA5eHrN2GBYM26xlfoaqoMxcBaOhe61D/PESDXrt1w
      r61kARYev7gcp73Ld15/5RVHCgTXpxYCuLDkWfP5blwcAhIwcPba8tIcIdSmVgZG1pN0OXfr
      7Kn+Wf/GPwDLOhdmxiZuuKKlkPXOyLzD5fYVSaaYjjqdrni2dM88F0vjUyPTnQcPhBZn0/vr
      77pGFZanRpLcPCru4G1RtBk4HYHubV2BiI8xCAEAVBlfmp2KMqmmA8c4cbvf4wiIGutDkw5l
      OwjZW9qrIkxzE7Icl/Ue7TZvjYSfJp+OcGRVO9uhOwOuUl+NkAqH/WScXTO17ZcodKAYxxUd
      e8zoPCIxmwwjgxPyp38qst0aSaM7+QxPrm80agEA0Yi/kKCXiuondyvLGs74nQVjy+GO3R1c
      mJ4MzhAY618ao6QWLrbxRgjL0u54tret0e/xGAGwzY2jIRqp2wevXivwNRno3h05eCY0Ou0T
      ikHWv7jkTN91DZMfeur5H//5dxjnjDeW23ChPwtyYWHG7XKFp8eWUgwAAOJw23cf3tOuDnoj
      mVg8ncunsgUIolp3PtpeLYZVbcLSmjdSqKvaXLPxXqTccxcvXlyPFD9yST5M3lPlFIUeObx/
      ZbA/CYDHsV7d3IYq2h7pFY7cGGeFUgQAfdvhF/dL+8d8KqOehwAAQDmZETXv7lOFzl8dmUtI
      vveT76RWbycyedvMcFre0yHJnL+9UirE/c61WHaDG+uY7NrsQsDlcY+Pz+EAmDr2Hj/Rk1wf
      i6Q1J555/j8+f+xeaw8bWZ3EGw8d291XQ6em5qzbAYj7bEvilEihZ+iy32VbLhGoVCPhb4Xp
      QSdXcoLeo3va2HrhyLiV4upYinAsz+JEQlSnWrEmWms00RRFAfChNChXpOamVgr1OunGl7z8
      IQhUVd3daowtOFxTt6ap6tZDIB1NY8YmC7u+usYIZDyQDwfKzdtlgIw7PJTRJMG56uji8FQB
      o/15U5f0t0u6qbHZ63St50q6enUyHV+1rgGBzDNzbS2Kdreriqj2+Re+mbKN+MN68cb2RbG0
      a2qm4cQzu8yIavjKrJeO4PMzBCkyt0PE5PTt66HsPT12NuFdT6Lqer2ilAnYwrSBX3AEUgyA
      pLoaYdkfTBEAQEpTQ71ZhWz+3kVlgt6ytEYjZKmcZ91bFiplbCqSIViOuLFGH3Isl2AxxhMK
      2RymawEZFyRUeYbO55tPHmzY3GDr74GlY551Z5xq6WiFsgGcp+fhoXVXRG5prNVxA86EqtrI
      hdmox+qJEdVNLXIUX1tdLyKK7o46DkSGHXZU36LgFF3rawlK2NlWh8c8a56orq4VSTm98SIA
      wNjUU6Xkk9mwt8Cv00s/vvPDe+wsFXV7OMY6OQaKcY8zUmRokqSgutZWKONZ9yRUVU1fzXgP
      kfEMTkYPHtzO5/yJhiQq/VwVHpyt0Z67dkqGYX6ntrLCHy8Mw5Akuam3uGvtIQgim81u6v2+
      2lAU9UWL8DGVPNcfE5UKjQoVPgf3z3PFL7zVj+hNch4yc/3dsdWsqcYQmLt1dWxdY6oC8eVz
      w1aD0bxFfg1bmLp1h5Yapb+vCDAVWl91Z72edSIZjVBclWRzV++PBfxURw5gSefs0NWRdU11
      lZDzodiMe2UqzkgVIozIRUcWXVUGTcQ+eXVwClWYREzyVv+VeT/eUKuHAcj6FuaCrE5Ejd64
      Mucv15g1Wd/8B1duI8pqERO7cfnyepI1GzQIRLvnJjJc1e/MwdmAjhwAyKT79rRbbdak7FO+
      slwtvit+dh/tYRLz/T975yourt1Wr771zs+vLgUamjvHL/x8yJrp6e2xDZ4+e2tF09hRrXrY
      VNwfQtE7f2nezTC8OiU0v+r2u+35MmFbXWf4Mk4hNDY1G05TIjg7v+LIlBGxgDc9PcEpZRMc
      lYKOTs6vA6FcJtjcwOantScXtF6YjR9tYK7ZQHutCgbANTv47qUbkqoeIzd7/dL719aLx7ar
      Lr4/3rqzeWJsiQqvZNXbWum5OxlTDT9x9b33vJBFnJ5zsRZFeCYplk0PzGw/0T16eSofW8aN
      e/XJaRdQsb65d969KunYUyW7awzXRvRzMSsTo/aAkyOrI113pjx4MZMQKTR41D63ZKMwyT2X
      DYYsjI0tHX7qyfz6XLTMAsA3yPmr69NZSibDOOVcfNpOPnWsbmnOtjWGos0d3b2jJxcL4mnP
      2Us3i3T6nXeuldLuwfGlfL6EcsiZG5eW56f6ZwLltHNm+aOUIVGIf3DllggrDZy/mdpyb7JU
      zIgkGoNGnfIHP8zWqut6e+oUAACYK+ns3a0RsqCUKUNqlU6XzwVRDgfPpws4EfK6lxZXTI2N
      AIBivizTqtUKKOCM5LhyrV4H4SGS4ZSz8Tye9Ydy6uq2rkb9Zqz/LEsEM+Xt7e0hvxsAEIsk
      2Jzz2uj0tSu3yiwzNbN4z9h2KROaWfTxaFHQE1pxJgCAzfVG68CAvms7zx5Iu6etkSSyRrmT
      cd8TfTUb2s7yWc9RXpgcTvBc+UDUUv2EUGhoaG922oqNNQaPrRhxhhwZmqZxigZyXY1eEfX9
      e4EkSaQpjqa9u802eSWNA7lwc8X8LRHr7cvjDqPFQDMwy8IIhn24b4kkUg4MAQAQruCjJA8M
      A5ZiGJbDwZp2HobX7XgcBjnfjZV1EZdwkXh1E8TQNMsCjMuFaIpmWQRBW3Yfj7nW4mlMKBSI
      NqsxiqWTqxNTK56QP1SUq7qBpqalvTNvH1ihccXh3j0KDnvPPJd/bhja9cJ/ffHw2vVXzkws
      1AKgNjSmlmYa25qitvWx0dUT3/vPz+5SnP2Xn00vemr21GyG+L+FDE9Ttc//xde76fDkW+9N
      kqzhk8+YCERYmRFGYYL43fAGV6CVgeHz7w/k1NXarVIdAIC2Zf/3W/aTudDZD/rfuV5u3vE1
      IuRICyz6T+fdBEaL/Nbg5QGlsSvmWrZ5EuU0fey5J+ulcGl98A2nrqOxcGVo2FvmHP92rSy6
      cvmdi4hpeyk0b/UV6IJgf/2meVUstTqxcOgn/8d+C2IdeOOmrZAq3ekPMcrmg4jt+sCZt9OQ
      8p55rmImUYKFChGfKmcTeZbHlhChlCjkBFJpLpVmWUgoV4q4cDGdwBGRQry5c2IYPJehuTIh
      BphyOpEhYZ5cxstncZEAzRMsH5QTOYrPQzgITEB8MUaVCJihyxgCsxweShXj2ZJYrpJust3z
      GR47yxSzyVSRVWmUUDlPoSIBBheyScCVCLkoTZbTeVwpl5YL6WQWF8tVAoRKJFMMKlQrJTAA
      TDmfIVEpH0knEwQs0CjEdCkbSxUkSg0foZLxJOBJlDIhDNh8Jg0LpALsY39iAzx2lilkMohY
      zkMAWcykCyTLMjQD5CoVVM4mMyW+VFGJ92wYlXhPhQqfg7vsHoqicBz/okT5Y4dl2c3OK30u
      KIoqFoubeovftZorG9nDwOF8McVonwkMw5stz13ag6KoWPxlPTikwueBZdlCobDZn2bF7qnw
      4Nwvz8Xi3v/196/DVfV6CXdx8K1V3GAU5d98+YymtbnsnTn19rl5e9RYUyPEtuCAJcBSyatn
      L9GyKpX4MxzvjH9xwpEuOaxlddVnnTa01TBU6c7F0wOTdqnOohBiNJ4avnp+4NZoFlEpObkr
      596ZcmTNZuXanSvn+4dLQoMcinxw+r1pW1xnVE5ffu/q8HiQkNTww7946Z05R0BlqBJCxWtX
      L6PyKhETPXv69PR6WGnQzl49fW18haMwaaWfkcvbkBOWCr6ls4OL+oaq6Gz/alFjUtyVDLlP
      HTUTmh2Z9awSE/Zu0/ZUxB0RlBmactmdJapsvX0Lrj2xXZQtUyQAW/Fx5dyrgTID7M4mofzm
      Ynrbdv3aYsCihu6MLYnrd/AclwdDuse2NcBB6zWXL5PKdh58vF7z6ZmYWwQZX5yP6460lacX
      HHXHOqlyWdnc94MjzC9/OYA2SgnTXktodNkqmbdmnj3R/PbtZUVjomjaqwvcWnHpl2PgJ3/+
      Ey4A0ekzgq5Hv3uoFpD47Mjw2Nyyqfvg2vgt5b5v7Eej+UJS0XDoUGl+fMnVYZFvymOwrNXq
      oMtppycjSAZnlgZ8C4K9x49DgcmhOX/9jkP3znOVs7dHrE9/91u0c8b7uyPNOB19e5KTZ6ci
      NA/ZioUHALDqTuzd01uOBnK5yNSsvUBkl1dsCxMjBUScdDvEpmpjjTmzuuDxOec85e11gutD
      i19gpRabzcBqjUQqSMRiAACuVNdaq4s6HermnTBbUijkEhEZzqI18vK7V+brmkxipbG4Ougk
      5RqpwCImX/vnf3qjfzrDCijX0L/+7OXlWLl73yMNag5gyr5IZnX4zDsXh4uIullHji0G+ZsW
      qmWYYijD7Nm23eexAQBwSNZdw165du3y1fm23m0Rj+Oe2pOLu5a9advcTCzmXlwPcjgcvFRi
      GIoRiEQwQGR1f/bDHwl8g9cWg5sk+l3Q2aXpiYHLV+wrEzNBEgMMRZQJGjT09JmFpM8VKMMw
      DH90viJXrlSr5Fya/gK9R4jHZ/P5MkGJxGIAAMuQ/tWZhYjo+ME2KRcrFksEgcG4PwDMf/6D
      E8HJ4anJ+eYTL+4ylla9xP5Hv/m9F46m19ZQy45vfefFvmpk3RVFEAQCAECIkMM0739unwVd
      tDkysPap43u81uXNibKwZd/M5JLt8rUbixPzcRKIlRq5SsYWkhQjUmoM2zsa753nWpgU7nr2
      L7+133H71BvT1r88smfs7AevWFlVS6+YB5ZvXbmynINpybFPdIFsHmX/LGh94T8+2UbFZ9+6
      6BLi6+fej+FAlQja19xBwFfJhJLM3HqCBnIAAPii9quPQXUtytRvzt3g9T3ytZWZOaGEePPN
      C2KTOVUq7m1sCV4560DVX3uqfXbw8iuvrEqaD3bpk5euvs7C3L4j0M1zb4QzBWXbYdYz+er7
      XppCj/bqAQAAggDE6zrQ+/r5X1Msdugx/tV3Xk0RwNx1eFMWH5ZYmV4/+ZP/utcErw68fnEx
      lcGvn7axDUe/gVgvvP2rX2Dm7kqm4qtJZQJLhS87Fe2p8OD8bkdOLrc1Uw0qbDr5fP7h5/fc
      n0qmYsNgWfbLU6EBAIBhGMM2t6Tp7lFQm3+/rzAMw3x5XBCWZbcgS1qxeyo8OPfLczFZ6//9
      V/8Aajsskvw//j//qmzvFrOxn/3tL8sg8Jtfnltbn7017a9rbtiSPFf55ru/vnp7cmJyQVzd
      ohL+vkE1NDFy5mzBVK3ibl3S65MdOQyRvvzW64OTK5jKrJXyAWBL6cC5l1+nanu4qaVfv/zm
      0mpIapFPnn5zYG4xXhJYDOLg4rX3BkONTfL+N349NLsYJsQNRnk5aT916rzUaB6/ePrGyExJ
      oLWoxaXoyhunBpR1xtvvvnFzYr7M15vVn2HfbEQ/F5tenzh1ccLY1BgeOzOXN9So7wot3ftj
      YCnn5FhBAM9NW/c17K1VpmcccblwIS42yxFGXN/3kz/r+Zf/7x/8ySMa0eYkWe4ibXOTh174
      hoROA6Q0evHscpTYcWyfb2C4qLT0toiGhqchYfWBdv6NuTAgiK6+jjtDt0yGNgj23F7yN+48
      KUuOLAWZAit4+ulHNKJN353J2KofaT22ozS96u60yAEoOVfssUy2hgG5SFBQu/Ox/e0iKDOI
      8098/RGtREalvW5XJFE0lEt5b4n79WeeEEukDFWemZnPFwsMzO3ce8LoGreGkmyjanZhOpsm
      GYjTfeAxix7lmwIAACAASURBVGfCFoqDlk2J67Asu+oO6xSs2xuXEqXlOxcDs9jOY49C7uFR
      a8zcte+eOxeNZ0cmnE9/5xtIYNGTA+09HZ7ZyfGptdbenXwOFLWOnDp1KiOs08ketlvxD0N7
      8tGOpTtXLl0fDdvnprO6rz++nynEnYF07949Spmuo6Uq5Z7xeiMJyLi7RbJmw2vq6uvUpetL
      2W/82ZP22xeW1ty82t21ZMiR3Aqnki2VYKmUz8cy6Q9HhQradvZaFEIIAL5cp+VmPjh9atpH
      tLVqrTfPv3dpgpXV7u9tQCAIoLztjfqJa+ffvTLpW58oyltNMh7CERnkSCBGQEzZvzSMa7pN
      Mj7EEetkbDCJM9BmJfRYJhfPIT0d7UGfEwCAKuqP7tSM3bk5MhU58MhJMYTfU3syoZXVOGkd
      nchmg9NLnuqWDso51L/C9HZaYABUDb1f/+b3/uo/fUsv5t7rHTaScjLFah/52nOPtgtG5t0s
      gnC4fCEXxTAOB6HGz58NQDIpHwMA8IVivkjA+dB4ZRgWRhAYRWCWhVGxUMDn8yGwFYYtJBKx
      qWQhj8sVit+5hPCl3XuO7KgR+qI5fW3nycf2kwFX7rcTB2FYV9f1yPGdRNjp8qfd88Nzq+vT
      iwuuGHRwd2vMbnMlsq7p4Xn76tzcrCeN7dneGnW5Nnhe4UewBdv4gjtwdfC2a27BjwMOhiEo
      AhiKBQjKwUSCe066Y2Nef+Px51882R2Yv3xuNYDu3dndoFvEemrEUIgvUatkD98j/TmA0fDK
      0MQIgwnlJ594zDPS//rbq+17dypUCg7K0Zs1w2tehVqFYDwFj4dxRVKpUFItDSV5u83g1K9P
      mzsOyXLTEBcRSGUQZ0OH+90DjqqlDntvaJHfd2Tb6ty8rqVNhsBihYKHArqQutE/VECkhw9r
      vLNDg6FM9d7jKj4AHIFSDqEs45m7eT1aqNt1dH931SFQuPXB1Zpms/3O5cEU1b730P4OywGQ
      uvHuaGNrzfK187fyoHPXoU35BrOkx1d88vs/7lBCvqkrg9YUWV68GgedR56AXTf7z5xRNO2o
      5Lk2jEpHToUKn4OK9lR4cConLG0YLMsyzAafK/sw4DjO421uh3jF7vlqUqnvqfBl596nnDBU
      qViiWQDBCJfHA1S5TFAAgjhcPoaweJni8nlbpnoMVSZZDhcFZRyHODwOzOBlAka5GOeuQfUM
      RZAswuXcL3PC0ARBQbx7ZDBoiiAZmIc9rFfPsixZLpEMxOPxPiq3BixDEgRAEbqMkzQAgMPl
      wQxJUCz24b+XpAGAfvsij89DIKZYKDEwwufxAE3gJMPj8VBA50tlAME8Hh9FIIooMzCKoZuV
      LGJpEicZLhdjKYKGOBh612d+zzxXPmb9m//+T8lcdvzGZQetyY6/euqmM+Jeur0YqpMTv/zF
      hdoDvVtWzFFc7z81D7VriFO//Ecf2qoh1t68OoyKjTqF8JPaE599/4xT0l11v1Lr0NrA29di
      vZ2Wz7zqn774/kx+W7PxIQVmytHTL782Pr9CSc0WlQgAwFL46Hs/649qVbn5G2Nz1y98EGUw
      6/iQdWFq3k+iOdediblrl86lEPFM/9mVdZuvJDSx1r976WoiX5DLJUMfvDE6OZdENabC1P94
      bSifTcv1VRIMv/TSvy2z2lbT78YkwQb1c0UXb718dsjU3hm6/fpUvqpRf1eQ775fMp60oaEh
      UAilCBIA0Lr38Wd7RK//z3+Yj6geTqbPjbC+Szg6E4xZFA09tNsaZAg1TNpDawvvnSIVfFrW
      9Nx24fsDcxwqBhqqz7x8OVKm6/c8ZSrN3Z7zocrGfY3UtTu+hl2Hj/fWffymTHn59qVbKyF5
      1ba99cjVgQlGoO+qomk8dfXcBWODYeb2SJbkHX3u2y2azx0XpcKrGdWux9vyN9dce5u0ADAR
      x3woCyAVVNd7sqrJ/d5lxbG+nVx4F5f2vHbKan7s6daWtfev67vNoN/V/MMnLb96c265VJLV
      tXS1NgrReJw0P/uI/u3xVbPMY6xra22pUolR58xQHBZ+huJsECzDWL2JriaNy+FXA7AweNo/
      CnUe/zq0dnnaXVQ27fo9mw8EQZiIGwtEPvwRRlABRmYLW+5ZoHqFIu92uNRVO3i8ZCiS1Kil
      xXK5QCEHjj9WTnlXJuZMfScPdpgBQ2RyZYlaL8HwpWXPgaef16TW1qI5oGo6sr32rvcsRMdW
      i1//wQ/hyPSd23eqDz3/taPbBBzGOdVfUnfpBCCPM1qjDn0gp4IlSYjPR1GkVCwCAMiM/858
      qKZOT5SKJE15p8c12/bJhFwuTM6MrjYd2iXlkOvji+ad203aaj3qe3twmigVxXUHDrcqV4ev
      jK4HEJiHoihVLMo7j++tF1rvXBmZmxm15qq0YrxQ3KREF0vGgjHaoNW67HYGAFntjmcebbNO
      3lyygae/9e2dDdr7ao9A1dOzrbPFlI5/5MZTRC5cFNdqtr6CDNaoZD5n3FStU/DheI6vV/EB
      ACgH5XK4KIogHIgoETheZhmk5cCxVlV5YnydZmmCIHCS4aCAw8UQ6O5OHRhGaKJMlEkSYBxO
      uUxkYuFMianu3l9wTueBeP+Ro8LU8owr+SDiyhQgFkmnCkq1GgBA0YhMxK6te4I+Vz6TmPJi
      PXUiFs9Ojo6gNbt3NeqgcnEpDbdrBQwLmToPPL2jgas3INmksq7DrOQUChhJxTLptEilKoXT
      uqa2KgWaiuf4Qtbucntsns05AJFNrYz6Cchq95Q8VkcO0ARB4GWWwwOAIPCiPxi5p93DUOW0
      yzo+t+CIgWOPHJPCpdWFmcVVV8v+xztN4kjYPj85O7vsUZosmz3J9kP4oJTCjN31OjEo5CQ1
      TSq0hIqlKGauqyqXy7t3b3POjCZoga6ujR+dm/Xiuw4e7aqVTAwN81r2bjeLKI6i1qgAAJBE
      3jE/PTk/500Ld29X3bx0w7jtxL5dre6xfh8lb7KoEGlVp47JwZLI2lSA0R3u65bwPrcRDfOU
      UHJ+Pozu7+sOrFr5xtrWlrY6LR/TtjapsTgNms36bMwxOjzr8dpcYdxg0hIUUWUyoQiIrI0P
      LmcPHj9kEpEDH3yQEdUfP7hLzUaGVtJ7D/YZJeVL71/MiBpPHNvf095qkAlU9c3Vys+wbx7W
      7mFJjy3ceeLJvu7WahnpigMuk3b58f0nHqtTFIaGZ6VVrZV4z1eTSrynwpedivZUeHAqea6N
      pJLnqvCAVOp7KlT4HNzTF6WIgt/tKVIA5vD0JrOUC6JBfyKHc8Uqs04c8/uLqKTWqM6E3eE8
      2tBg3uR6T9xldZZYCOWKq4zSeJbWaWSfSu3QqVAAlluk912tyVI2SyBK6eYeO8CyTCriS+KI
      0aDnYwhg6XQ0FMngOkuNCCHCfj+OSiw6eSYeSmRJldEsxciANwCEKqNWgUAgGQ3z5Go+TPrd
      PoYvM2iV+Zg/UQA6o5ZIRWLZEgCIQmeA8uFEnhQpjSb1ZiWNaDwbSpa1ehWZieKoQiH6w05Y
      KiRs//xv7+qMWudE/2xWpswtnB9ax7js3NA1UqK69ZufnRqPn9hXc/5f/v4XA56Tj+/d3A0W
      +H/xt2/xdGrP7GBWYGYpVi7GKJIiKRqBYZLACZJm2NLY6ZfDyh06AYMgMEXgZYJiIZihKIoi
      SYpmaYqkmeDCjWureEe9tozjFANgiCkTJEmSAEZgGHqYyT+f7OeiS/73370Rj/rSiKpaK6Gy
      wf6hKTLlmglw5OW1q5OeyOp8EUNXl1bpQnBsKYlkl++sZtK+dSA3IAnrz391TtvWxThvXZ5L
      hNZnaaFgaXwuGXU4czwNhkcSiYXRYaBtmL/2DslV8sRytfQzcikbccISG1wcPT80qalvS858
      MJ/Xm+UojCAsTZbLBIDg+y4ZFJ5IJNIFUoCht64Od3z7f99bJQeHjoJScBHDJMng/KrDSQrV
      W3J6CEPiyUS8RHDkTOTmVDY4OrdcNrO5+KGT+2eu3eTyQEDU2MswszfPzmfjJ55/PjV7w+oO
      oDW9au9UUKHK2kKaeksomqzDsus4vqoM3JwPA8Dd16E4PeStFpdFbY89f7B5owZH0WFnSdt1
      uDk3aPWCDiMqNT3+iGjswpuwGOMKRDDho1GB2tTY19VD59Z979sioWj9tm/LPWfW1oOYWV6v
      x1gAeCIJXfLSXJFcVdX7pOLM++cxDs/YUCeAJyLNh7abCpMhCjMRXN5mRWtZllkPJre3Vnmc
      Ph0AizfPRacZ8+7HIOsVZxZB1M33tXtE2j17+rZ3mVfnrRRFIwgIzA/83f/73166ugJhgvZm
      +dWLN2VVDZItGdXFk2l7d/XtqJMsrQcYAACCtfU9sqtG4l6ZZ2v2PXVsp5gHQzDcc+TZbXWC
      dKaAYgI+xiZSOQCY1r6v72oW1Gx/1CIFapOlrsZoX4sefOaFAzXMvCOhMHc++sQePBzfQPeB
      ZVkAwxAAFP1RDgrBhO0HDhLO2dU1p7ppe42c8odzRDZye9jRe2L/7v0HwqPvLYUImMurr6tG
      IQAA4VlzV/fsqxKR/mgG8GR9vR0Rp6MIwKrD39JSw+WZv/fTH3eb0Cv9tzdpQj1T8jo8WYIg
      VpatJAD69n3PPNkbWhn1xeVPf/vFbxztua/2QBCKolyMw8Gwzq66hdF5SNdSrUAIkgEAqW1t
      Djmjlhrt5kj+aVlgBEVRGNAMCwCAAEAQBEEQjkRCJCKhcLRcpgEAKMpBYJgohybnwxaLgcMy
      AMAcFEVRGEUQGIIhGKJISiIAoUAwGMflUgGMIDCCbKz7gCi1aMzrD6TUOm25hJeSvuGJRZIk
      yzRgGQrAKArT+WTo5tCEtLZNJ0SziUT9nhMqAd+kl/37e7AMRcEIigImk3ANDa8QFEnRLAQK
      iRSlkgmZXHBuNchCAIaRzTmei4kszWBVLQKJwkCH1uJ0NhYK+qKoVM9FcyG3Y2hs/j597BAH
      T1od7hQlP3HiQFtXF78YnF+28U3dx/d2iPhCU3tXjUbb2VovEctqajfbagbFRNTl8+R4VScP
      dPL5YqNWqdCaFEKOpqbDgERX1t05vmlPW7Vcb5HxIIWmRo4kcZ6xqtpo1qlURpMEQ6Qqg1SA
      GmtqmTzZe6g3uLyIGHv7Oow8kcKokfK4Eq1G+jCGzyftHhhTSKBIAJfu2tYY83n5WgOW809Z
      o7tPnGxrsGRcS3lJ8/Y6cSQQjsVCiTxTVVflW5ji12zvbjAgEIAgSK2vqq6vDi5P0uqWfds7
      oKxzKUjuO9SnEtA0JdOZFCgmKketa2Fm78E+xWelGh/a7qGSKap5R2+D2WhQ8Qu0SC0G6SK3
      b9++ej1nzea3tHT80cd7Smlv/4XrcUa8/+SJRq3kC5TkTzDe80evPV8e/gS1pxItrPDgVPJc
      X01Ylt2Q89jvT2Xn+mpSqe+p8GXnnh47UUpODd9esTlc/ihfpsr5FiOkRMotz4wvwhxibmqW
      4CllcH58fDJO8nSKzZ3sCkBuvP/WisPhi+TUMmTNm1EqxZ9W/FLM4chwVJ8eKYSnFpb9Ep1y
      689eYmnCZl3D5AouAgPAelcmphYcJCaRc0oz4+OOKK7TK6O2mckFByrRSAQcQOFrc1ZYyE6P
      jq2u2x2RvE7OX5ubtMdIvVqOQEzEsZhGNHw2szA5ao+WtWppwr08NmNFZVop/67n24iOHEBl
      w/NrIblGkfOvRUiRTHBXZOae2lNMOV9+587Ro/syy4NDYS7HPWADzY3K4q9/flqug0+/8mac
      W22B3C/94vWYoG5vm/khpfx9hE6/OtS+vy9vveZHLCIM4dLZSDSTLxfz6WQ4XmCJdCRV4sJk
      jkbIdCqejOIMh4/SAZ83nclS+djZ82MigwiwPD5Ch3yeUCzL43MS8WQmGc6W6EwyWmQ4Ih72
      UImuT0OVrJODL5++07l3hxRDAREZmwjp9dyr16e4Jed6QaEpWVcycMKTkMlKo7PRjpaquH3k
      lz8faHn8oIrHx8phqw9IScdskKGc84ylmQnMnXrlFbT5JNd9YziAMI6pgkjh9YZNkuLgdKq1
      3fJJ9dkA7WFZ+9TwyMKi2NCSX7k8FeHxAc4VSshsxOuP0Og9pz8BAADIBgYGBrKRpPmQBOTB
      /PV3krNMoAgAAJhMkwjYnBAu02xRb1cx4bs9OECWkSe6Yv1T2Xpy3snZrifnfJCZF3Fw69sJ
      n7uxXuFidenpaVNPXSDIHm3h3HGXZVkrW3MAx6Me2/yQa+X5p7e5nE7nypxh+7Hl2wM13U1L
      E+6mNl0gJ/1P330E2tgTUhhWZGip09s/+hHTnXxKW4o5xkRhspCV6LTqkmfci//keNvlc+9x
      1fvpXGBmNWExa2Gu0KClV0cLB06ezI+9q6nrM3Jd696s3qBuqzECAIQqLTE2HOZqtustO+q0
      /a//nG9+HGU3+IAXlqVd8Wxve5Pf4zYBYF+Y4kbpxeo90OogLtZlWNd97R5V049+9ONvPtY5
      fWcaANB19Js/ePFZowAAAARik5byX7WnmsybG1H4LRJTywvf+8nzu1W3p100ADDCaezp1WGi
      2p7e3Q0iU8fJFiNcKFEAAL5Y09t3TIolXe5Q084DfV01CAQEIkvf8aNyNlYs5CPRWKGQzpVo
      DqTqPXG4Xsvv2raPCzIb6D8kXbPnz59fTbBGrfKTlSTFuPfO1PqBE8d7jzzCCcwtxctCBEXF
      usef+nrKPj5246ojkoonPdYFbzLiS0nM9VIU/PtRwxDEUen1fBQCADiW5+oPPrdLX1xwxFCu
      9NEXv8+uDwcy9IY9AAAAACa7Ojvvszsd4+PzOACm9r6jx7qTtoloRnPsqW/+h+eO3XftKSUX
      FxcTnqTOVAeA55NXYK6wrRryO5VqedK3sSLfg3Iusbq8UPZlNUpdMfsH/YlOq1xcnMlnAoz+
      4401G/FGiphOKaE28/RrkaZ2xw69UMYF4KMzrYupcBlAV85ckDVtx1Nxf9hLS9RQONXSJbz0
      /kWlmguLNF0H9zYXUldfL5mr1Rn7ukRRDwDQGHWLS3PJLNKzSwT+feiiRCq3e9dKGUqgTV26
      sKBRcUixXsTdUB+IpZ2TM82PPrfbguiGLs546Cg+O4mTYksnRIxP3uoPZ+F7euwknl1ftuYp
      AHP4VXUNcNaLCyx6Kbtu9WgMsmicMCqhcJ6nxHIJRt74WX3UG0pxeXwxDwCHL2+tUweShAjk
      IFkVkvYTEo2gEC5LauCMmwJIGRHQ+aLOYoiF/CqpYHlpaX1uQtH3nUYxMNVro66gXCXxOFyY
      SMoTSchc0dBoTLj8Mq0uFo9Xm03QBhs+gKVJj8ujqa5h0iEcYB6nm2JZiKvoatE6V+0UX9PS
      YEz51jzRkqGuSS8TQCwZcAbk9dV0IoRz5GoJjyGLTtt6kaNqrTOiMBNz21lVgwLNO9ZtJUzZ
      Um8qhN32YNrY0GaQf3yS5gZ47CwV83o5+loZBooJnztaYGiKpKDa5hYo67V7k8qq+q9yvCfh
      WbwzvQbJa47v7+Ghf1qxia2J93yVtedPma3RnrvsHoZhKOoLPAu2wkayBVnbyvlcG8Yn63u+
      DBSLxUqe64+GSoVGhQqfg3tmKvBc6PK7p4cnZxfXPGKtOblyc9LHmtVg4PwNRU01h8hdP3ua
      1LSohFtwvBIAIHnxzLDKYuFA8fERt8ak+V0XKh+6cWddXWP4ZIVmcHXOmUi7nMFE0A6JtKLP
      P0jlc/GZOxdL4dNjU3yNjv+RxIxreSLOyKQgde3SpQVPobrOmHHPXroylMOUGjR7+eKFsalZ
      obkrNnf+0o2JUIGj5OZvXLo8585aqo2l0MqFD/ozqErFx4evXJj1lSwmHYZAWe/idIA2393V
      tSEVGmTCfWvKpbFoU7ZJLy5XS/6wfq5Sxvv2oPM///QHHM/ti04giY2+fWnG0FRz+9xA074+
      ynP716cuxThV21oMm1OT/TtETv/9K3FlU5MBv9nvtFTzF6amHdGiRs5dm5tedsVVQuL8xXES
      KRAsLxf0wmJFymXLAg4KFebmfcWkS6yry3gWF+xRiVrFv+9YzAfmM7SHyE0PD5wZWOjq65Vi
      KADAOXP9vcu3JFVd2fmBtH5XN2a76SV8C7YdJ45lIwEk73Ux1S88fVzBS48OzvU+/Z3tdeqo
      x65o2S0ND00nue55+84nniRCqynPqgNuUIcnE4o6PVa89PZrdqhqZ8NdHQob0c/FLE+MOkMu
      VFpHuu9MeYr5ZFyk0pYitun5dZIrue/XMb7+yiuv5GJhza59IAoUIvba9TGSBYApLk5be59+
      1r04Gcl2mqVbkbqWVDVKs+v2iAkAQOAlBEUW+q9xsY7ZWb9JQs9zmkimyOdD1y/eatDTcVju
      n54QcdGC/KM0XNw+Pr0SM4lL5wvId090bdGGjfDqOvY0rAR/+4K2YWePYw0AiC/kl5KxBCgm
      AgvFPFm8ekFk6VFDVNY59SvP8rETu/MkefPcq7qGvuO7ehGmOEaKTEJyspQeOf8219izzWAo
      3RxxcBTHhPDa7KSmsTO9CUYIyxKhTHl7e4fL764GIBbLNIjj10Yo4FrQtXXMzi39/jzXc0/0
      LE7MAwBa+o5g3jl3EZTj3kmry213x3yrVn98w4X+bBB+S1uddXGRBSDmXVvzhGmS5msbumok
      gWiGoWi+QN/Q3iJBSpbq2oBzhka1CuHH+1gxHi4gXIWpsdkg24I5FxHr7VdffXXGj0tEAvgT
      a7NQLOHAEABQ3Y7D9TIWB6iAz+Og8sOPnQgvj8vbjvzwR99/tBkatFLP/vCH3/3Gk575m5l8
      ZnFsjK3d3akXQozoyHMvpNduTUxM1x94dreJmJiYuTk2u7y8bFucCaQ2dgIdSyesE9PWW8N3
      xsfm8yxQVze1tFXjEXuhLG/t2fm1Y7vvu/ZkfJcvX8qEnPVte0HBy1fVP/tY7/xvnK6VcVD3
      1P/54+Prg78+P7Z4qE2/NXMMJfr6DufoOwDUpeJFUoBxyETAF4uVlQI0T3y8ZahNlsmhQf2x
      n/IC13/7oqyqQRZejQVKfFH1FhyxpG3Z//2W/QAAGv8oApIO2oqCKoPsw38VG7UvWD0JplDq
      ffyZ2O0Pbl8fAgpLfOn2DV+mFEu17WPOn3kPwyihrs02/MFMGK0zkk55T5eWvXHxAilpaKhB
      ZmZv+fBy+9Htzz9+JLc2+I5Xa5TzN/IZWGp1YuHQj/9qvwWxDrxx01ZI4sP9AUbVdghZH7z6
      3ls5VHNPj52hyol4gmQAgFGpXAGVMxRHKkKJaKIo5EMkLFSIeSSezxYZmUKy+ZYzmUoUxHIZ
      TBZSJVaI0eksjmEYXyQsZ9NFClIqxMUCIZYJCpmCSCIqZjIcsRwq5wkAMxQLQxTGE5bzqQIJ
      K5QK7uZkLT7TY2cZJpvJCKQytpynESEfg4u5FMDEfJROJtMMIlDKxVQpm8qW+BK5CGNTqTQF
      uCqVtJxLZYukSKYEeCpXogAAQpmKD+HJVIEnUYi4bCaVphCeUiZBYIghCjkSlQo/LovbAI+d
      ZYq5HCyU8hBAlnLZIvnhORxShRIQ2XQW50vklXjPhlGJ91So8Dm4ywagKArH8S9KlD92WJYl
      N7Nm6PNCUVSxWNzUW2zFIZ1/IkAQhGFbPwf9s2FZFobhzZbnLu1BUfThq/ArfBlgWXZDeiru
      T8XuqfDg3Kcjx/2bn/9iamllcmqOlpmVcGLg3PmboxOOaMmk5V47815R3qiTbFmDVPiVv/m3
      8eWVuSWHpr5Jgn2k9M6F8QQkVQi35Ez4zwNDFW+ff2tg0ibRWRQijMaTt698cO3maBpS8oqO
      D85emrL6VOZqCReyjZybTsm0SOT9t9+dXo9q9PK562f77yxCMr1OzqcLwQvnrokNVROXXxu4
      PRmlZQ1GBZnxXPhgWFZTO/7+v/UPz8WBot4g/7QMG3LCUt67cObagqGhOjp7xVrQmpV3/avv
      ufbQZMFVlPzwhz/ca6DuzNuH338ro+/93ve+JQ2NXJqwB73udGkra1nwHCN79js/2C6PLXgL
      3sWhN954e9mfhWCEKWdunX/zrQ9uxPNF/9Kd137z1rz3i2/FJ+NLiynD3mbhzKIDAECVSU3r
      vh+8+Ih95HqsxD3y7He3y6IztiSRct+4ORbKlBK2GdyyT1d2Ty1NLcUk332ya/bGZJamF8aH
      V5yuXKHoTCPf+d6PHttZBwCYn7putXqLZMaf5j333R8/0luzWY/BstZVFyCDDm+mkArPDPe/
      9c6FQI4KWu+8+cbbU/bofXeu+NqvfvWr/qWwGOPYPcmWJgOGCdrbqkMuz9aHNbJ+61u/eXnI
      jRjB+sU74T0Htg1ePOdYXV5bnZ114nIks7Iw+/b523Ipdfnts8HNOTTmD4fNZmCVRiLhx6Mx
      AABXqm2u0UbsNnXzrqbWdi2/5M9KmnT0neGVnr5eLgx4SkNxddBFymv1RgwPjC3ZM3G/Z2Uq
      zKmtVwlZqKxBmdf/18/e6J+Jrt6OCtprVGJAFgUo/PYr//rGtblNCtkxTDGcYXZv7/W71wEA
      ZVS5oxG5MjBw+epi9+6dcZ/rvj6XqulHP/pxaPnCP19Y260U+kPpdhUvGIyJZDXMgxw79FBI
      TC0vvPgj1nr23IyT5MkkYikMEQyDCFS1B3aKF6Zn+CyGCFT1zT06E3v/5O8WAPEFbC5XLpMS
      qQwAwDKEd3V2LSY9frAVFCLDd2Zq953QQsEht62YiyUkOE+Uaj7xfanjvbUAdOjofoaIrUnL
      EfvaWjAXdzqYxoNHn/iGoOT8xXvzMwXaFs6FbSGubfuhrz2HFey/urhWPta9CTNr2bJ3enLZ
      HogHohlM0ckRy5VSRR4suWlWKFVqu4SSe/exF+Kj1wbsXu+i1Vvbe+DoruqxKwPTCwuu/7+9
      M31u67oO+H0bgIeVWIkdIAFB3ElRFEVSokRRoiyZthTHE8dOHCdOZjrJ907/hHY6485kJnWd
      aZPx99cmoAAAEQJJREFUZHG9xJJiWZslUyLFRTQXgTtIECD2HSD297A8vNcPslNJtjSJLTKq
      i99H4APOfTjv3rPcc06O/9xQl2dlRdrQY5TumsGRHnn/ymbIu+pKHRh6Bg/OjH22JDZ2yaBk
      iYVvrSyny/Ce1i5uZnPR7iZRZcMeNfZ39QcgLt9758rcVq7j4IG0x0kSgfffvZIt5/2xdHR5
      7LYtkgo6UV3P2dPH9HimqOjuM7HHR25601h7h8k+M7pkj9b3DA4dO9rb3ZgPhZv3t81cPje+
      uKVs73v+1DO9B+qzrmzH4cbbFz74bNWtae1uMyi+LMM3n7C0dGu07swvXhjsVhZtY7Z0PODx
      OAKm3tPy8trN27OODFLNVHw7qXZgqfK0U9WeKl+fakXOtxOGYXK5nECws0PPH85UCIV/z6a1
      /6ehafrpyZLe61vIZu+sW/OA9sAwDMPVs+xrQtP00+OC3MuSoujOhi6qulLl6/NI3czF1n/1
      y99JDXVkJm0aeOmQMvXx5WkSMAxHceaF5yRM+I+/fTdNwZaBF5/vrt95OX1v/ONbHHMdU64c
      f/n1JvnDG3LMPjERkrxwtGnnJfmrYBgmFVz5+OrswPd+qhcBABgi6b/0zp8bXvlFmxSlcoG3
      fn/1ez98tVaAzF952ys7dUwdP39lpsISHzvZuz56LVJkm7sHmjDvxQk7zJUPHjJP35rJ5BIE
      p/G1E8L/OLdk0GmODA767/zZFi4rWw8917N3h9aRtH/24ZT/+ZdfyM6e90qGjjfX3P/1I7WH
      YSp5TP7q8LBr/PxyKEbPfFLT8+oP2mpnzv/XJ9OOs5aEPcn7hx+fhPGvyM/tABWYVzt48nRk
      9mI0RZTXrs06tvd2D+kY5+hnG2xdR21i3BrWHzChY5+MwrI9/R2SsZvLJFXae+hUf5N6VyR8
      AKaS29pyZZJk5fOjjHSvbyVz+TIN6HJ+8c5CDtA0TWeDm6tbCZa4QiYimK69NrXh8W9GGeNr
      39G/89FS/XDnc2fMk9cvF9gnXv5Jw8Lo5bK2M+25btg3eLpDLUBCE2n5iZMNFLJTxeoMw2y4
      Ixo57PHEROXC6uSloBXrOjEMuW5PbyS0bX2PPbmI+N35eWciTxFkIJo1aMQoyjEYVMlIhK1q
      P7Of+957FzbCmd056ovp2NLCvC+DYMmVCTszfObEwuSndtsKiYj4UKXWZDFYjJ7RG+rBV0yQ
      /4511ZvBj/fUr9s2d0W6h4FRwf7+bjH7Ly8nt+nAfq2YBwEQda0kBPXmGpTKx6cXQ/u7GjEY
      0AiLSfvTNC6TaLhFx8WJhXw6CQtVdCpIMfwiVQKEz5HgNxhlHGWLivZcOvehdcW+FfbPT09O
      Lbt2aBUMnY1nkY6W5qDPBQDApHuOH1TOTN2avhsbOH1KjFKP1R6Rfnj4uaEjzUGXv05bs7YR
      KJWJjQ23VK0G2W187+Brz7bd/XQ0tUOyPwhPYTj+zPOn9snXnJEKhMAwDEGMsa3/cItyeWJ6
      m2YAYBgaQhAYgWGaAVwuj8PhoejTYsb+hXQ87Fu9s7RqH523Z7d9Y5NW2+K0ddFed+B0i7Lk
      9Be7jg0P7TNz5bVUxMXStlvktCeQCK0tCRvb+AiA0JquI4MdWrafQLQy3eG+9kzAtzO3iZmc
      fXrJHfjk5oR7cdFHAgzDYAQBdAUAGEFQDht7ZJ6LKmad1pmldbvNkz4wMHiou8E9O3lnbiEv
      tAwf62RTqbFrl5c9qca+gWatdOdtb8I6Mrnqstuj0OCzpyT5jdHplfqOIwo4Nj2/ztU1HLAo
      3M5wa1/73euXY0htb5sumcMsOn6chBuMu3RyfakSueh3RjSWPcH1FVQs48B0xOsTmZsbLE37
      OtqoMtF/5HhX94E6MUDVnT2NMuv4SKgs7emyBJcnJ22J9sN9KiZ25er1OFAc6mnJeMJis1nG
      QQoJ1+WrI1FaNjBwBM+sTSx4zJ29FtVX2A/ftBKZKTsW1/eefvmZvn06dnzFVyxlI15vqr3/
      pJoVmphcKOCPrueq8rdSrcipUuVvoKo9Vb4+1QlLTwzmXqXuU0OhUOBwdnbQedXu+XZSvd9T
      5WnnkbFmmqaIXL7CAADBOJdTyhP3nFEEgRkI5XJxhCnniDLOxRF4F5qHVXLpXAUACEZ5fN6D
      3coYqkjSMEZRNI6zHxaFYcqlIsDY2G4I+dBP04VCAWVzUfiekIV8oYzz+RjEFEiizCA8Locq
      EIVyBWHhPJwF6DJZpDkcVqVEEkWay+OioJLLExDKwVlQPk8yAEAwxueziWwOoBwujhWJXKkC
      cXAue2e6oQEAmEqJKNI4zqZLhQrMZj944feR8Z5czPav//yrDEnMjl7dLLFSy9bzf/rdnCvJ
      ZLf+cG7c3L6fE5n8l7fHWzvb+axd2MC8b/zTLwNEfmFqDGjbNA/UkVErl39jowzpREKhlDz8
      FOnC1J/eiStaNPxdvSjPMHRoffy3v/9Y1dIrwQEoZUbOvT9pnfMWFUrYf+7C9dXlFUQqmXnv
      vbuRSKEi0Cg4azfffXck3tIq//TD/56bt4ZgGTc0fX5seXFxRSThzo1PLczcGlvJGEWhd8+P
      r9kcCgX7ow+v2teXliOgw6L5sgxPpJ4runT77Y9ua5rbwpPvzOcMFtUDAaTHPlOWwGAwYmlf
      mhYNvdRXTDnQnmdOtIiCS2+se3xRu1XffkrK3Z2ulwDFBVq9PlVKgOjqW9cT3/1e0+jVJS0n
      NhcFMjKrVCXXHA7X9I2cACOzgjNnem9/dJ4E7IJQAS0vipQHKeuq1Z2QmXobsc0btjRDFId+
      8HqbeqcKdRk6nyAp3hePt7gdsFeUP3u94Q9vzq0TFaGhRS8XaFjl2xWks95cV6+spMMMzKdg
      iMwEw4zyZ2f0v77hOPz9Y2fk7k9uTMFC49mXTBOX/tzZcdA39uG+sz9DF97ZTPJe+cmPqZjt
      ncnQjq2CXvMlOhpq3U6/HIDFkfd9U1Dr0Heh9St3PaTEcvCx2wYMs9ksrgiP+sL3fchvbald
      ml28a08d6KpHd+tAgGCExWILeZxYNJonCjRTIcliMVPQdfa36PmApgiyUCCzrcdfredFHdbP
      ssr+Z480sVHcqK+3qOElP/bS6z/Nb01GwhmR5eCpVq43soNFXzAiaO1s+qJPKqArFMNisVGM
      KuZioUgyR4RWJxYi6PDwMV7Bf/mjWwVBXbtFCUGApikU5SAIQuUJwMY5bFzOxyPb6cr2po/S
      mFSCchnhcFAEMGSZwRhidd19oKtzh1bBlKPBKFUrkzkdmzQAEvPBF4dbNuZG15zwd374al+j
      6rHag0vb2tpb9mrS2w/ksvR725IrNxys+gbx7o1qZAukjS0dLTp+KEux6CKRjKdIAADCYiH3
      jWRDOWwOiwXBGFYmC8Ui+fncBARBqEKxVChVYBhG2RwWhmG7aQexeHw8k4pE47BMpzPq5CqD
      QYKEguF0id3caq6kk6UvPH0WS1AgtrfTKa5Kur04l+VpZXg5kcr519ZkDU1cBJPKoFAoniFp
      RQ02fXNU0NC/3yzfGamZ5NqdYAV1eIJl37ozA8qFQoEoMBgOQLFE5tze0CPtHpoqZTy2aeuS
      Mw6fPH1CWYPn09tCtUkpwnEer0KWzJ2HLBrxEx9J9AjK3qVl6+qSpyh9/vkT3MzGgrtgMGo0
      Ej63VidByphEy0JheY1AWb8HK6QUDX14dGZ2zV+p0fXtFQcIafce5Ob1icbDZ+okMCxSKnkM
      JNSoanb04mYlkyyo6/Te1WWWyqRlx6+NOfqGTzUaNZGVMUdJferYvrxr/tr4Vtezw2YpDlFk
      soQ3NJqUTPTafPzo4GFdDXPj4sWcqPF4b0MulleY9SIWKtPr1j+9XFJ27pPnbs3aAq719RjT
      Zv6KXN43r+fyOqJtQ8M9bY0GMeWJQzhIuwOloyefNcuI2xML4vrmb2e8p5T0XPx4JFFG9h99
      tmunXs2nmuqEpSpfn2q0sMrTTjXP9SSp5rmqfE2q93uqVPkbeGSsmSrlvE43UQEQytHo9SAT
      LOIqOZ/xuEIKlTQS8BMlGmC8eqOOy96FJADpXHGSACBsYb1J/5fJ0WUy7fGFcS43RVB1Rj2X
      hQAAUvEQxJWJuLsXi3okTCUVDYTSFUOdgYvBADDbQXckUxbXapQiVtjvSZdQndFQjLlDSZIj
      UoiRfGg7DwAQKTSs4nY8U5KpDTIhh6bykTihVMpLmag7mJTr6sRsOuj3llhivUpGZaOuYLpW
      b7x/LseTokKmg4miUiMvpSIFTCrl/3UTlvKJzX//z/Navdo1d+NuSlhZu7BKWfZIsm/92+80
      Zum5P17CDRqYhuUyGXs3WuUEfvPGB1yNyrdwKyXaq+DCCAyKpZJvYeTarDe9/pmDrrWohFS5
      RAN4YexCgm1U8iGyUIYQZFeSuAB81YSlYsr/8bXbZNzlpZUmpQAqRa5fmS1V0rfnnHVi8uas
      i874wkDhnToXpSV8gRBnspFEcn1qNIeL7BtuuLI9Oe/ZU6dYunX+4lzsQKvqzqWrITK9tkmI
      GN8tqztgXxeqZNYbI3EyseqpWMzK+0P/T2LCEhNYmro8MSc3NSetFxcztdoaBEZRulwkySID
      IY/dNspEKBRKZEpC/GHji66QsWCQrRagrF3KPlJFIhoOkgW0iVx/8zfhH77W/smFKRHpy+XV
      0WxEZGFtLU5s+HyJospcA/iF6Lm3R3IwJrT0vTTQujsSfplMws/UmE/vg98c3TzSruKylGd/
      8N1SyucJz7k3g1weVMRU+7Tl8xcInJsBKEuub+RyNl3RrqGDnRAA5XzY6x8nCEJk1Is8GZBN
      uEjRi9/v//jXf7IDnrb1mMx7Y93m89Gin57u/ODN0W2yQ/VES7sYht4MJTubjF6XVwnAyvil
      xAKt7j4N2665chgs2/PYbYOvOnr06MFO/dqCDQLQ5w4FgqIAYnEU3QMDXS317N0ynHCJuufw
      QK9FuLQR/CLAzTE1NzUf7GwymPY2G9kIi42hmUyCqoBi3J3jt7189kjM6cjtkoAPkIt5rFZr
      KFW81xeArnxeFVjMxq0Lax2HDkFkuMg21GHBqzPpF3/+88F9+tFrV3MUFXTa9I1tEACFbGR2
      cq7j2OlahUqrFAPweW06BABN0xWGhiEYAJqiaAaGYAAxDMU8aYePJj0OV7pQIFeXbWUAVM2H
      zz7XFbbd8SXEZ1/50Usn9j/+z2domoERhMVmSRTKhM8ZCvkYsUqIITDCqpFKRQLu7l2bYT4H
      cAU4lQq6XIn7s5yl7flZh8JkYjEMwzAIT0jnwh5fEOYKdtZnfQQQBEEQxBfKCpnQhjtQW6dD
      i0SxmJu6OVIRm3Q1HIVWj0HlcrkClxJ3F50FikJQDGayPg+l19VUCvGJkWlY3ajig/91ivki
      BZ3e2nAAgVGnVsR97kAKMZoU8mLWtuGmFXXCJzpgCTB0ePkubm4VShQ6EFmPUelowO8JozVq
      Dpbxb23cnFp4pN0DAMQuZTbdvjQtOXni8B7LXpBybwaI/qGTGimfhQu0+l0ay3VPmGIy4Q36
      8rjx5PFeKZIKpFmNe41alUJQI5OJBTWaOjlOhtPctlatqlal1DfViQl7uHK4v0fC3SUx77d7
      WFyRUqkUS6RSOLuR4BzpbaHirhRRDka3c6lYIF5q7ekCYUeAkh872sMr+Fadif39A0o+UkJF
      GrWYSsf90WgqHo3kaJ1agSIwxhaotDq1ArWthTqPHjHp1aWYE1K1tFtMegW6bIt39ffUPmjS
      fmO7h0ql6Yb9nSatWiXDSUZQK4IyBU7voUNmNdvhDBmaWqvxnifG/8N4z/8AXxUc2iScyPgA
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Heat Map' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nO29WZBcSZaed9zvvsa+R+6JBJBIJLYqoPZe2d3T
      09Ps5vQ0RzLSuBhFyWTGB+pZjxIfJJlklOmFMpnJZigb0igTezQacoY9XV1dXV1dK6qAQmHL
      BJB7RkbGHnH3xV0PyEKhULlFRmahsvp+T5GRfv163PjD/bj78XMQpRQiIg4KftoNiDjeRAKK
      GIhIQBEDEQkoYiAiAUUMRCSgiIGIBBQxEJGAIgYiElDEQEQCihgIdv9FKaXRvkfEE/QhIMMw
      MMaRhiIepw8BMQyz8qufb/7L//7oWvOIUIs5rR7utA+9Zjo+yVVWDrdO8fwF3eocSlWhIPZs
      l2s3Bqwn0OMCx7GOefAaymPxfXyoPgQEANi2U+NnSKeBg1Zgk7DXID5l0iVO4kOzS1xPPnvZ
      ufGqvTrw54+nSKjHc1k2llCmT9b/06uxS7Odt9/3NhbV577DS0xg9LzGJgUeg+cbXlBf9Nv7
      elhElvIXngsrD9xGGwIz6JlIivG6QNicnAsbr/6akr5by48MZU7PENvnUti9vwycQAwTIYIT
      8bDZA7sZ9vb7RfqC5AVsIh0DIUGtpt/qsdkCdtuBaWFZZpMlZ+EOI3HOwsIe9dimlCymn3vZ
      W7gRdnvAKXyp5C08oKGHBdbd63IA8DU9kcswuSFSr0LoEMtj8gXaWAchRp0ODRBTGqe1+/0J
      CAAYkeFT57Vx1VwzuITo3Hir+eaH6ne+ScIyf+IitmocnbFXX++32s9DWhvqt3/it2ywu9pz
      3xezFve9nxrX/xonksH6PD/1TOzy84ErgnHHd2RvSWm8/u5+qw587fLLKmWApaRlkbAlxBNW
      DcVntMYvfn2ApiLEIoYQl+L0mKykA88B2+fPvhBufEiqNiG29fZv+qiOAptIM8VzDDTDTocb
      mw5X7+JkGeGAiWUBB9Lw0J4CAgDE8JjnlCvf8laXmHgO4S5ConjuvHv7XW9hYV+GCBdHmLC5
      IlMuBKs1drQczLHs9OXw1nuUSzBjZapQtH+bxrKstb/6fzv/039LfcpoCgQ2pTz1eqFhMZqG
      eBUxBEJCQzdod/dZ504E8ZRda/MkpIRijIARsIARKwb1VeCUoN3kMkUurgaGDb6FpFjYrgQ9
      ez81k5lzSrsGgLCiE7ODeZG4DpeM+R0b8ziobZCwbyNPevlrOUEA4lIKiPpIiVPXQ7woP3vJ
      fOMN6naJ5eyzKl+Q2qatiAq1O0ABiRJQAoAh9LCsBJ0uFiSEQ69S2aOeeFpSVDWX9zdWGEUG
      RiJ2D3EiBA7xPNLb+wvyJ6fTgQuBi0QRxxLU9YF61HGRpFLL4M48T1sLYbvXdw8knZ41331L
      ef4V0q4QNuXP/yYECHs9gF6/Ve0OUjNaQcGZaV4lWEtaNz/wq0uO6QK4AODX1v3ao7L9jZj6
      i98hm0shYaSRiyg1Ga4u2B//MmgOMuxifuIkIg6KZanZxFom3Fywr3/Y/YvFg1QmaNrFS0HH
      CDbnmcwon850fvGzoGc9/GfYRz0xcfo8m4ghViQEWJk33/1VaOxXygDAzzyDcEAtD4gdWgg5
      q0HDoKYBAN57f/OwTN/rQGw8yShJjANhbEocKsozl/qtYb8wvHJ6RhoeZWQ26LSFsTOcJh5K
      xaweC11TmDxLeoSNYSGbo0Ef38s2IIRYBIKCtTij6dTuIlE7eG2YIb06VuNsMo+o41XXH6mn
      v0YxHGYZfuxUsLHIaDoBkY331yrEIuKGTEwNW22uXGRHTm9Tpu8h7H/574Sk6vdchPyg20GY
      C41BB6zPE8RTdtPi7TbwGrXbgAVKCEJeaLoD1kxmzmmez8ckp1IhXohFJmybjCYEnYP3oNLL
      X8tyLCI2DSkgzKQKYX2ZGAf51n1Batu+Hk/46/eZVCnYXAZWIEbfbdsawrI5f/Uekx0Kqmtc
      cchbugdkv1+3PzmdFXjEhKTnYIUnpgWAqP3kbKDvISxsbljNx9/Yl+VxEEIv6JkAD1vcR8e7
      J976gre+9ZpYAABBxxuwTtKqfvq6N9iUngTO/McAEJr3AADgoG0LPffeLQAgy/cBwFuY77sh
      jS1LK9z5S462MiIGIhJQxEBEAooYiEhAEQMRCShiICIBRQxEJKCIgYgEFDEQkYAiBiISUMRA
      RAKKGIhIQBEDEQkoYiAiAUUMRCSgiIGIBBQxEJGAIgYiElDEQEQCihiISEARAxEJKGIgIgFF
      DEQkoIiBiAQUMRCRgCIGIhJQxEBEAooYiEhAEQMRCShiIPqLziEUioWf/L0jasrjuLy49Cf/
      5xdwo8MhP0SkyUOpibIcvNdPPLynTX8CEildWl6UJAk4KStgnmFZBJVOlyDgeCnOM/c3a9lU
      riz3HTXmCSwIlgas4gskLggrtTrLYAekiYQksYzIMiEgx/NlnmUYTuGYfVblYvZwwr0OTMjx
      rqTuWazvb3q9Z3ca9Xca3gkFdwN2qpD58Wj6z26vakx9pVZvAZvrkv/qzNCB2nxcISRsuGQ2
      if/kw9tvx2NZhHSZe/fBYlzL5zJCghX/8Mzh9E9fJGKuJMUSAQlZzIgcixA4ns9xnOcHEs8C
      QBCEgJm+BXSulOMwPV3wRY7DxJcEhWX5b47kPc+ZSCZZBmOWP4KP86UGY+ZkUrEx+59dPONi
      1jK6oiAM6cq/v7Xyw8KQzMtPu4EHgSPk+vz8xyvrQ9mUaQdxmVmstuOZLDIaWEtl2ODm4lqi
      NNK3gIbi2psLS8sW0UR+SObHUiIAKusKgHIUH+NYQCm90+iplPYYEBmhrMtrXaOsq//D77/8
      tJs2EEWR4pGRarfzwcrGM6PpuhsO83iu0R1JpqudrulTbFkHGMKMB/XGBlXijtF2tNlC9iia
      fryglH64siZQSJfzw9S7t9HcCERVlJ52uwZluDA6hgAz5efGhvOxmMhiAIDpEwDw8fLyt2Yv
      FhShbwEhQp4ZG9NEJQhchUFmQFUWHXrTjxcIob9/4XQvZLzQ4TgpxWdiIhcyhxNT9iny1zfv
      pARMEV502QRb+9HZqUf/mhkefviibwEVYrHC1kvhMBr5VQAhdCKff9qtOHwUnt0wXerbBkjD
      ufS2ZQadb0d8hfnezPSeZaKV6IiBiAQUMRCRgCIGoj8byMVMhf0iJhce5tCpafgkxH/Ic5Yy
      kNYxxQQRAKClslOK9X85Q9CO+TRQLhbIuz2W3S9/nADj5vQJ1vjM4ohiIzYI9tnUh4Sy6rFs
      6Dk+y5rSQZJMsmnVU1nRRYK32637ExBtN8KbHzCKGNQ2geGwyBPz4DnxdgEBjAPAJ1sx66dG
      3/qB4poeQgAMwwv73Vp6hOInq51lP0SJnIJQ35lQZD/Z9iq9ppsY0jGA7wSswNg9DwGIuoBg
      j+RLip9qe+tGx0+UtK3LecZ3Q1769Pl7ts9LHADACdFzOV5kPHurwPff4MY7HoQ+dUzAHJAA
      fB8QAwyCgADHgB8AzwEg8B7lEvEg9ICBheH0a5ctijGl8PC5uZYvyBwA2B0HsYyocDu0egUA
      XrwuX7y1AQwC39+2UP/pni49H9Q68ugYSo7zimMvdVmdDdYWnLm5fqvqi9B2rr+6rMq0VvWS
      w4l4ArfXDFCVhI7W59piUuI48LuhOqLbGx21nB45mXiyCtOsNHD1xlogiNT3AycU4rLKBVw+
      Uxzeexl98e1lm5falZbZ9Ddr5it/9/Sb//Y2R/3xl4qba74AfoAYOamcvJTb9vL7by6GmtpY
      ajhGWNs0X/rRyfs36qUhefF2XYnJnk96G50QGD0jMUHoUhz6PriBD+wzfzAFANzFlxAvAbbJ
      Rh2oDywLSEYKS20XawqpNXCpTDYWiEGhuxxWNh+/9ebN9UrN42WReJ5vha7jxtOKlFY3b6xT
      XURuOP3dk7q2oxJwaQwrEsoUaKsGgHE2R5o12muF9+fhADYQcX02rjKJPKPIxLS5oXEkSmzm
      yNej22tdWWMNk7AM9DZ71cWO0bTaFWNzqR0QIAiD5/dqxtqdhm36DLPN55Jikh5nNx+0uu1Q
      TcmdpYZleJtLLau9r2wmnCpNv1TyDK+zZuZPxAFQPM7ySa25YioZgQaBklI61R37YzGunH6u
      6Bpup2rnJmKAkFHtLn5cM7tu5U6t1/EwogQQBRT6QWDYjTWLhASYrb6Wtja9994k9QaSRRTL
      4mQKBA7xAngOkuJIFsnGOtJiTGEEqU9uobMSH0vy7Uq33XDcniNldElj2xWT4bDA4SCgaNeV
      YKQnQNVB0nA+j9QkYAqIAN7a8ewv3VP99Z+TP/lfGUUMajUk8IAwtQ+S1Khf1k+dePUHimN6
      EIa2QxWFcT0q8hAgTpIfDWe0W7f19PY7l4qfrLaX/BAgIHJKAUoCyxeTMsvsaxn94RDWbbqx
      jGR2fVnjwoAwLOZFtlkxksU9xkTFT7Xd9V7HU5ISiygj8rif1fvvv8GNd3wIXeq6gBkgPnif
      Digolqa9OuyQ6nVhpPgXz5rtpqvoPMsxCENIQBD3O/JsDWEsQryK4jHwPNJtgPNp0q3+h7CL
      zwWbbXlsEoFPWd168xf91nAwQtv56NVlAYcdk8Qyksii8rPDivS4MYR2Us8WtrXRCOs3mvGy
      ZLW9i3/71D7V85DFt1dsz1vAEkYQS7Drd1rF0+nJZ4p7quch93+7SGIqnW9qPEk9M671uYzP
      XXwRSIBYoJQlq7eDu3cf/Yt26rtfu3mrcut6k+VwLC0rWSUI0PSVwu6XPA4ujWGFg1iJOi47
      lPLf/CV5TEAHGsISGhYlEBOMonG5L2gztb3WlTXOsqmeEnkONzcs3NevGECKSVpSSg7FCkOa
      nhVqq/31nbwq6Dk9npGQF7CIjJ7PY70PPw0xrp56ruj3nF7HW79d6zc1NG1WvfffDJfnSb2G
      02Uk9uEzw4pcIq8oSY3nwWjageEE/eSFRXoclBjt1JHA03bjiRGr7x7IefeX/V5yKKQms6nH
      vLL2P/I+go3rQ3EYGk0AQGaqb92PXvnES+7iQba9xq+UAeDiD08d4FoA8K+9BQDBXAvg7p6F
      nyB7ppg9c7DbAgCEN9/b5b/HdS8M7W74RXxRRCvREQMRCShiICIBRQxEJKCIgYgEFDEQkYAi
      BiISUMRARAKKGIhIQBEDEQkoYiAiAUUMRCSgiIGIBBQxEJGAIgYiElDEQEQCihiI/hzKTE1Z
      OzO1d7nDxshnAYwv/r4Re9KfgDbj8K/LXUnnfMwrypZDe2g6NmElNrQ9pMaOJL5dEkdd5ZeU
      vl1aG/frIQ3bXSxTu9mhiaEY6vVaHp+Ph5UaGj6pj1zow+M/4rjTt4Diw0k5wQnLJhNKcYED
      QCjFSz4wNCzHMeZ3Oicb8dWkbwExHMYYAYVYSTNMmh/Vj6JZEceFAw5hGxthbym0BS0S0O84
      BxnClATHrTiaGHZ7pLbSywz1Hewi4itD3wJKjsYBYDSmAEDq8NsTccyIZscRAxEJKGIgjsfR
      ZkwZNRhowOSpjIMdT0MzlKV4txB0HMhsuM2PDRGW4r2Dz/Egc5+9HBEWmH0FvQOAeomhkgi7
      tvAzUJzsMZhSAMCafqK124UOi3vK9tHHAMDMcPdPf9py2WRk5zOf93gIiGLi8vXKg05+MglB
      YPYCNSHYRqDoPPED1wNJYQGAeH51xYilRcyxovyZFSkf2rvUr4VpBzVqFbswFv/k0D012q4a
      34p8GIKxbV/NO3EPt5buttLDcR6FlRVz+Ezm80FjKJhPBOUT3QSo1qNbWG1biEtPlDE7tmcH
      alpduYQqVsyltYBh7aahpnVxqyw1O54SezJUDPLEH/9avrW4NJTJzgI7u8i2LUsV5YepCigJ
      ez7Rha3nM58U3hmt7vRkmhmvefZTkcxcVU7cbz1e4HgICACMSmftbsNzvI3bm9WK/3v/5Zn7
      11vlIX7u3XUL+LjgK8N5MIzsVGbp/aWlJX/qmdzYbHb/ERhu/XYlnWB/9bOqwodKTG3We/ZK
      Z+SVifpK74U/mNylHm+zeW/O6HUcjbiVlt9s2H7X6PWgUBLUQnJ06nOR9j6F3PzNotWy9ZLW
      etDKnMtV73YKw7LZtC2fKY4p1aWuXethVUqNZa5ciNXurc8vB5W5yuyL47X1DvV8EMXCePL0
      hW2ihfiO8driemJ1g+NFjUfrzbYeT3UaVVZSUyLz0WY3rshDmvJHFwYI2wEAx0hAjMgrGru5
      0GUEJj+mIITdlrFsAOZZheNYkY2lRCyTjXtNwvLD40K3u/OItR3JrFyvWomMrOu4cqNGVGFk
      JrNxr8lKHFCAnevCPKeoDC/yIseceba4/t4DwrFM6PghR8LdwgAtXlvnWDCsQPKpklQwBQ6F
      rkeDgCRSumO6ek4TGQhYLpNTAIDXFIY2x89mN5c7iIVEVgswCnYYnTDDXCjlbbO36YQBQQlN
      z6qiEMQzcX2t1c4q4mQ+LSKmnwhb23NsBCTFpXghNjIry0mpvdzyA/zsDz/vF6BlTwIAOB0L
      hP7CEecnUliWFZXV4nxqOI1pqCXlk/u4kI1r+byfGo5pMrN4pzr+3Lgo7GtqMnq+nGo5k5cp
      xyCKEScJ3OXhHUtboOf0i8WU07LEmES8QE/tFt6K4aQYi2cmJ2qttiLyla59YaSksIc/Zzo2
      AjI2OuvzjdU7jbNfy1c3/YLggbrjvpsY6zvH2623VtJJ7td/VclPpcENLBe/8ocn8D6iEHmb
      zQf3zWbNmJ5S799tOgFz5pl9Rq8id95e8Q174rmRj367/u2fnt69dP1eZX7J37y/OX6u0Gt6
      L/1kmt+5A/Ed41dL67lqLaTw7ORk06rLg/c223FspvEPhzCGQdVVm5hWp+Ucbv2prFxvBBNX
      hjAJAsvPpXC9uePc5HEwzysKRgHZqNhTV0anL2X2ecfFa+sIQj6hLVzbKI1opr1H2DtBV1hE
      Jy8UvZ4by4qNqr1bqxjmUrlQiOkFTfZCklHlIwrJdWx6ICWjTX/tCPdMymeL5bMHuVDIJV/4
      XvIAF46eHxo930f5zGQ+M7nf6HqcoH5r8vFBfBdbfiCOTQ8U8eUkElDEQEQCihiISEARAxEJ
      KGIgIgFFDET/0/iDJC+L+MrSn4AELOTEp3BqRwbNgy8iLVBEv/QnoAD5dz6+mZvNNeYbgiYw
      It9ba6sJrt2lyYLSq5qiyiCW9T16uI7SmKJorP1y0vcQZnec0PdX3lsOVDWWUUcmxA9+XROx
      t/auy+pxJY2aD3psUo087Z8uTUHmw32lWTXYvvOHPk7fAiqeSTcWjdEXR1meZSRBivPnvimh
      MAgJvfOb9fxEoXwq77n9ZjOKOGRiEFxbeDCSL5Z1GQAavZ6uaNyWQ1nQdsOEtOWG1hpsk7Vv
      ATVXevlz+cqHa7Gh+K2fz5/+3kk9JT3815WfRGfEviwEjlGxg3vXrgWIVwW00Wpr8VQSUU2V
      762vrtrolanReqv70yv97MZtR//5wtrW6s1qt2r32p4S47p1R49Fx5m/dDC8NFvMmbpYMdyk
      yCTUWDGhN5sNVhDOj02MOy6L0bnh0lNwKJv8+gQAwMxBkq4dGEwZyT2q/WQAYDC3b4f1YwKl
      t1dXy6mUhG1ZSXqdJsLsK2f2cDk6AMfDnYOgsONU1xZ7wzNZFAQ+weKTHugDwYXpQ6zty0Do
      OzcrtWqrOT159sbctdzQdFo8koHieAgIABr366tz3fqGwVPf7BE1xq0t9L75D8/v03/0dw2G
      l35y+ULgOs1e/eLp8812o+UK22e0H4xjIyBBF7S0hBkGhySel+22VZ7OsGyU+HJ7GE6cSj/s
      cgoAALmDuLzth2MjICWjxUwoTcarS71ETlaScp9JmyOOhGPT/zfv11dv197560VVgd/8+zn/
      q2b0HleOTQ8k6qKW9rWkXFkyhk+nou7nS8KxEVByMpuc7DvZe8RRc2wEdKQMV6Xh9kEeBSIM
      4M/Ypz1BenBq7/NAmGHB5QGgtMSnunsfUUKEASa2lpGaeXfvZlH85qTDeALwexd2GCR088B7
      e1cLsFYSm3ke0Kc+PZGAAADSPVe8tvDA8F4eyrEY36k1J1NxBAgj9O7ySjPA3xkrACAK0HWc
      imGfSsc5htn22GFVQ0vPOnMfrk/MFgBB6JONxaaeUpSYyPHbrF3lO9B997YF3KV8kkGYIhCY
      HZe4LA1/cP9Os+2dujwicIgQymAEGDHMk7ZsWwdkavN3boIojUwmMEaAcWNxc3XFyI5l8kUF
      YxSGgIAyPINN3SObN69WBEUcORFv9Wgux63M9UanUySklFDAgAEQgx2GGn5tYcXQkkoyJQKl
      kYC2uFHvfH24+D//5h0zwAlNHVpfeWOp81988/JcvdUhzH+w2n/9YPPkUCFoVDtqsjx39/yp
      cy9k1W2rCmzr2i/mbt5qDOXYubfX+Gw8rDb4ydKP//PtD54hgLph/stf3qyz6rlM/O/P7hbK
      fWOh2bXCX/zpO8gLDYbP5lU1Lj33rYkditNOtf1///l1PqsXhhJJDY2MJ/7y//lI9FykKmpa
      kF0/NTsxe0Jf/Hhj/FL5L//HX65PZwLgX99sijb58N14XApqy6anKGN5BLHcKy+dDk3rb352
      52/9/ugvf7ai2nYkoC0u5ZLX6t3vToxShDfcMMNBUklOaJI4NiIgumrYl9JuPpscL8TmjHBE
      TubkHRd2XTP4/j97eemDZSTys18XeV0mVkbOx3cqjxAqaIo6NsKK6rD6ZKyWJxg7X5ZkZm25
      xyLgdJG6Aa8rO9aMcSKrnX5hTM3pMZ1jabiy1Pv6D0677Z7Zde8tmJOz2eyYDgDjF0q3r66/
      8MeXWIaYVlgaj8dVwSMQ+P7kLOtjlliWnIoBAKupP/7HF+qL9dkrIwmFjQS0hRuGfhhinl1u
      dIqp1LOFrXhWJ9MJABhNwUsjpYfv7Hl+VUnrdz9YS6ZUvSg9uNU2e+7sS6O77Ly0bDeuiS+O
      jRBKGQReGPpBaPhBXBQevoMxw34y7bTb1tqSx7JMoqjaVtDteDPTO+5LUkIoZhJpSZHAdgkj
      COdffrhpkwaAi4/KGRC4fhhSVuQDzzsxm2MYtP1RaAuwyNeuVWRdBg5yk5lIQFt8XO98bajw
      lwuLIpIrnQ4UDh4QLbCsj16dT5TSs0qm2QmE0AtC2Nmwgbl6c5YGf7K++fF6bSouNCz//Ejx
      zlqFIJyLJTnqxtT4j05uBe7YWGx2rBAQVO5WmHTy1LBQa3qFzI79Vq9lbd5cQZyENRwfKZV3
      cPRbvFmduDj04V/dqVcbdz7KfeePpnda5DfXakwm3bu7NN827/12MRLQFs/kU9cbvWcL+aVG
      p5waKJyeawXf/2evNBc2K4vO+JjS7fC7h1X5xonxIZnXDXdIlUfiiud5LY98Y2IEGNaw3Zio
      xrXYo8Jj54ckmdnYdFWeII5rNZ1TqR3zk2CMdZ0d/aPL7YWqVtS9cMeve+Jc6c71ytBsqeQm
      m02f3XmdTR3K4feW1HLq/FSmvtDn3LVg8D+9O+iWXEdTlqf7vMYVqtAb8L67U04kygkAgFPp
      QaMXK5kYACjThaH9le9Z1lXTaZrGSCK21OzMlEoXtR2DG+XHkgAQ++RLKI7vVvPExa1+K5nc
      OfIQAACQMAy8ILQcLAnpLPfhG4vTzw0L3DbCd1sGkRWz3ZUIkx3T+xOQ5vrGtXsFlW9TviCy
      CAEhtGH0kKAmeRwSonDcnlFE1kLmvtPyWMG1/HReYRhMCfVMu92j6ZxECeVEjvnsLyDoMrCv
      dYpjCUbQMKz5Zpf6wcXJsWtrtRFtn9o7NJZuVccull7/398w9dTEiDL7wnDgU2G7eYLXNe5+
      WHE61vipwsmR/o3o+/XGx7XgtolK1DQYMQTUMXqimkhRc8Ui//jyhXF5b08dq9a5MW80llux
      rMzxyGwFge/4PhNLiVbXPvX16TMzv0NBzDHGpbh+Op8ZUYU3l6tXhopffBsmzpduf1B55kcX
      JF3oNuz7txsnL5W3LSkkY2dmqJCQwDS73f4XEmcKuZTEjbYtFmeqXTOlyoikA8AYxZ9n2AS3
      rz0qrZR6djjfXm9ZHiDbxlMSxgAh8ULQdUFO9B1f7FhzrvSpYr45OfJU2sBK4tkXxx6+TuV2
      823ndeXkpYdfUAIOsBJt+UFMwJRCpWfHJXlCF20slaX+6gm9wEPIB1YWKavFypNfNYfA3x36
      FtCDeuNmLbhpMv98OvMv3l/OnsmbPN+vgKx699a9XqcXSuCGDB8J6PhyoCFM5s5bwdWG+d88
      M3mj0Xs53XeaS62YHBW1bJLbbPiqsrfNhCiW3KPyqQMATKKDJQekbwGNJWMAoIswldQBIK9t
      vx+0O0paH08DAKj763ooIgZUV+42y2dyHIsAoNe0AssTU5p0GN71BEfrYQfk2Dw4u2W2KkZl
      rsbFFHujY4eEdB0+rmrF+OW/NajhGWLGZQ7nUQQMC7APj4uvCsdGQJhlJJVlRS2WFNY7diyv
      ItOmgpgsH8Jx2PkJbvncQbrSz4NsEcA8lKqOBcdGQIImiqqYinGGEZ779hjleUU5tMZTNrj+
      /q0zV8oPbjdFjrAi32p5py+k/+O/er84nddSqiZBCNgNnHtvN17647MSv/Nqxc7bBV9Jjo1T
      vdOyWhvG/LsVgtDanc3lW/XDrd9oWavXlu9+WL0913zj/3rvwXydUBoSdOe1u1ffWl28tf7/
      /R9XPd/Hprm4vFuE7981js3PBbFYUlmWU2gQIobl2d1ToPTNmStDXoiulKiiCe6l/NV3qxhx
      l787qWU1y/A5TM+8dML1SPmPs6zSXxaOrzbHRkBKRj+dOcLoH0tzjZNn0x++s5nS4aOP6jMv
      nkII5SfSAKBoW84Sh2MlfbU4NkPYUWO0zNZ6C/P8+nwdWN5o/w4ZwoNwbHqgo2bmuRGP4BPx
      gLuQ7TTMdPkIg4F8lYgEtIWe+dRVT41FVs5+iYawiIGIeqBDB3HWjgcwPs/cKbw4+VnnJ8Kc
      usOJZJvTiamDyGEAAA87SURBVNkWk3jnU/fnliSsn9jxECNCmFoCAEDAAiaAdwxciRAGiweA
      xBpfbO7quUcRIPHmCQGkrWKRgA4darXvvfFOPZ1RY0luc9nM5GUlo9Nma37NGRnVEaDGhqXn
      BEkUOk1XkVFqJKtrj+3m+qx6zf7FtVujydj1SuNcIVFIZsqaBADgf2aVeyWO57rLt283rYZR
      ODssBg5w3PpKp5CXV+83HIrHJ5LD0yWeiIgJ0T6CsMUX0Vhr71WuuwLzn/7iNS2XTCf7dMOI
      2A/EDzyCQ8v58NZKb80NXy7LHXd0PBbcrF2/akGtxmeKDcPo3NngchmZcYdAnP6sByalZG6j
      +qDVaRhWSJyCGZanx7a9l9W29GyssdTYWKj2FtY3Len0rD5/vbW67uQLzBv/cf3b6dRQ+vBN
      OsxxtNN87c1Wn348PNdODTo9aaqy3+lvCZA6/DHqK5Wh/HfLJep5U88OY0C8zCIAloFz3zhZ
      W26Uf3CKZRnA4D1b/uCd6qWXTsixJ08Gspz4X79yxQmBxfDRauXKxI4u8cUzI/x6Z+ynlxCD
      nGeGMc8JIusYDitwhNDADeJZ6SjcyS+8OC7G1NMvOv19Laua92+KC6HlYYlXUjKDgLie4yNz
      o+0DW5xM9OqWlpYBAChZvVGVc7Fk7hP/VEo6dSeWkQGq0OivuXGaZvqwK54y1kb9jXfqnOPh
      mIx8jzLcN//2NABki3y2+OlaqKIK3/rx9q7fYeD9/Nbdpo8kBlgGuRTttIbZXq3N326Gnnfm
      xZMfvHpr7IXpiaQsyZ/x0DqKoN1XX7uj5eOrNzf6/l331jqdRq/bpe5GVy3pyPHkU0POYh0J
      Qntuvd4GVSaejc78/tT6XIO737zW9EbPpjcX23oh1lluDj83Xpr4ioeTpn7gE2bqbP7Bx2st
      k85e6fsgFKXEplhngps14xunx/WdI/lZXUvL6hs3l5otJz+UzJdjO5U8XDDHkcBHTP+nMjIj
      KlUUxTTdhCClZKdtKRqrTaaLU6k7v3qQLHLxNB86BGEUyyiczEo5BIgm8ipicWm2IAhfxshQ
      yOeReThjJHZkZajw3XKJpaGW0bWYICl9e2yynPiHs6ealvODc5Iu7vbIitMjQqUzMX6+23XL
      z4zxX9RAf/HlSUFXTp4x+s+VYYSB5QkiyxVFWefLZx4GfVIB4NQ3Jx8vefJr29t9X0Io5y3c
      mzd8PDIWY3iWEFBjwoOPK6XxJCHg+4QGoZJU2H3E5SYALMcKAAA4WzyopyzCmihq4t7GL0Io
      XYwDgKxLB7zXgUiXkgCgaULfAqrerbuErrZ8RWHFmBTL7hga4njBcLhbMa9en5+rsafOpC69
      MLS+3KneXW4ZomGbMd8tfOvS7PRXfPA9AH0LSC/F0yfTK++thMBI8S9oyR9RRvGP0Kme4The
      5HLDCcjyeSymcxIv4uxwig3kLMP7lCYVlklE+xvb0LeAcifTADD67Bd69paicGPjwfJCjyDm
      1LOF0As4HhOKfDcMXF+OS7zI4gHibipUsHqu7eORonJzzkop2MtqUzNf6KBwTDk2qyt2w7Rd
      0qv2Pqo1XZ9pNu2EjuxATGR5xwhe+mm/4RqehOVwt2JUDH/xXphEPjeagsEzkfwOcGwEFB9N
      J2ZEu2EhIO2qNaVzhADD89T3EMtRMui+sCBxuZEk2Pa3f1+vVaxdZs4Rj3NsBOT27KWPNlmW
      K42rIcZ+gMpTqT0jgeyf7FjmURDhdOELWk35CnBs3Dnshum4pLHYnHt3LXD96rp1mB7REQfl
      2PRA8dF0ckZ0mhYvMZ2OnxfwVpDbLxmYoIuvD+Q8HWAG4Nhkcjg2ApJTCgCIBQ0A5C/xvhii
      dKjZ/dfvfXR5pGiG4NjW3XrzubGRWs9SOMRgzGJm0wlSHC2lcxlpm5VGF7OecGyWDI6NgI4R
      nU7D8IN/9cG9l4ty2wIb4w/m7mwEDBHkbGhc3TRGc8lep/XtWSlTPvZxtCIBHT6KmvinL6S7
      tiNxrOl6Is8zAIbnKzzn+v63HevNSvs756cV6auwzhQJ6PBhGfyn714vyywjSR837MmYeGV8
      PKNyACDzXEKR/27qqxMPKRLQ4dPp1M0gfGvNOl3wNi36fDHhBiHwfUx4W5LmhnubQVyAZt5k
      AcDFDLAcT3cwvSkCgMczpABAlxPUz74DAIyP7qUT2nYmvImY+hhCiAKAgjD0tuzQSEAAh+rO
      gVxZUZP/9IWMabuSwH6fQNf1sjvnRdiWuNv7s9d+o/DshVOzp1X4m8XamaRUd30R8xu9Lkb4
      hclR/uEM1AMAMDFr+a1/c3UejLooq2dHx1QWERL0PJLT1Hfu37s4OuKE1Lat2bFRlWMAYFPg
      Utu52dcxl9rOBQ0D3qCV61UstZb+6rXlmSvjxYRy+tKJSEAAAJTzavWVZo+cOJN9tDi5dr9R
      HE8hRBoVM1XQAMBu21x8DzdyGgLHsgAQk0UAAAYkru+HTBEeSWhXlytTnk8ps9JoNtvUtDub
      BmVF3jCt2dGR5GcjhFBCOq0axdiut1v2XYyYrEyuLrWGs7nNdmWzaxJK1tu9ZLpwKnnAGKaU
      hOvLdd1qBwG169Wfv91OTYwiSp/sx3bCsqwPlt76y+U/PdjtByFO00LqCM8aJ2l+bXGu1gjc
      tfWVLl8a1l753tif/2/vaCNJlvr1Bx0xm+SlwFo2k+fSmqRceGlHJ2W2q/3hrwcKMOVi1lO1
      oNPiOS6kSBfYza7BcxzLMK7vixzn+EFKkR9fhTcxS3mOOg4gRAjBGGOEgsBHCLshkTkmJJQg
      FAZBXJEfZqnaFOTteyDEpSH4/PstYJcukkazJ6ki8QOG4wLP1+N9htjBlBHJUwgxwMGRR21i
      GCwqHJPWy2l5ZFw3Ns3LPz238MHG8FQmGZd7PpsrK125KaQUUTryKMQ09P/tux9ODw9fW1qJ
      qfo/ujL78H1N4AFAFbZxcbTNzp+9PwdGh5PZk5nsL+cWf/L8lfOF5GdTY+yRCmh3vMbmL15b
      yCVEPRnX+ODO/calK6f67V0pQXun4zt06NGvzEqq4FAyXC6FPL98s6qeLZVSYqkUA4Dhk584
      Nc/smBfncKEIjyb1hhOeyKVbvd5K2xiK7/G7pYR023WKJcnzDNuOqXps20Dzg7SKhEa7R1qd
      laoRF4PGZm9pOdefgAgia/PL7YZDEes7QTovBoAxg71q21c1PSHmRo/EZy+k/iGE0twVo2O3
      G0F3zcRqHCNIpp7mWjDGzPMnJiVBRJR6ge/TvXdsZC3xz7/7DUAYYwBCnnNcURiov/k8Qqbw
      D/5JgQSB54UMBmAYjuk/OqlnB7LOz79VLcwkl99bbrji6Dhn1jwT+272qAT0BcAwWFRYNZNC
      LMMyh/zo+wcllC1fYWF/NjhCWBY/bbZ02OoBAK+xea2KvcpSdaNz8esXJ0ZTcIBpfOlc0el5
      +aksIAjO5hDGDItDL8Ass19rvH8QZQTnCOOtMBw3PFPaI6HN/qAILWQG20xFTH7vLLxPAUrC
      tcVNgdDh8dxQecvDuG8B3fvVvJTRF6/XUqMJWQDbJUpaHzp5tNubFJGOu9lpOMmhGL9dDqIB
      IVQ4rCGSYrj5slVdaqWGktyTPo3UsXxR3uOUD/WZ/K++jEcVhEzxGy/qgizyLGY/eV59CwhJ
      4trHNVkgrMx7nR6fUH3nizCrWYFdm6ubXTvoOj5muptmqqz7ltNthed/b1IWj9pG6gO/1Xn3
      tfsT5+zaelvkeafZYTRZ1fhOxzc6ZkxEZ3/vYlw55J9BkxWtnVait8NDTN9nVjFOpp80UfqP
      VH+pNHqxiBDynYBXMp7p8f0fnDsAnMjFc4rVMHoNV8nrxPE6LQfZtiirnk/lL5P7A2W5TF5+
      cG2NCkjLsw8WW8Uz8sZSi3KCFufWb9Um7PDQBaRbrbvV7omEZAbU9QOZw4brcQyriELXdkfS
      ySd6w02GORSPvL4FxHDM4y9E7QuyN+2OJetiZjQpCthzfDKb1+NP3dTdHl6TR0/lZ56TWg27
      MBwvTOQKI4lP1/1+cCQ3JaG/3jHtTvWXd+5yYkbng5rpp2JqrbqZy+b/4ddf0I6mjz42Wxmc
      yFXurQFqxnSu2XLklH7mcuFpN2p7/Fbn/dcfMAERU+x7v2UvX0l/fC04eyGz/xren1UYvo+f
      B/GZZ26yMWZdEmI/unxFFRXHMSnDKwJndQt/fmt5l8DoA3JsBMQKXCyrUM/v9sJkTun1nsJ6
      5j6hLJfOy601JzOUlFrBvRsbxZnJvS97jEDq/eJvrk7Ojuay4sKDZmEk7Zt2qpTaKXsvdRkS
      eLISn4rzN+rWg6XFcjpzeTgHAJBOzoxPDP6hduLYCAgAJi48hVyQB0DQ1ee/N/Poz/3vNj6C
      FYRYSm3er9y/627cb87n4rTePP0HL02P7bjMRkK/0rXMZuVWxxMC807duDy22+FPk8P2djMP
      EzEOfVKmlICDsWeiz5tNx0lAR4do8LpxODZCGEok+ZkE0+hAh4+mZsocJqsV89SpcoBYz8gX
      dw00xgpKnFlPp4fOT/AtN0B0jxmWk0IbsZ6iCI4P+mOGrGOYhiT4tquonzpMuiYWRDAqVSWZ
      UGXOMh1JERGAadiRgAAARled8o11i+KxuOr7PmVYASPP97oBpHZLrLINVY28f2LQ9gSu+97r
      d2JxcXx2+MabKy/9nbN7GkSY4b52+uTD1wlt97JbvPaz1+PF5J277VxRxT4JBSkho/qDjbBU
      KHJem8g//OHFR8de3Eb14wdd941rbY+3ff/cuH5vw09ntUhAW7y+tBZj2FfvW7VmV05mpjTB
      NLtXu/RfvHLuYF3IIDwcwuJ80Kr3lu7Xnz+au4zNjK4u1XWZTSYVYgcW4ivrVY7lchk5bIdG
      q0MoPBIQp6rEWFVUiQY8h9SVlUqjK0yMpyIBbSEg6BCQMJ7KJKrAiohuuG5Rf2qnJqbOljWV
      v3Nz43s/mX7w0drMbGn38j3M+p+zXXbBBzQ6OXzm/FSj3ut27XhKS8TE5ZXi5IntPQ6woJw9
      W1YSehhA6Jj1ZuYb5VxcFyMBbXFluGhRTDzXJfB7yZhDyDNDQ7r41HKpJjM6AJx9ZhQA9jN3
      mL9Il5fWY+lYPKU9XDM0DfuhHRP6nhtg+bOulKGBXvt3v44Xkm++uXTxhdPt168WhtOBXJzc
      Yfx1Gxu3Fgzy/o0b94NzZzNBEI6dKAPA/w9s9NFH+A0s4QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Geo Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Geo Map  w.o. Null' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Regional Distribution' width='191'>
      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
      W3NRWZQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Flight Cancellation Dashboard' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
